
C:\Users\danao\Desktop\Games\Source\pong\cube\pong_game\TrueSTUDIO\pong_game\Debug\pong_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00040cc8  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08047f20  08047f20  00057f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08047f24  08047f24  00057f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  20000000  08047f28  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00060474  2**0
                  CONTENTS
  7 .bss          000009c0  20000474  20000474  00060474  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e34  20000e34  00060474  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00060474  2**0
                  CONTENTS, READONLY
 10 .debug_line   00013779  00000000  00000000  000604a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000470bc  00000000  00000000  00073c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007e68  00000000  00000000  000bacd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001878  00000000  00000000  000c2b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002040  00000000  00000000  000c43c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00011c62  00000000  00000000  000c6400  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007d80  00000000  00000000  000d8062  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000dfde2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a74  00000000  00000000  000dfe60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000474 	.word	0x20000474
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007240 	.word	0x08007240

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000478 	.word	0x20000478
 80001ec:	08007240 	.word	0x08007240

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80002a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002d8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002a6:	e003      	b.n	80002b0 <LoopCopyDataInit>

080002a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ae:	3104      	adds	r1, #4

080002b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002b8:	d3f6      	bcc.n	80002a8 <CopyDataInit>
  ldr  r2, =_sbss
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002bc:	e002      	b.n	80002c4 <LoopFillZerobss>

080002be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002c0:	f842 3b04 	str.w	r3, [r2], #4

080002c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002c8:	d3f9      	bcc.n	80002be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002ca:	f001 fb71 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ce:	f006 fb5f 	bl	8006990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002d2:	f000 fc71 	bl	8000bb8 <main>
  bx  lr    
 80002d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80002d8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80002dc:	08047f28 	.word	0x08047f28
  ldr  r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002e4:	20000474 	.word	0x20000474
  ldr  r2, =_sbss
 80002e8:	20000474 	.word	0x20000474
  ldr  r3, = _ebss
 80002ec:	20000e34 	.word	0x20000e34

080002f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80002f6:	4815      	ldr	r0, [pc, #84]	; (800034c <MX_ADC1_Init+0x58>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_ADC1_Init+0x5c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002fa:	4916      	ldr	r1, [pc, #88]	; (8000354 <MX_ADC1_Init+0x60>)
 80002fc:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002fe:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000302:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000304:	e880 1008 	stmia.w	r0, {r3, ip}
  hadc1.Init.ScanConvMode = ENABLE;
 8000308:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030a:	6082      	str	r2, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800030c:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800030e:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000310:	6202      	str	r2, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000312:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	60c2      	str	r2, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000318:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031c:	f001 fba6 	bl	8001a6c <HAL_ADC_Init>
 8000320:	b118      	cbz	r0, 800032a <MX_ADC1_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000322:	214a      	movs	r1, #74	; 0x4a
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_ADC1_Init+0x64>)
 8000326:	f000 fd0b 	bl	8000d40 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800032a:	210d      	movs	r1, #13
 800032c:	2201      	movs	r2, #1
 800032e:	2307      	movs	r3, #7
 8000330:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_ADC1_Init+0x58>)
 8000336:	4669      	mov	r1, sp
 8000338:	f001 fdac 	bl	8001e94 <HAL_ADC_ConfigChannel>
 800033c:	b118      	cbz	r0, 8000346 <MX_ADC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800033e:	2154      	movs	r1, #84	; 0x54
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_ADC1_Init+0x64>)
 8000342:	f000 fcfd 	bl	8000d40 <_Error_Handler>
  }

}
 8000346:	b005      	add	sp, #20
 8000348:	f85d fb04 	ldr.w	pc, [sp], #4
 800034c:	20000a58 	.word	0x20000a58
 8000350:	40012000 	.word	0x40012000
 8000354:	0f000001 	.word	0x0f000001
 8000358:	08007258 	.word	0x08007258

0800035c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800035c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800035e:	6802      	ldr	r2, [r0, #0]
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <HAL_ADC_MspInit+0x7c>)
 8000362:	429a      	cmp	r2, r3
{
 8000364:	b086      	sub	sp, #24
 8000366:	4606      	mov	r6, r0
  if(adcHandle->Instance==ADC1)
 8000368:	d133      	bne.n	80003d2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800036a:	2500      	movs	r5, #0
 800036c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000370:	9500      	str	r5, [sp, #0]
 8000372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000374:	4819      	ldr	r0, [pc, #100]	; (80003dc <HAL_ADC_MspInit+0x80>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000376:	4c1a      	ldr	r4, [pc, #104]	; (80003e0 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800037c:	645a      	str	r2, [r3, #68]	; 0x44
 800037e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800038a:	2308      	movs	r3, #8
 800038c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800038e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	2303      	movs	r3, #3
 8000392:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000394:	f002 fa4c 	bl	8002830 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800039a:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800039c:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80003a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a4:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80003a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003aa:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80003ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003b0:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003b2:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80003b4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80003b8:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80003ba:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80003bc:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80003be:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003c0:	f001 ffe8 	bl	8002394 <HAL_DMA_Init>
 80003c4:	b118      	cbz	r0, 80003ce <HAL_ADC_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 80003c6:	217b      	movs	r1, #123	; 0x7b
 80003c8:	4807      	ldr	r0, [pc, #28]	; (80003e8 <HAL_ADC_MspInit+0x8c>)
 80003ca:	f000 fcb9 	bl	8000d40 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ce:	63b4      	str	r4, [r6, #56]	; 0x38
 80003d0:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003d2:	b006      	add	sp, #24
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	bf00      	nop
 80003d8:	40012000 	.word	0x40012000
 80003dc:	40020800 	.word	0x40020800
 80003e0:	20000aa0 	.word	0x20000aa0
 80003e4:	40026410 	.word	0x40026410
 80003e8:	08007258 	.word	0x08007258

080003ec <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80003ec:	b507      	push	{r0, r1, r2, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 80003ee:	480d      	ldr	r0, [pc, #52]	; (8000424 <MX_DAC_Init+0x38>)
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <MX_DAC_Init+0x3c>)
 80003f2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80003f4:	f001 feb0 	bl	8002158 <HAL_DAC_Init>
 80003f8:	b118      	cbz	r0, 8000402 <MX_DAC_Init+0x16>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003fa:	213d      	movs	r1, #61	; 0x3d
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <MX_DAC_Init+0x40>)
 80003fe:	f000 fc9f 	bl	8000d40 <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000402:	2300      	movs	r3, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000404:	2210      	movs	r2, #16
 8000406:	4669      	mov	r1, sp
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <MX_DAC_Init+0x38>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800040a:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800040c:	9301      	str	r3, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800040e:	f001 ff29 	bl	8002264 <HAL_DAC_ConfigChannel>
 8000412:	b118      	cbz	r0, 800041c <MX_DAC_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000414:	2146      	movs	r1, #70	; 0x46
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_DAC_Init+0x40>)
 8000418:	f000 fc92 	bl	8000d40 <_Error_Handler>
  }

}
 800041c:	b003      	add	sp, #12
 800041e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000422:	bf00      	nop
 8000424:	20000b00 	.word	0x20000b00
 8000428:	40007400 	.word	0x40007400
 800042c:	0800726b 	.word	0x0800726b

08000430 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000430:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 8000432:	6802      	ldr	r2, [r0, #0]
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <HAL_DAC_MspInit+0x4c>)
 8000436:	429a      	cmp	r2, r3
{
 8000438:	b086      	sub	sp, #24
  if(dacHandle->Instance==DAC)
 800043a:	d11d      	bne.n	8000478 <HAL_DAC_MspInit+0x48>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800043c:	2400      	movs	r4, #0
 800043e:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8000442:	9400      	str	r4, [sp, #0]
 8000444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <HAL_DAC_MspInit+0x50>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8000448:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800044c:	641a      	str	r2, [r3, #64]	; 0x40
 800044e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	9403      	str	r4, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 8000452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800045a:	2320      	movs	r3, #32
 800045c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	2303      	movs	r3, #3
 8000462:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f002 f9e4 	bl	8002830 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000468:	2036      	movs	r0, #54	; 0x36
 800046a:	4622      	mov	r2, r4
 800046c:	4621      	mov	r1, r4
 800046e:	f001 fde7 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000472:	2036      	movs	r0, #54	; 0x36
 8000474:	f001 fe26 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000478:	b006      	add	sp, #24
 800047a:	bd10      	pop	{r4, pc}
 800047c:	40007400 	.word	0x40007400
 8000480:	40020000 	.word	0x40020000

08000484 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000484:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_DMA_Init+0x40>)
 8000488:	2400      	movs	r4, #0
 800048a:	9401      	str	r4, [sp, #4]
 800048c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800048e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800049a:	4622      	mov	r2, r4
 800049c:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800049e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80004a0:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80004a4:	f001 fdcc 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80004a8:	2038      	movs	r0, #56	; 0x38
 80004aa:	f001 fe0b 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004ae:	4622      	mov	r2, r4
 80004b0:	4621      	mov	r1, r4
 80004b2:	203a      	movs	r0, #58	; 0x3a
 80004b4:	f001 fdc4 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80004b8:	203a      	movs	r0, #58	; 0x3a
 80004ba:	f001 fe03 	bl	80020c4 <HAL_NVIC_EnableIRQ>

}
 80004be:	b002      	add	sp, #8
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800

080004c8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80004c8:	b500      	push	{lr}
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80004ca:	4817      	ldr	r0, [pc, #92]	; (8000528 <MX_FMC_Init+0x60>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80004cc:	4917      	ldr	r1, [pc, #92]	; (800052c <MX_FMC_Init+0x64>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80004ce:	2210      	movs	r2, #16
 80004d0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80004d2:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80004d4:	2301      	movs	r3, #1
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80004d6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80004d8:	f44f 72c0 	mov.w	r2, #384	; 0x180
{
 80004dc:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80004de:	e880 000a 	stmia.w	r0, {r1, r3}
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80004e2:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80004e4:	2300      	movs	r3, #0
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80004ea:	2104      	movs	r1, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80004ec:	6083      	str	r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004ee:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004f0:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80004f2:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 80004f4:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80004f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80004fa:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80004fc:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.ExitSelfRefreshDelay = 7;
 80004fe:	9202      	str	r2, [sp, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000500:	2302      	movs	r3, #2
  SdramTiming.SelfRefreshTime = 4;
 8000502:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8000504:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000506:	4469      	add	r1, sp
  SdramTiming.WriteRecoveryTime = 3;
 8000508:	2203      	movs	r2, #3
  SdramTiming.LoadToActiveDelay = 2;
 800050a:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 800050c:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800050e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000510:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000512:	f004 f8e1 	bl	80046d8 <HAL_SDRAM_Init>
 8000516:	b118      	cbz	r0, 8000520 <MX_FMC_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000518:	2150      	movs	r1, #80	; 0x50
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_FMC_Init+0x68>)
 800051c:	f000 fc10 	bl	8000d40 <_Error_Handler>
  }

}
 8000520:	b009      	add	sp, #36	; 0x24
 8000522:	f85d fb04 	ldr.w	pc, [sp], #4
 8000526:	bf00      	nop
 8000528:	20000b14 	.word	0x20000b14
 800052c:	a0000140 	.word	0xa0000140
 8000530:	0800727e 	.word	0x0800727e

08000534 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FMC_Initialized) {
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <HAL_SDRAM_MspInit+0xc8>)
 800053a:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800053c:	b086      	sub	sp, #24
  if (FMC_Initialized) {
 800053e:	2c00      	cmp	r4, #0
 8000540:	d159      	bne.n	80005f6 <HAL_SDRAM_MspInit+0xc2>
  FMC_Initialized = 1;
 8000542:	f04f 0801 	mov.w	r8, #1
 8000546:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <HAL_SDRAM_MspInit+0xcc>)
 800054c:	9400      	str	r4, [sp, #0]
 800054e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000550:	482c      	ldr	r0, [pc, #176]	; (8000604 <HAL_SDRAM_MspInit+0xd0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000552:	ea42 0208 	orr.w	r2, r2, r8
 8000556:	639a      	str	r2, [r3, #56]	; 0x38
 8000558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 800055c:	ea03 0308 	and.w	r3, r3, r8
 8000560:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000564:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000566:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000568:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800056c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000570:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8000572:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000574:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000576:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000578:	f002 f95a 	bl	8002830 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800057c:	a901      	add	r1, sp, #4
 800057e:	4822      	ldr	r0, [pc, #136]	; (8000608 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000580:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000588:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800058c:	f002 f950 	bl	8002830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000590:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000594:	a901      	add	r1, sp, #4
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000598:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005a2:	f002 f945 	bl	8002830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80005a6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005aa:	a901      	add	r1, sp, #4
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80005ae:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005b6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b8:	f002 f93a 	bl	8002830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80005bc:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c0:	a901      	add	r1, sp, #4
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80005c4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005cc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ce:	f002 f92f 	bl	8002830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80005d2:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	a901      	add	r1, sp, #4
 80005d6:	4810      	ldr	r0, [pc, #64]	; (8000618 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80005d8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005de:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f002 f925 	bl	8002830 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80005e6:	2030      	movs	r0, #48	; 0x30
 80005e8:	4622      	mov	r2, r4
 80005ea:	4621      	mov	r1, r4
 80005ec:	f001 fd28 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80005f0:	2030      	movs	r0, #48	; 0x30
 80005f2:	f001 fd67 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80005f6:	b006      	add	sp, #24
 80005f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005fc:	20000490 	.word	0x20000490
 8000600:	40023800 	.word	0x40023800
 8000604:	40021400 	.word	0x40021400
 8000608:	40020800 	.word	0x40020800
 800060c:	40021800 	.word	0x40021800
 8000610:	40021000 	.word	0x40021000
 8000614:	40020c00 	.word	0x40020c00
 8000618:	40020400 	.word	0x40020400

0800061c <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000620:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000622:	2400      	movs	r4, #0
 8000624:	4b87      	ldr	r3, [pc, #540]	; (8000844 <MX_GPIO_Init+0x228>)
 8000626:	9403      	str	r4, [sp, #12]
 8000628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800062a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8000858 <MX_GPIO_Init+0x23c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800062e:	4f86      	ldr	r7, [pc, #536]	; (8000848 <MX_GPIO_Init+0x22c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000630:	f8df a228 	ldr.w	sl, [pc, #552]	; 800085c <MX_GPIO_Init+0x240>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_Green_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8000634:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8000860 <MX_GPIO_Init+0x244>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000638:	4e84      	ldr	r6, [pc, #528]	; (800084c <MX_GPIO_Init+0x230>)

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USER_BUTTON2_Pin|USER_BUTTON3_Pin|USER_BUTTON4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063a:	f8df b228 	ldr.w	fp, [pc, #552]	; 8000864 <MX_GPIO_Init+0x248>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	f042 0210 	orr.w	r2, r2, #16
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	f002 0210 	and.w	r2, r2, #16
 800064a:	9203      	str	r2, [sp, #12]
 800064c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	9404      	str	r4, [sp, #16]
 8000650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000652:	f042 0204 	orr.w	r2, r2, #4
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f002 0204 	and.w	r2, r2, #4
 800065e:	9204      	str	r2, [sp, #16]
 8000660:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000662:	9405      	str	r4, [sp, #20]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0220 	orr.w	r2, r2, #32
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f002 0220 	and.w	r2, r2, #32
 8000672:	9205      	str	r2, [sp, #20]
 8000674:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	9406      	str	r4, [sp, #24]
 8000678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000686:	9206      	str	r2, [sp, #24]
 8000688:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	9407      	str	r4, [sp, #28]
 800068c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068e:	f042 0201 	orr.w	r2, r2, #1
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
 8000694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000696:	f002 0201 	and.w	r2, r2, #1
 800069a:	9207      	str	r2, [sp, #28]
 800069c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	9408      	str	r4, [sp, #32]
 80006a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a2:	f042 0202 	orr.w	r2, r2, #2
 80006a6:	631a      	str	r2, [r3, #48]	; 0x30
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	f002 0202 	and.w	r2, r2, #2
 80006ae:	9208      	str	r2, [sp, #32]
 80006b0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b2:	9409      	str	r4, [sp, #36]	; 0x24
 80006b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006ba:	631a      	str	r2, [r3, #48]	; 0x30
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80006c2:	9209      	str	r2, [sp, #36]	; 0x24
 80006c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	940a      	str	r4, [sp, #40]	; 0x28
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	f042 0208 	orr.w	r2, r2, #8
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0308 	and.w	r3, r3, #8
 80006d6:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80006d8:	4622      	mov	r2, r4
 80006da:	4640      	mov	r0, r8
 80006dc:	2114      	movs	r1, #20
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80006e0:	f002 fadc 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80006e4:	4622      	mov	r2, r4
 80006e6:	4638      	mov	r0, r7
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	f002 fad7 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80006ee:	4622      	mov	r2, r4
 80006f0:	4650      	mov	r0, sl
 80006f2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006f6:	f002 fad1 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED_Green_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80006fa:	4622      	mov	r2, r4
 80006fc:	4648      	mov	r0, r9
 80006fe:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000702:	f002 facb 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000706:	4622      	mov	r2, r4
 8000708:	4630      	mov	r0, r6
 800070a:	2110      	movs	r1, #16
 800070c:	f002 fac6 	bl	8002c9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_BUTTON2_Pin|USER_BUTTON3_Pin|USER_BUTTON4_Pin;
 8000710:	231c      	movs	r3, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	a90b      	add	r1, sp, #44	; 0x2c
 8000714:	484e      	ldr	r0, [pc, #312]	; (8000850 <MX_GPIO_Init+0x234>)
  GPIO_InitStruct.Pin = USER_BUTTON2_Pin|USER_BUTTON3_Pin|USER_BUTTON4_Pin;
 8000716:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000718:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071e:	f002 f887 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_GPIO_PC13_Pin|USER_GPIO_PC8_Pin;
 8000722:	f44f 5304 	mov.w	r3, #8448	; 0x2100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	a90b      	add	r1, sp, #44	; 0x2c
 8000728:	4640      	mov	r0, r8

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = USER_GPIO_PC13_Pin|USER_GPIO_PC8_Pin;
 800072c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	f002 f87d 	bl	8002830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 8000736:	2314      	movs	r3, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000738:	a90b      	add	r1, sp, #44	; 0x2c
 800073a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 800073c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f002 f874 	bl	8002830 <HAL_GPIO_Init>
  ////////////////////////////////////////
  //User button - blue button on the board
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000748:	2302      	movs	r3, #2
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074a:	a90b      	add	r1, sp, #44	; 0x2c
 800074c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	930d      	str	r3, [sp, #52]	; 0x34
 8000750:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = B1_Pin;
 8000752:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f002 f86b 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800075a:	2280      	movs	r2, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800075c:	a90b      	add	r1, sp, #44	; 0x2c
 800075e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000760:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000768:	f002 f862 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800076c:	2220      	movs	r2, #32
 800076e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000770:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000772:	4a38      	ldr	r2, [pc, #224]	; (8000854 <MX_GPIO_Init+0x238>)
 8000774:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000776:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800077a:	f002 f859 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BOOT1_Pin|USER_GPIO_PB7_Pin;
 800077e:	2284      	movs	r2, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	a90b      	add	r1, sp, #44	; 0x2c
 8000782:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BOOT1_Pin|USER_GPIO_PB7_Pin;
 8000784:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f002 f851 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	9b01      	ldr	r3, [sp, #4]
 8000790:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000792:	f44f 4250 	mov.w	r2, #53248	; 0xd000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000796:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	a90b      	add	r1, sp, #44	; 0x2c
 800079a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800079c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800079e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f002 f844 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80007ac:	a90b      	add	r1, sp, #44	; 0x2c
 80007ae:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80007b0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f002 f83b 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = TE_Pin|USER_GPIO_PD2_Pin|USER_GPIO_PD4_Pin|USER_GPIO_PD5_Pin 
 80007ba:	f640 03b4 	movw	r3, #2228	; 0x8b4
                          |USER_GPIO_PD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007be:	a90b      	add	r1, sp, #44	; 0x2c
 80007c0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = TE_Pin|USER_GPIO_PD2_Pin|USER_GPIO_PD4_Pin|USER_GPIO_PD5_Pin 
 80007c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f002 f832 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80007cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d0:	a90b      	add	r1, sp, #44	; 0x2c
 80007d2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80007d4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	f002 f828 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_GPIO_PG2_Pin|USER_GPIO_PG3_Pin|USER_GPIO_PG9_Pin;
 80007e0:	f44f 7303 	mov.w	r3, #524	; 0x20c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e4:	a90b      	add	r1, sp, #44	; 0x2c
 80007e6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_GPIO_PG2_Pin|USER_GPIO_PG3_Pin|USER_GPIO_PG9_Pin;
 80007e8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ee:	f002 f81f 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Touch_Panel_EXTI15_Pin;
 80007f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Touch_Panel_EXTI15_GPIO_Port, &GPIO_InitStruct);
 80007f6:	a90b      	add	r1, sp, #44	; 0x2c
 80007f8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = Touch_Panel_EXTI15_Pin;
 80007fa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Touch_Panel_EXTI15_GPIO_Port, &GPIO_InitStruct);
 8000802:	f002 f815 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin;
 8000806:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080a:	a90b      	add	r1, sp, #44	; 0x2c
 800080c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin;
 800080e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	f002 f80b 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800081a:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800081c:	a90b      	add	r1, sp, #44	; 0x2c
 800081e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000820:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000828:	f002 f802 	bl	8002830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800082c:	4622      	mov	r2, r4
 800082e:	4621      	mov	r1, r4
 8000830:	2028      	movs	r0, #40	; 0x28
 8000832:	f001 fc05 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000836:	2028      	movs	r0, #40	; 0x28
 8000838:	f001 fc44 	bl	80020c4 <HAL_NVIC_EnableIRQ>

}
 800083c:	b011      	add	sp, #68	; 0x44
 800083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020400 	.word	0x40020400
 8000850:	40021000 	.word	0x40021000
 8000854:	10120000 	.word	0x10120000
 8000858:	40020800 	.word	0x40020800
 800085c:	40020c00 	.word	0x40020c00
 8000860:	40021800 	.word	0x40021800
 8000864:	10110000 	.word	0x10110000

08000868 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000868:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_I2C3_Init+0x38>)
  hi2c3.Init.ClockSpeed = 100000;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_I2C3_Init+0x3c>)
 800086e:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80008ac <MX_I2C3_Init+0x44>
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8000876:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800087a:	2300      	movs	r3, #0
 800087c:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800087e:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000882:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000884:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800088a:	f002 fc07 	bl	800309c <HAL_I2C_Init>
 800088e:	b128      	cbz	r0, 800089c <MX_I2C3_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000890:	2142      	movs	r1, #66	; 0x42
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C3_Init+0x40>)
  }

}
 8000894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000898:	f000 ba52 	b.w	8000d40 <_Error_Handler>
 800089c:	bd08      	pop	{r3, pc}
 800089e:	bf00      	nop
 80008a0:	20000b48 	.word	0x20000b48
 80008a4:	40005c00 	.word	0x40005c00
 80008a8:	08007291 	.word	0x08007291
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C3)
 80008b2:	6802      	ldr	r2, [r0, #0]
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <HAL_I2C_MspInit+0x60>)
 80008b6:	429a      	cmp	r2, r3
{
 80008b8:	b087      	sub	sp, #28
  if(i2cHandle->Instance==I2C3)
 80008ba:	d126      	bne.n	800090a <HAL_I2C_MspInit+0x5a>
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008bc:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80008be:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2601      	movs	r6, #1
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80008c8:	eb0d 0105 	add.w	r1, sp, r5
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80008ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008d6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f001 ffaa 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80008dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80008e0:	eb0d 0105 	add.w	r1, sp, r5
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80008e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e8:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ea:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008ee:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f001 ff9e 	bl	8002830 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_I2C_MspInit+0x6c>)
 80008f6:	9400      	str	r4, [sp, #0]
 80008f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800090a:	b007      	add	sp, #28
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090e:	bf00      	nop
 8000910:	40005c00 	.word	0x40005c00
 8000914:	40020800 	.word	0x40020800
 8000918:	40020000 	.word	0x40020000
 800091c:	40023800 	.word	0x40023800

08000920 <MX_LTDC_Init>:
/* LTDC init function */
void MX_LTDC_Init(void)
{
  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <MX_LTDC_Init+0xa8>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_LTDC_Init+0xac>)
{
 8000924:	b510      	push	{r4, lr}
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000926:	2400      	movs	r4, #0
 8000928:	e880 0018 	stmia.w	r0, {r3, r4}
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 800092c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000930:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 9;
 8000932:	2309      	movs	r3, #9
 8000934:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800093a:	231d      	movs	r3, #29
 800093c:	61c3      	str	r3, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800093e:	2303      	movs	r3, #3
 8000940:	6203      	str	r3, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000942:	f240 130d 	movw	r3, #269	; 0x10d
 8000946:	6243      	str	r3, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000948:	f240 1343 	movw	r3, #323	; 0x143
 800094c:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800094e:	f240 1317 	movw	r3, #279	; 0x117
{
 8000952:	b08e      	sub	sp, #56	; 0x38
  hltdc.Init.TotalWidth = 279;
 8000954:	62c3      	str	r3, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000956:	f240 1347 	movw	r3, #327	; 0x147
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800095a:	6084      	str	r4, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800095c:	60c4      	str	r4, [r0, #12]
  hltdc.Init.TotalHeigh = 327;
 800095e:	6303      	str	r3, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000960:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000964:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000968:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800096c:	f002 feac 	bl	80036c8 <HAL_LTDC_Init>
 8000970:	b118      	cbz	r0, 800097a <MX_LTDC_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000972:	214a      	movs	r1, #74	; 0x4a
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <MX_LTDC_Init+0xb0>)
 8000976:	f000 f9e3 	bl	8000d40 <_Error_Handler>

  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 240;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 320;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 800097a:	2105      	movs	r1, #5
 800097c:	9105      	str	r1, [sp, #20]
  pLayerCfg.Alpha = 255;
 800097e:	21ff      	movs	r1, #255	; 0xff
 8000980:	9106      	str	r1, [sp, #24]
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000982:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowX1 = 240;
 8000986:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000988:	9108      	str	r1, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800098a:	2107      	movs	r1, #7
  pLayerCfg.WindowY1 = 320;
 800098c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  pLayerCfg.WindowX1 = 240;
 8000990:	9202      	str	r2, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000992:	9109      	str	r1, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
  pLayerCfg.ImageWidth = 240;
 8000994:	920b      	str	r2, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000996:	a901      	add	r1, sp, #4
 8000998:	2200      	movs	r2, #0
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_LTDC_Init+0xa8>)
  pLayerCfg.WindowX0 = 0;
 800099c:	9401      	str	r4, [sp, #4]
  pLayerCfg.WindowY0 = 0;
 800099e:	9403      	str	r4, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 80009a0:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
 80009a2:	9407      	str	r4, [sp, #28]
  pLayerCfg.FBStartAdress = 0;
 80009a4:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = 320;
 80009a6:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009a8:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009ac:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009b0:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009b4:	f002 ffc2 	bl	800393c <HAL_LTDC_ConfigLayer>
 80009b8:	b118      	cbz	r0, 80009c2 <MX_LTDC_Init+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 80009ba:	215e      	movs	r1, #94	; 0x5e
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_LTDC_Init+0xb0>)
 80009be:	f000 f9bf 	bl	8000d40 <_Error_Handler>
  }

}
 80009c2:	b00e      	add	sp, #56	; 0x38
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	20000b9c 	.word	0x20000b9c
 80009cc:	40016800 	.word	0x40016800
 80009d0:	080072a4 	.word	0x080072a4

080009d4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(ltdcHandle->Instance==LTDC)
 80009d6:	6802      	ldr	r2, [r0, #0]
 80009d8:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <HAL_LTDC_MspInit+0xfc>)
 80009da:	429a      	cmp	r2, r3
{
 80009dc:	b087      	sub	sp, #28
  if(ltdcHandle->Instance==LTDC)
 80009de:	d175      	bne.n	8000acc <HAL_LTDC_MspInit+0xf8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80009e0:	2400      	movs	r4, #0
 80009e2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80009e6:	9400      	str	r4, [sp, #0]
 80009e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80009ea:	483a      	ldr	r0, [pc, #232]	; (8000ad4 <HAL_LTDC_MspInit+0x100>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80009ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80009f0:	645a      	str	r2, [r3, #68]	; 0x44
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	9403      	str	r4, [sp, #12]
    __HAL_RCC_LTDC_CLK_ENABLE();
 80009f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009fa:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009fe:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000a00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a08:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000a0a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a0e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f001 ff0e 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8000a14:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	a901      	add	r1, sp, #4
 8000a1a:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <HAL_LTDC_MspInit+0x104>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8000a1c:	9301      	str	r3, [sp, #4]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a1e:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a26:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f001 ff02 	bl	8002830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a2c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	a901      	add	r1, sp, #4
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a3a:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f001 fef8 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a40:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	a901      	add	r1, sp, #4
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a50:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f001 feed 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a56:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5a:	a901      	add	r1, sp, #4
 8000a5c:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a5e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a66:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	f001 fee2 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a6c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	a901      	add	r1, sp, #4
 8000a72:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a74:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f001 fed7 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000a82:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	a901      	add	r1, sp, #4
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000a88:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a90:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a92:	f001 fecd 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000a96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9a:	a901      	add	r1, sp, #4
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000a9e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000aa6:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa8:	f001 fec2 	bl	8002830 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000aac:	4622      	mov	r2, r4
 8000aae:	4621      	mov	r1, r4
 8000ab0:	2058      	movs	r0, #88	; 0x58
 8000ab2:	f001 fac5 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ab6:	2058      	movs	r0, #88	; 0x58
 8000ab8:	f001 fb04 	bl	80020c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8000abc:	2059      	movs	r0, #89	; 0x59
 8000abe:	4622      	mov	r2, r4
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	f001 fabd 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8000ac6:	2059      	movs	r0, #89	; 0x59
 8000ac8:	f001 fafc 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000acc:	b007      	add	sp, #28
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad0:	40016800 	.word	0x40016800
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000aec:	b530      	push	{r4, r5, lr}
 8000aee:	b0a1      	sub	sp, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <SystemClock_Config+0xc4>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	9101      	str	r1, [sp, #4]
 8000af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000afc:	641a      	str	r2, [r3, #64]	; 0x40
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <SystemClock_Config+0xc8>)
 8000b0a:	9102      	str	r1, [sp, #8]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b26:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b2e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b36:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b3a:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b42:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f003 f82a 	bl	8003b9c <HAL_RCC_OscConfig>
 8000b48:	b100      	cbz	r0, 8000b4c <SystemClock_Config+0x60>
 8000b4a:	e7fe      	b.n	8000b4a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b56:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b58:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b5e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b62:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b64:	f003 fa56 	bl	8004014 <HAL_RCC_ClockConfig>
 8000b68:	b100      	cbz	r0, 8000b6c <SystemClock_Config+0x80>
 8000b6a:	e7fe      	b.n	8000b6a <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b6c:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b6e:	9514      	str	r5, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b70:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b72:	2504      	movs	r5, #4
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b7a:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b7c:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f003 fbad 	bl	80042dc <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4604      	mov	r4, r0
 8000b84:	b100      	cbz	r0, 8000b88 <SystemClock_Config+0x9c>
 8000b86:	e7fe      	b.n	8000b86 <SystemClock_Config+0x9a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b88:	f003 fb54 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b94:	f001 faac 	bl	80020f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f001 fabf 	bl	800211c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b9e:	4622      	mov	r2, r4
 8000ba0:	4621      	mov	r1, r4
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	f001 fa4b 	bl	8002040 <HAL_NVIC_SetPriority>
}
 8000baa:	b021      	add	sp, #132	; 0x84
 8000bac:	bd30      	pop	{r4, r5, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <main>:
{
 8000bb8:	b508      	push	{r3, lr}
  HAL_Init();
 8000bba:	f000 ff1f 	bl	80019fc <HAL_Init>
  SystemClock_Config();
 8000bbe:	f7ff ff95 	bl	8000aec <SystemClock_Config>
  MX_GPIO_Init();
 8000bc2:	f7ff fd2b 	bl	800061c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc6:	f7ff fc5d 	bl	8000484 <MX_DMA_Init>
  MX_FMC_Init();
 8000bca:	f7ff fc7d 	bl	80004c8 <MX_FMC_Init>
  MX_LTDC_Init();
 8000bce:	f7ff fea7 	bl	8000920 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000bd2:	f000 facf 	bl	8001174 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8000bd6:	f7ff fc09 	bl	80003ec <MX_DAC_Init>
  MX_SPI3_Init();
 8000bda:	f000 f8b3 	bl	8000d44 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000bde:	f7ff fe43 	bl	8000868 <MX_I2C3_Init>
  MX_TIM9_Init();
 8000be2:	f000 fa8d 	bl	8001100 <MX_TIM9_Init>
  MX_ADC1_Init();
 8000be6:	f7ff fb85 	bl	80002f4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000bea:	f000 f9d3 	bl	8000f94 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bee:	f000 f9f9 	bl	8000fe4 <MX_TIM7_Init>
	SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000bf2:	f240 5069 	movw	r0, #1385	; 0x569
 8000bf6:	f000 fc4b 	bl	8001490 <SDRAM_Initialization_sequence>
	LCD_Clear(0, BLACK);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	f000 fb89 	bl	8001314 <LCD_Clear>
	LCD_Clear(1, BLACK);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fb85 	bl	8001314 <LCD_Clear>
	ili9341_Init();
 8000c0a:	f000 fc8d 	bl	8001528 <ili9341_Init>
	TouchPanel_init();
 8000c0e:	f005 fe01 	bl	8006814 <TouchPanel_init>
	SlidePot_init();
 8000c12:	f000 fb23 	bl	800125c <SlidePot_init>
	HAL_LTDC_ConfigCLUT(&hltdc, colorPalletRGB332 , 256, 0);
 8000c16:	2300      	movs	r3, #0
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	4937      	ldr	r1, [pc, #220]	; (8000cfc <main+0x144>)
 8000c1e:	4838      	ldr	r0, [pc, #224]	; (8000d00 <main+0x148>)
		if (!(gameTick % 100))
 8000c20:	4d38      	ldr	r5, [pc, #224]	; (8000d04 <main+0x14c>)
			while (!HAL_GPIO_ReadPin(UserButtonBlue_GPIO_Port, UserButtonBlue_Pin))
 8000c22:	4e39      	ldr	r6, [pc, #228]	; (8000d08 <main+0x150>)
	HAL_LTDC_ConfigCLUT(&hltdc, colorPalletRGB332 , 256, 0);
 8000c24:	f002 ff24 	bl	8003a70 <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, 0);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4835      	ldr	r0, [pc, #212]	; (8000d00 <main+0x148>)
 8000c2c:	f002 ff68 	bl	8003b00 <HAL_LTDC_EnableCLUT>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)SDRAM_LCD_LAYER_0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	4936      	ldr	r1, [pc, #216]	; (8000d0c <main+0x154>)
 8000c34:	4832      	ldr	r0, [pc, #200]	; (8000d00 <main+0x148>)
 8000c36:	f002 ff87 	bl	8003b48 <HAL_LTDC_SetAddress>
	Sprite_Init();
 8000c3a:	f005 fb27 	bl	800628c <Sprite_Init>
	Sound_Init();
 8000c3e:	f005 f959 	bl	8005ef4 <Sound_Init>
 8000c42:	462c      	mov	r4, r5
		Sprite_Ball_Move();
 8000c44:	f005 fc98 	bl	8006578 <Sprite_Ball_Move>
		Sprite_Player_Move();
 8000c48:	f005 fc18 	bl	800647c <Sprite_Player_Move>
		Sprite_Draw();
 8000c4c:	f005 fb3e 	bl	80062cc <Sprite_Draw>
		if(Sprite_GetBallMissedFlag() == 1)
 8000c50:	f005 f9b2 	bl	8005fb8 <Sprite_GetBallMissedFlag>
 8000c54:	2801      	cmp	r0, #1
 8000c56:	d10f      	bne.n	8000c78 <main+0xc0>
			if (Sprite_GetNumPlayers() > 1)
 8000c58:	f005 fbbe 	bl	80063d8 <Sprite_GetNumPlayers>
 8000c5c:	2801      	cmp	r0, #1
 8000c5e:	d905      	bls.n	8000c6c <main+0xb4>
				Sound_Play_DroppedBall();
 8000c60:	f005 f986 	bl	8005f70 <Sound_Play_DroppedBall>
				HAL_Delay(2000);
 8000c64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c68:	f000 fef0 	bl	8001a4c <HAL_Delay>
			Sprite_ClearBallMissedFlag();
 8000c6c:	f005 f9aa 	bl	8005fc4 <Sprite_ClearBallMissedFlag>
			Sprite_DisplayDroppedBall();		//decrement player
 8000c70:	f005 f9ae 	bl	8005fd0 <Sprite_DisplayDroppedBall>
			Ball_Init();						//start the ball again
 8000c74:	f005 fa34 	bl	80060e0 <Ball_Init>
		if (!Sprite_GetNumPlayers())
 8000c78:	f005 fbae 	bl	80063d8 <Sprite_GetNumPlayers>
 8000c7c:	b360      	cbz	r0, 8000cd8 <main+0x120>
		if (!Sprite_GetNumTiles())
 8000c7e:	f005 fbb1 	bl	80063e4 <Sprite_GetNumTiles>
 8000c82:	b978      	cbnz	r0, 8000ca4 <main+0xec>
			Sound_Play_LevelUp();
 8000c84:	f005 f980 	bl	8005f88 <Sound_Play_LevelUp>
			HAL_Delay(1000);
 8000c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8c:	f000 fede 	bl	8001a4c <HAL_Delay>
			Tile_Init();
 8000c90:	f005 fa3a 	bl	8006108 <Tile_Init>
			Ball_Init();
 8000c94:	f005 fa24 	bl	80060e0 <Ball_Init>
			Sprite_IncreaseGameLevel();
 8000c98:	f005 fbd6 	bl	8006448 <Sprite_IncreaseGameLevel>
			HAL_Delay(1000);
 8000c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca0:	f000 fed4 	bl	8001a4c <HAL_Delay>
		if (HAL_GPIO_ReadPin(UserButtonBlue_GPIO_Port, UserButtonBlue_Pin))
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f001 ffe6 	bl	8002c78 <HAL_GPIO_ReadPin>
 8000cac:	b108      	cbz	r0, 8000cb2 <main+0xfa>
			Sprite_GameMode_ToggleMode();
 8000cae:	f005 fbb1 	bl	8006414 <Sprite_GameMode_ToggleMode>
		if (!(gameTick % 100))
 8000cb2:	6829      	ldr	r1, [r5, #0]
 8000cb4:	2264      	movs	r2, #100	; 0x64
 8000cb6:	fbb1 f3f2 	udiv	r3, r1, r2
 8000cba:	fb02 1313 	mls	r3, r2, r3, r1
 8000cbe:	b923      	cbnz	r3, 8000cca <main+0x112>
			HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <main+0x158>)
 8000cc6:	f002 f803 	bl	8002cd0 <HAL_GPIO_TogglePin>
		gameTick++;
 8000cca:	6823      	ldr	r3, [r4, #0]
		HAL_Delay(10);
 8000ccc:	200a      	movs	r0, #10
		gameTick++;
 8000cce:	3301      	adds	r3, #1
 8000cd0:	6023      	str	r3, [r4, #0]
		HAL_Delay(10);
 8000cd2:	f000 febb 	bl	8001a4c <HAL_Delay>
		Sprite_Ball_Move();
 8000cd6:	e7b5      	b.n	8000c44 <main+0x8c>
			Sound_Play_GameOver();
 8000cd8:	f005 f950 	bl	8005f7c <Sound_Play_GameOver>
			HAL_Delay(2000);
 8000cdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce0:	f000 feb4 	bl	8001a4c <HAL_Delay>
			Sprite_DisplayGameOver();
 8000ce4:	f005 f9bc 	bl	8006060 <Sprite_DisplayGameOver>
			while (!HAL_GPIO_ReadPin(UserButtonBlue_GPIO_Port, UserButtonBlue_Pin))
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4630      	mov	r0, r6
 8000cec:	f001 ffc4 	bl	8002c78 <HAL_GPIO_ReadPin>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d1c4      	bne.n	8000c7e <main+0xc6>
				Sprite_DisplayGameStart();
 8000cf4:	f005 fa44 	bl	8006180 <Sprite_DisplayGameStart>
 8000cf8:	e7f6      	b.n	8000ce8 <main+0x130>
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000b9c 	.word	0x20000b9c
 8000d04:	20000494 	.word	0x20000494
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	d0020000 	.word	0xd0020000
 8000d10:	40021800 	.word	0x40021800

08000d14 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d14:	6802      	ldr	r2, [r0, #0]
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d18:	429a      	cmp	r2, r3
{
 8000d1a:	b510      	push	{r4, lr}
 8000d1c:	4604      	mov	r4, r0
  if (htim->Instance == TIM1) {
 8000d1e:	d101      	bne.n	8000d24 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000d20:	f000 fe86 	bl	8001a30 <HAL_IncTick>
/* USER CODE BEGIN Callback 1 */

  //////////////////////////////////////////////
  //Timer TIM7 - Use this one for the DAC / sound

  if (htim->Instance == TIM7)
 8000d24:	6822      	ldr	r2, [r4, #0]
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d103      	bne.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>
  {

  }

/* USER CODE END Callback 1 */
}
 8000d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  Sound_InterruptHandler();
 8000d30:	f005 b8f6 	b.w	8005f20 <Sound_InterruptHandler>
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	bf00      	nop
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	40001400 	.word	0x40001400

08000d40 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000d40:	e7fe      	b.n	8000d40 <_Error_Handler>

08000d42 <assert_failed>:
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
 8000d42:	4770      	bx	lr

08000d44 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d44:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8000d46:	480f      	ldr	r0, [pc, #60]	; (8000d84 <MX_SPI3_Init+0x40>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_SPI3_Init+0x44>)
 8000d4a:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d52:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d56:	2300      	movs	r3, #0
 8000d58:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d5a:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5e:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d60:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	6203      	str	r3, [r0, #32]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d64:	2218      	movs	r2, #24
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d66:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d68:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d6a:	230a      	movs	r3, #10
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d6c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.CRCPolynomial = 10;
 8000d6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d70:	f003 fd62 	bl	8004838 <HAL_SPI_Init>
 8000d74:	b128      	cbz	r0, 8000d82 <MX_SPI3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d76:	2145      	movs	r1, #69	; 0x45
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_SPI3_Init+0x48>)
  }

}
 8000d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000d7e:	f7ff bfdf 	b.w	8000d40 <_Error_Handler>
 8000d82:	bd08      	pop	{r3, pc}
 8000d84:	20000c44 	.word	0x20000c44
 8000d88:	40003c00 	.word	0x40003c00
 8000d8c:	080072b8 	.word	0x080072b8

08000d90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8000d92:	6802      	ldr	r2, [r0, #0]
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_SPI_MspInit+0x5c>)
 8000d96:	429a      	cmp	r2, r3
{
 8000d98:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI3)
 8000d9a:	d124      	bne.n	8000de6 <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8000da2:	9400      	str	r4, [sp, #0]
 8000da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	4812      	ldr	r0, [pc, #72]	; (8000df0 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc2:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dcc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f001 fd2f 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	a901      	add	r1, sp, #4
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f001 fd25 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000de6:	b007      	add	sp, #28
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020400 	.word	0x40020400

08000df8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000df8:	b508      	push	{r3, lr}

  if(spiHandle->Instance==SPI3)
 8000dfa:	6802      	ldr	r2, [r0, #0]
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_SPI_MspDeInit+0x2c>)
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d10f      	bne.n	8000e22 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_SPI_MspDeInit+0x30>)
    /**SPI3 GPIO Configuration    
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_SPI_MspDeInit+0x34>)
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000e06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 8000e0e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000e12:	f001 fe65 	bl	8002ae0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_SPI_MspDeInit+0x38>)

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
} 
 8000e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8000e1e:	f001 be5f 	b.w	8002ae0 <HAL_GPIO_DeInit>
 8000e22:	bd08      	pop	{r3, pc}
 8000e24:	40003c00 	.word	0x40003c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f001 f8e4 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4611      	mov	r1, r2
 8000e40:	f06f 000b 	mvn.w	r0, #11
 8000e44:	f001 f8fc 	bl	8002040 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	f06f 000a 	mvn.w	r0, #10
 8000e50:	f001 f8f6 	bl	8002040 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	4611      	mov	r1, r2
 8000e58:	f06f 0009 	mvn.w	r0, #9
 8000e5c:	f001 f8f0 	bl	8002040 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	4611      	mov	r1, r2
 8000e64:	f06f 0004 	mvn.w	r0, #4
 8000e68:	f001 f8ea 	bl	8002040 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4611      	mov	r1, r2
 8000e70:	f06f 0003 	mvn.w	r0, #3
 8000e74:	f001 f8e4 	bl	8002040 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	f06f 0001 	mvn.w	r0, #1
 8000e80:	f001 f8de 	bl	8002040 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	4611      	mov	r1, r2
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e90:	f001 b8d6 	b.w	8002040 <HAL_NVIC_SetPriority>

08000e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000e96:	4601      	mov	r1, r0
{
 8000e98:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2019      	movs	r0, #25
 8000e9e:	f001 f8cf 	bl	8002040 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000ea2:	2019      	movs	r0, #25
 8000ea4:	f001 f90e 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_InitTick+0x6c>)
 8000eac:	9502      	str	r5, [sp, #8]
 8000eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eb0:	4c14      	ldr	r4, [pc, #80]	; (8000f04 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	645a      	str	r2, [r3, #68]	; 0x44
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec0:	a901      	add	r1, sp, #4
 8000ec2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec6:	f003 f9eb 	bl	80042a0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eca:	f003 f9d1 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_InitTick+0x74>)
 8000ed0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ed2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000ed6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ed8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_InitTick+0x78>)
 8000edc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ee0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ee2:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ee4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8000ee6:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000eea:	f004 f8b7 	bl	800505c <HAL_TIM_Base_Init>
 8000eee:	b920      	cbnz	r0, 8000efa <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f003 ff03 	bl	8004cfc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000ef6:	b009      	add	sp, #36	; 0x24
 8000ef8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8000efa:	2001      	movs	r0, #1
 8000efc:	e7fb      	b.n	8000ef6 <HAL_InitTick+0x62>
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	20000c9c 	.word	0x20000c9c
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	000f4240 	.word	0x000f4240

08000f10 <SVC_Handler>:
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8000f14:	f001 b91b 	b.w	800214e <HAL_SYSTICK_IRQHandler>

08000f18 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f18:	4801      	ldr	r0, [pc, #4]	; (8000f20 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000f1a:	f003 bf99 	b.w	8004e50 <HAL_TIM_IRQHandler>
 8000f1e:	bf00      	nop
 8000f20:	20000c9c 	.word	0x20000c9c

08000f24 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f24:	4801      	ldr	r0, [pc, #4]	; (8000f2c <USART1_IRQHandler+0x8>)
 8000f26:	f004 bd6b 	b.w	8005a00 <HAL_UART_IRQHandler>
 8000f2a:	bf00      	nop
 8000f2c:	20000dec 	.word	0x20000dec

08000f30 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f34:	f001 bedc 	b.w	8002cf0 <HAL_GPIO_EXTI_IRQHandler>

08000f38 <FMC_IRQHandler>:
void FMC_IRQHandler(void)
{
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8000f38:	4801      	ldr	r0, [pc, #4]	; (8000f40 <FMC_IRQHandler+0x8>)
 8000f3a:	f003 bbee 	b.w	800471a <HAL_SDRAM_IRQHandler>
 8000f3e:	bf00      	nop
 8000f40:	20000b14 	.word	0x20000b14

08000f44 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8000f44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <TIM6_DAC_IRQHandler+0x14>)
 8000f48:	f001 f95f 	bl	800220a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8000f52:	f003 bf7d 	b.w	8004e50 <HAL_TIM_IRQHandler>
 8000f56:	bf00      	nop
 8000f58:	20000b00 	.word	0x20000b00
 8000f5c:	20000cd8 	.word	0x20000cd8

08000f60 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f60:	4801      	ldr	r0, [pc, #4]	; (8000f68 <TIM7_IRQHandler+0x8>)
 8000f62:	f003 bf75 	b.w	8004e50 <HAL_TIM_IRQHandler>
 8000f66:	bf00      	nop
 8000f68:	20000d50 	.word	0x20000d50

08000f6c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f6c:	4801      	ldr	r0, [pc, #4]	; (8000f74 <DMA2_Stream0_IRQHandler+0x8>)
 8000f6e:	f001 bba1 	b.w	80026b4 <HAL_DMA_IRQHandler>
 8000f72:	bf00      	nop
 8000f74:	20000aa0 	.word	0x20000aa0

08000f78 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f78:	4801      	ldr	r0, [pc, #4]	; (8000f80 <DMA2_Stream2_IRQHandler+0x8>)
 8000f7a:	f001 bb9b 	b.w	80026b4 <HAL_DMA_IRQHandler>
 8000f7e:	bf00      	nop
 8000f80:	20000d8c 	.word	0x20000d8c

08000f84 <LTDC_ER_IRQHandler>:
void LTDC_ER_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000f84:	4801      	ldr	r0, [pc, #4]	; (8000f8c <LTDC_ER_IRQHandler+0x8>)
 8000f86:	f002 bc7c 	b.w	8003882 <HAL_LTDC_IRQHandler>
 8000f8a:	bf00      	nop
 8000f8c:	20000b9c 	.word	0x20000b9c

08000f90 <LTDC_IRQHandler>:
 8000f90:	f7ff bff8 	b.w	8000f84 <LTDC_ER_IRQHandler>

08000f94 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f94:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 83;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_TIM6_Init+0x40>)
  htim6.Instance = TIM6;
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <MX_TIM6_Init+0x44>)
  htim6.Init.Prescaler = 83;
 8000f9a:	f04f 0c53 	mov.w	ip, #83	; 0x53
 8000f9e:	e880 1008 	stmia.w	r0, {r3, ip}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	2400      	movs	r4, #0
  htim6.Init.Period = 100000;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_TIM6_Init+0x48>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 100000;
 8000fa8:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000faa:	f004 f857 	bl	800505c <HAL_TIM_Base_Init>
 8000fae:	b118      	cbz	r0, 8000fb8 <MX_TIM6_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000fb0:	213e      	movs	r1, #62	; 0x3e
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_TIM6_Init+0x4c>)
 8000fb4:	f7ff fec4 	bl	8000d40 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fb8:	4669      	mov	r1, sp
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fc0:	f004 faa0 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	b118      	cbz	r0, 8000fce <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000fc6:	2145      	movs	r1, #69	; 0x45
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_TIM6_Init+0x4c>)
 8000fca:	f7ff feb9 	bl	8000d40 <_Error_Handler>
  }
}
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40001000 	.word	0x40001000
 8000fd8:	20000cd8 	.word	0x20000cd8
 8000fdc:	000186a0 	.word	0x000186a0
 8000fe0:	080072cb 	.word	0x080072cb

08000fe4 <MX_TIM7_Init>:

/* TIM7 init function */
///////////////////////////////////
//tim7 - 84mhz clock. 84 000 000
void MX_TIM7_Init(void)
{
 8000fe4:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 32;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_TIM7_Init+0x40>)
  htim7.Instance = TIM7;
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <MX_TIM7_Init+0x44>)
  htim7.Init.Prescaler = 32;
 8000fea:	f04f 0c20 	mov.w	ip, #32
 8000fee:	e880 1008 	stmia.w	r0, {r3, ip}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	2400      	movs	r4, #0
  htim7.Init.Period = 120;
 8000ff4:	2378      	movs	r3, #120	; 0x78
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 120;
 8000ff8:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ffa:	f004 f82f 	bl	800505c <HAL_TIM_Base_Init>
 8000ffe:	b118      	cbz	r0, 8001008 <MX_TIM7_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001000:	2156      	movs	r1, #86	; 0x56
 8001002:	480a      	ldr	r0, [pc, #40]	; (800102c <MX_TIM7_Init+0x48>)
 8001004:	f7ff fe9c 	bl	8000d40 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001008:	4669      	mov	r1, sp
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM7_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001010:	f004 fa78 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	b118      	cbz	r0, 800101e <MX_TIM7_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001016:	215d      	movs	r1, #93	; 0x5d
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_TIM7_Init+0x48>)
 800101a:	f7ff fe91 	bl	8000d40 <_Error_Handler>
  }

}
 800101e:	b002      	add	sp, #8
 8001020:	bd10      	pop	{r4, pc}
 8001022:	bf00      	nop
 8001024:	40001400 	.word	0x40001400
 8001028:	20000d50 	.word	0x20000d50
 800102c:	080072cb 	.word	0x080072cb

08001030 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim9);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001030:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_TIM_Base_MspInit+0x60>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d115      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800103a:	2200      	movs	r2, #0
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_TIM_Base_MspInit+0x64>)
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001042:	f041 0110 	orr.w	r1, r1, #16
 8001046:	6419      	str	r1, [r3, #64]	; 0x40
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	9300      	str	r3, [sp, #0]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001050:	2036      	movs	r0, #54	; 0x36
 8001052:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001054:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001056:	f000 fff3 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800105a:	2036      	movs	r0, #54	; 0x36
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800105c:	f001 f832 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001060:	b003      	add	sp, #12
 8001062:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM7)
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d1f9      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800106c:	2200      	movs	r2, #0
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0x64>)
 8001070:	9201      	str	r2, [sp, #4]
 8001072:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001074:	f041 0120 	orr.w	r1, r1, #32
 8001078:	6419      	str	r1, [r3, #64]	; 0x40
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001082:	2037      	movs	r0, #55	; 0x37
 8001084:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001086:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001088:	f000 ffda 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800108c:	2037      	movs	r0, #55	; 0x37
 800108e:	e7e5      	b.n	800105c <HAL_TIM_Base_MspInit+0x2c>
 8001090:	40001000 	.word	0x40001000
 8001094:	40023800 	.word	0x40023800
 8001098:	40001400 	.word	0x40001400

0800109c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM9)
 800109c:	6802      	ldr	r2, [r0, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_TIM_PWM_MspInit+0x28>)
 80010a0:	429a      	cmp	r2, r3
{
 80010a2:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM9)
 80010a4:	d10b      	bne.n	80010be <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_TIM_PWM_MspInit+0x2c>)
 80010ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80010be:	b002      	add	sp, #8
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40014000 	.word	0x40014000
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM9)
 80010ce:	6802      	ldr	r2, [r0, #0]
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_TIM_MspPostInit+0x2c>)
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d10c      	bne.n	80010f0 <HAL_TIM_MspPostInit+0x24>
  
    /**TIM9 GPIO Configuration    
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010d6:	2360      	movs	r3, #96	; 0x60
 80010d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80010e6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80010ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f001 fba0 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80010f0:	b007      	add	sp, #28
 80010f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f6:	bf00      	nop
 80010f8:	40014000 	.word	0x40014000
 80010fc:	40021000 	.word	0x40021000

08001100 <MX_TIM9_Init>:
{
 8001100:	b500      	push	{lr}
  htim9.Instance = TIM9;
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <MX_TIM9_Init+0x68>)
  htim9.Init.Prescaler = 83;
 8001104:	4919      	ldr	r1, [pc, #100]	; (800116c <MX_TIM9_Init+0x6c>)
 8001106:	2353      	movs	r3, #83	; 0x53
{
 8001108:	b089      	sub	sp, #36	; 0x24
  htim9.Init.Prescaler = 83;
 800110a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim9.Init.Period = 4999;
 800110e:	f241 3287 	movw	r2, #4999	; 0x1387
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	2300      	movs	r3, #0
 8001114:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 4999;
 8001116:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800111a:	f004 f813 	bl	8005144 <HAL_TIM_PWM_Init>
 800111e:	b118      	cbz	r0, 8001128 <MX_TIM9_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8001120:	216d      	movs	r1, #109	; 0x6d
 8001122:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_TIM9_Init+0x70>)
 8001124:	f7ff fe0c 	bl	8000d40 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001128:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	a901      	add	r1, sp, #4
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <MX_TIM9_Init+0x68>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001132:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001138:	f004 f8bc 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 800113c:	b118      	cbz	r0, 8001146 <MX_TIM9_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 800113e:	2176      	movs	r1, #118	; 0x76
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <MX_TIM9_Init+0x70>)
 8001142:	f7ff fdfd 	bl	8000d40 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001146:	2204      	movs	r2, #4
 8001148:	eb0d 0102 	add.w	r1, sp, r2
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_TIM9_Init+0x68>)
 800114e:	f004 f8b1 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8001152:	b118      	cbz	r0, 800115c <MX_TIM9_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 8001154:	217b      	movs	r1, #123	; 0x7b
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_TIM9_Init+0x70>)
 8001158:	f7ff fdf2 	bl	8000d40 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <MX_TIM9_Init+0x68>)
 800115e:	f7ff ffb5 	bl	80010cc <HAL_TIM_MspPostInit>
}
 8001162:	b009      	add	sp, #36	; 0x24
 8001164:	f85d fb04 	ldr.w	pc, [sp], #4
 8001168:	20000d14 	.word	0x20000d14
 800116c:	40014000 	.word	0x40014000
 8001170:	080072cb 	.word	0x080072cb

08001174 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001174:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x38>)
 800117a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800117e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001182:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001184:	2300      	movs	r3, #0
 8001186:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001188:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800118c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001192:	f004 fb6d 	bl	8005870 <HAL_UART_Init>
 8001196:	b128      	cbz	r0, 80011a4 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001198:	2144      	movs	r1, #68	; 0x44
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART1_UART_Init+0x3c>)
  }

}
 800119c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80011a0:	f7ff bdce 	b.w	8000d40 <_Error_Handler>
 80011a4:	bd08      	pop	{r3, pc}
 80011a6:	bf00      	nop
 80011a8:	20000dec 	.word	0x20000dec
 80011ac:	40011000 	.word	0x40011000
 80011b0:	080072de 	.word	0x080072de

080011b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80011b6:	6802      	ldr	r2, [r0, #0]
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <HAL_UART_MspInit+0x94>)
 80011ba:	429a      	cmp	r2, r3
{
 80011bc:	b086      	sub	sp, #24
 80011be:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART1)
 80011c0:	d13f      	bne.n	8001242 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c2:	2500      	movs	r5, #0
 80011c4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80011c8:	9500      	str	r5, [sp, #0]
 80011ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	481f      	ldr	r0, [pc, #124]	; (800124c <HAL_UART_MspInit+0x98>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80011ce:	4c20      	ldr	r4, [pc, #128]	; (8001250 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d0:	f042 0210 	orr.w	r2, r2, #16
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f4:	2307      	movs	r3, #7
 80011f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f001 fb1a 	bl	8002830 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011fc:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_UART_MspInit+0xa0>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fe:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001200:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001204:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120c:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800120e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001216:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001218:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800121a:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800121c:	6225      	str	r5, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001220:	f001 f8b8 	bl	8002394 <HAL_DMA_Init>
 8001224:	b118      	cbz	r0, 800122e <HAL_UART_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001226:	216e      	movs	r1, #110	; 0x6e
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_UART_MspInit+0xa4>)
 800122a:	f7ff fd89 	bl	8000d40 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001230:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001232:	2025      	movs	r0, #37	; 0x25
 8001234:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001236:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001238:	f000 ff02 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800123c:	2025      	movs	r0, #37	; 0x25
 800123e:	f000 ff41 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001242:	b006      	add	sp, #24
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000
 800124c:	40020000 	.word	0x40020000
 8001250:	20000d8c 	.word	0x20000d8c
 8001254:	40026440 	.word	0x40026440
 8001258:	080072de 	.word	0x080072de

0800125c <SlidePot_init>:
static uint16_t adcPosition = 0x00;

void SlidePot_init(void)
{
	adcRawData = 0x00;
	adcPosition = 0x00;
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <SlidePot_init+0x14>)
	adcRawData = 0x00;
 800125e:	4905      	ldr	r1, [pc, #20]	; (8001274 <SlidePot_init+0x18>)

	//start the dma transfer - continuous
	HAL_ADC_Start_DMA(&hadc1, &adcRawData, 1);
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <SlidePot_init+0x1c>)
	adcRawData = 0x00;
 8001262:	2300      	movs	r3, #0
	adcPosition = 0x00;
 8001264:	8013      	strh	r3, [r2, #0]
	HAL_ADC_Start_DMA(&hadc1, &adcRawData, 1);
 8001266:	2201      	movs	r2, #1
	adcRawData = 0x00;
 8001268:	600b      	str	r3, [r1, #0]
	HAL_ADC_Start_DMA(&hadc1, &adcRawData, 1);
 800126a:	f000 bd3f 	b.w	8001cec <HAL_ADC_Start_DMA>
 800126e:	bf00      	nop
 8001270:	20000498 	.word	0x20000498
 8001274:	2000049c 	.word	0x2000049c
 8001278:	20000a58 	.word	0x20000a58

0800127c <SlidePot_ReadPosition>:
}

uint16_t SlidePot_ReadPosition(void)
{
	return (uint16_t)adcPosition;
}
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <SlidePot_ReadPosition+0x8>)
 800127e:	8818      	ldrh	r0, [r3, #0]
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000498 	.word	0x20000498

08001288 <HAL_ADC_ConvCpltCallback>:
//Compute the position and reset the dma
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	uint32_t temp;

	if (hadc == &hadc1)
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_ADC_ConvCpltCallback+0x34>)
 800128a:	4283      	cmp	r3, r0
 800128c:	d111      	bne.n	80012b2 <HAL_ADC_ConvCpltCallback+0x2a>
	{
		temp = ((1000 * adcRawData) / 4095) * 240;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001296:	434b      	muls	r3, r1
 8001298:	f640 72ff 	movw	r2, #4095	; 0xfff
 800129c:	fbb3 f2f2 	udiv	r2, r3, r2
 80012a0:	23f0      	movs	r3, #240	; 0xf0
 80012a2:	4353      	muls	r3, r2

		//set x in a valid range
		if (temp > 240)
		temp = 240;

		adcPosition = temp;
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x3c>)
		temp = temp / 1000;
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
		adcPosition = temp;
 80012aa:	2bf0      	cmp	r3, #240	; 0xf0
 80012ac:	bf28      	it	cs
 80012ae:	23f0      	movcs	r3, #240	; 0xf0
 80012b0:	8013      	strh	r3, [r2, #0]

	}

	HAL_ADC_Start_DMA(&hadc1, &adcRawData, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	4902      	ldr	r1, [pc, #8]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x38>)
 80012b6:	4801      	ldr	r0, [pc, #4]	; (80012bc <HAL_ADC_ConvCpltCallback+0x34>)
 80012b8:	f000 bd18 	b.w	8001cec <HAL_ADC_Start_DMA>
 80012bc:	20000a58 	.word	0x20000a58
 80012c0:	2000049c 	.word	0x2000049c
 80012c4:	20000498 	.word	0x20000498

080012c8 <LCD_SetTextLineColor>:
};


void LCD_SetTextLineColor(uint16_t color)
{
	m_lcdTextLineColor = color;
 80012c8:	4b01      	ldr	r3, [pc, #4]	; (80012d0 <LCD_SetTextLineColor+0x8>)
 80012ca:	8018      	strh	r0, [r3, #0]
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000400 	.word	0x20000400

080012d4 <LCD_SetTextBackColor>:
}

void LCD_SetTextBackColor(uint16_t color)
{
	m_lcdTextBackColor = color;
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <LCD_SetTextBackColor+0x8>)
 80012d6:	8018      	strh	r0, [r3, #0]
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200004a0 	.word	0x200004a0

080012e0 <LCD_GetRGB332PalletValue>:
{
	uint8_t red = (uint8_t)((color >> 13) & 0x07);
	uint8_t green = (uint8_t)((color >> 8) & 0x07);
	uint8_t blue = (uint8_t)((color >> 3) & 0x03);

	uint8_t finalColor = (red << 5) | ( green << 2) | (blue);
 80012e0:	0b42      	lsrs	r2, r0, #13
	uint8_t blue = (uint8_t)((color >> 3) & 0x03);
 80012e2:	f3c0 03c1 	ubfx	r3, r0, #3, #2
	uint8_t finalColor = (red << 5) | ( green << 2) | (blue);
 80012e6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80012ea:	f3c0 2002 	ubfx	r0, r0, #8, #3
	return finalColor;
}
 80012ee:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 80012f2:	4770      	bx	lr

080012f4 <LCD_RGB_332_565>:
	//red >> 16 + 3 and back 11
	//green >> 8 + 2 and back 5
	//blue >> 3 and back 0


	uint32_t temp = colorPalletRGB332[color];
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <LCD_RGB_332_565+0x1c>)
 80012f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

//	uint32_t red = ((temp >> 19) & 0x1F) << 11;
//	uint32_t green =  ((temp >> 10) & 0x3F) << 5;
//	uint32_t blue = ((temp >> 3) & 0x1F);

	uint32_t blue = ((temp >> 19) & 0x1F) << 11;
 80012fa:	0a18      	lsrs	r0, r3, #8
	uint32_t green =  ((temp >> 10) & 0x3F) << 5;
 80012fc:	095a      	lsrs	r2, r3, #5
 80012fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
	uint32_t blue = ((temp >> 19) & 0x1F) << 11;
 8001302:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
	uint32_t red = ((temp >> 3) & 0x1F);

	uint32_t output = red | green | blue;
 8001306:	4310      	orrs	r0, r2
	uint32_t red = ((temp >> 3) & 0x1F);
 8001308:	f3c3 03c4 	ubfx	r3, r3, #3, #5
	return (uint16_t)output;

}
 800130c:	4318      	orrs	r0, r3
 800130e:	4770      	bx	lr
 8001310:	20000000 	.word	0x20000000

08001314 <LCD_Clear>:
//We could probably cut the number of writes
//in half if the layer used the top and bottom bytes
//
//
void LCD_Clear(uint32_t layer, uint16_t color)
{
 8001314:	b510      	push	{r4, lr}
 8001316:	4604      	mov	r4, r0
	//get the 8 bit color value from the 16 bit value
	uint8_t color8 = LCD_GetRGB332PalletValue(color);
 8001318:	4608      	mov	r0, r1
 800131a:	f7ff ffe1 	bl	80012e0 <LCD_GetRGB332PalletValue>
	uint32_t index = 0;

	uint32_t numPixels = LCD_WIDTH * LCD_HEIGHT;
	uint32_t pageOffset = layer * SDRAM_LCD_LAYER_SIZE;
 800131e:	0463      	lsls	r3, r4, #17
 8001320:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8001324:	f503 3200 	add.w	r2, r3, #131072	; 0x20000
 8001328:	f503 334b 	add.w	r3, r3, #207872	; 0x32c00

	for (index = 0 ; index < numPixels ; index++)
	{
		//deref value of address = color
		*(__IO uint32_t*) (SDRAM_BASE_ADDR + SDRAM_LCD_LAYER_OFFSET + pageOffset + index) = color8;
 800132c:	f842 0b01 	str.w	r0, [r2], #1
	for (index = 0 ; index < numPixels ; index++)
 8001330:	429a      	cmp	r2, r3
 8001332:	d1fb      	bne.n	800132c <LCD_Clear+0x18>
	}
}
 8001334:	bd10      	pop	{r4, pc}

08001336 <LCD_PutPixel>:
//dead/unknown data.
//
void LCD_PutPixel(uint32_t layer, uint32_t x, uint32_t y, uint16_t color)
{
    //do simple test for x and y in range
    if ((x < 0) || (x > LCD_WIDTH-1))
 8001336:	29ef      	cmp	r1, #239	; 0xef
{
 8001338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800133a:	4604      	mov	r4, r0
 800133c:	4615      	mov	r5, r2
    if ((x < 0) || (x > LCD_WIDTH-1))
 800133e:	d815      	bhi.n	800136c <LCD_PutPixel+0x36>
        return;

    if ((y < 0) || (y > LCD_HEIGHT - 1))
 8001340:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 8001344:	d212      	bcs.n	800136c <LCD_PutPixel+0x36>
        return;

    uint32_t color8 = LCD_GetRGB332PalletValue(color) & 0xFF;
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffca 	bl	80012e0 <LCD_GetRGB332PalletValue>
    uint32_t rowOffset = y * LCD_WIDTH;
    uint32_t colOffset = x;
    uint32_t cell = rowOffset + colOffset;

    //read one up for or-ing to the current at the msb
    volatile uint32_t oneUp = *(__IO uint32_t*) (SDRAM_BASE_ADDR + SDRAM_LCD_LAYER_OFFSET +
 800134c:	f504 44d0 	add.w	r4, r4, #26624	; 0x6800
    uint32_t rowOffset = y * LCD_WIDTH;
 8001350:	23f0      	movs	r3, #240	; 0xf0
 8001352:	fb03 f205 	mul.w	r2, r3, r5
    volatile uint32_t oneUp = *(__IO uint32_t*) (SDRAM_BASE_ADDR + SDRAM_LCD_LAYER_OFFSET +
 8001356:	3401      	adds	r4, #1
						(layer * SDRAM_LCD_LAYER_SIZE) + cell + 1);
 8001358:	eb02 4244 	add.w	r2, r2, r4, lsl #17
 800135c:	1853      	adds	r3, r2, r1
    volatile uint32_t oneUp = *(__IO uint32_t*) (SDRAM_BASE_ADDR + SDRAM_LCD_LAYER_OFFSET +
 800135e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001362:	9301      	str	r3, [sp, #4]

    //add color into the lsb
	*(__IO uint32_t*) (SDRAM_BASE_ADDR + SDRAM_LCD_LAYER_OFFSET +
						(layer * SDRAM_LCD_LAYER_SIZE) + cell) = color8 | (oneUp << 8);
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800136a:	5050      	str	r0, [r2, r1]
}
 800136c:	b003      	add	sp, #12
 800136e:	bd30      	pop	{r4, r5, pc}

08001370 <LCD_DrawChar>:
	uint16_t charWidth = 16;
	uint16_t charHeight = 24;

	//starting point for a single char
	uint16_t xOffset = col * charWidth;
	uint16_t yOffset = row * charHeight;
 8001370:	eb01 0141 	add.w	r1, r1, r1, lsl #1
{
 8001374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001378:	00cc      	lsls	r4, r1, #3

	//write the char in terms of x,y space calling put pixel
	//first char in the lookup table is ascii 32
	 uint16_t line = (uint16_t)letter - (uint16_t)32;
 800137a:	3b20      	subs	r3, #32
	uint16_t xOffset = col * charWidth;
 800137c:	0117      	lsls	r7, r2, #4

	//there are 24 elements per char height
	for (uint16_t i = 0 ; i < 24 ;  i++)
	{
		//get element and test for flip top/bottom
		uint32_t temp = Ascii_16_24_Table[(line*24)+i];
 800137e:	b29b      	uxth	r3, r3
 8001380:	4262      	negs	r2, r4
 8001382:	2118      	movs	r1, #24
 8001384:	fb01 2303 	mla	r3, r1, r3, r2
 8001388:	4a10      	ldr	r2, [pc, #64]	; (80013cc <LCD_DrawChar+0x5c>)
{
 800138a:	4606      	mov	r6, r0
 800138c:	f104 0818 	add.w	r8, r4, #24
 8001390:	eb02 0943 	add.w	r9, r2, r3, lsl #1
		uint32_t temp = Ascii_16_24_Table[(line*24)+i];
 8001394:	f839 a014 	ldrh.w	sl, [r9, r4, lsl #1]
 8001398:	2500      	movs	r5, #0
		{
			//font table is reading flipped left to right
//			bit = (((uint16_t)1u << (p-1) ) & temp) >> (p-1);

			//scan right to left
			bit = (((uint16_t)1u << (16-p) ) & temp) >> (16-p);
 800139a:	f04f 0b01 	mov.w	fp, #1
 800139e:	fa0b f305 	lsl.w	r3, fp, r5
 80013a2:	ea03 030a 	and.w	r3, r3, sl
 80013a6:	40eb      	lsrs	r3, r5

			//if the bit = 0 - it's blank - back color
			//if the bit = 1 - it's a color - line color
			if (bit == 1)
 80013a8:	2b01      	cmp	r3, #1
			{
				//draws flipped left to right
				LCD_PutPixel(layer, xOffset + 16 - p, yOffset + i, m_lcdTextLineColor);
 80013aa:	bf0c      	ite	eq
 80013ac:	4b08      	ldreq	r3, [pc, #32]	; (80013d0 <LCD_DrawChar+0x60>)
			}
			else
			{
				LCD_PutPixel(layer, xOffset + 16 - p, yOffset + i, m_lcdTextBackColor);
 80013ae:	4b09      	ldrne	r3, [pc, #36]	; (80013d4 <LCD_DrawChar+0x64>)
 80013b0:	1979      	adds	r1, r7, r5
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4622      	mov	r2, r4
 80013b6:	4630      	mov	r0, r6
 80013b8:	3501      	adds	r5, #1
 80013ba:	f7ff ffbc 	bl	8001336 <LCD_PutPixel>
		while (p > 0)
 80013be:	2d10      	cmp	r5, #16
 80013c0:	d1ed      	bne.n	800139e <LCD_DrawChar+0x2e>
 80013c2:	3401      	adds	r4, #1
	for (uint16_t i = 0 ; i < 24 ;  i++)
 80013c4:	4544      	cmp	r4, r8
 80013c6:	d1e5      	bne.n	8001394 <LCD_DrawChar+0x24>
			}

			p--;
		}
	}
}
 80013c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013cc:	080085f0 	.word	0x080085f0
 80013d0:	20000400 	.word	0x20000400
 80013d4:	200004a0 	.word	0x200004a0

080013d8 <LCD_DrawString>:

//LCD_DrawString - Displays a string on the LCD at a
//given layer and row.  Does not support kerning
void LCD_DrawString(uint8_t layer, uint8_t row, char* output)
{
 80013d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013dc:	4607      	mov	r7, r0
	//get the length limited by max cols
	uint8_t length = strlen(output);
 80013de:	4610      	mov	r0, r2
{
 80013e0:	4615      	mov	r5, r2
 80013e2:	4688      	mov	r8, r1
	uint8_t length = strlen(output);
 80013e4:	f7fe ff04 	bl	80001f0 <strlen>
 80013e8:	b2c4      	uxtb	r4, r0
 80013ea:	2c0e      	cmp	r4, #14
 80013ec:	bf28      	it	cs
 80013ee:	240e      	movcs	r4, #14
	if (length > MAX_COLS)
		length = MAX_COLS;

	for (uint8_t i = 0 ; i < length ; i++)
 80013f0:	462e      	mov	r6, r5
 80013f2:	1b72      	subs	r2, r6, r5
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4294      	cmp	r4, r2
 80013f8:	d801      	bhi.n	80013fe <LCD_DrawString+0x26>
		LCD_DrawChar(layer, row, i, output[i]);
}
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LCD_DrawChar(layer, row, i, output[i]);
 80013fe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001402:	4641      	mov	r1, r8
 8001404:	4638      	mov	r0, r7
 8001406:	f7ff ffb3 	bl	8001370 <LCD_DrawChar>
 800140a:	e7f2      	b.n	80013f2 <LCD_DrawString+0x1a>

0800140c <LCD_DrawStringLength>:

void LCD_DrawStringLength(uint8_t layer, uint8_t row, char output[], uint8_t length)
{
 800140c:	2b0e      	cmp	r3, #14
 800140e:	bf28      	it	cs
 8001410:	230e      	movcs	r3, #14
 8001412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001416:	4607      	mov	r7, r0
 8001418:	4688      	mov	r8, r1
 800141a:	4615      	mov	r5, r2
 800141c:	461e      	mov	r6, r3
	//get the length limited by max cols
	uint8_t size = length;
	if (length > MAX_COLS)
		size = MAX_COLS;

	for (uint8_t i = 0 ; i < size ; i++)
 800141e:	4614      	mov	r4, r2
 8001420:	1b62      	subs	r2, r4, r5
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	4296      	cmp	r6, r2
 8001426:	d801      	bhi.n	800142c <LCD_DrawStringLength+0x20>
		LCD_DrawChar(layer, row, i, output[i]);
}
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LCD_DrawChar(layer, row, i, output[i]);
 800142c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001430:	4641      	mov	r1, r8
 8001432:	4638      	mov	r0, r7
 8001434:	f7ff ff9c 	bl	8001370 <LCD_DrawChar>
 8001438:	e7f2      	b.n	8001420 <LCD_DrawStringLength+0x14>

0800143a <LCD_DrawBitmapTransparent>:

///////////////////////////////////////////////
//Draw bitmap with transparent color
//
void LCD_DrawBitmapTransparent(uint32_t layer, uint32_t x0, uint32_t y0, const ImageData* image, uint16_t transparentColor)
{
 800143a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143e:	4688      	mov	r8, r1
	const uint8_t *data = image->pImageData;
	uint16_t color = 0x00;

	///////////////////////////////////
	//8 bit color
	if (image->bitsPerPixel == 8)
 8001440:	88d9      	ldrh	r1, [r3, #6]
{
 8001442:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
	if (image->bitsPerPixel == 8)
 8001446:	2908      	cmp	r1, #8
{
 8001448:	4681      	mov	r9, r0
	if (image->bitsPerPixel == 8)
 800144a:	d11e      	bne.n	800148a <LCD_DrawBitmapTransparent+0x50>
	uint16_t sizeX = image->xSize;
 800144c:	881f      	ldrh	r7, [r3, #0]
	uint16_t sizeY = image->ySize;
 800144e:	885e      	ldrh	r6, [r3, #2]
	const uint8_t *data = image->pImageData;
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	4614      	mov	r4, r2
	{
		for (uint32_t i = y0 ; i < (sizeY + y0) ; i++)
 8001454:	4416      	add	r6, r2
		{
			for (uint32_t j = x0 ; j < (sizeX + x0) ; j++)
 8001456:	4447      	add	r7, r8
		for (uint32_t i = y0 ; i < (sizeY + y0) ; i++)
 8001458:	42b4      	cmp	r4, r6
 800145a:	d216      	bcs.n	800148a <LCD_DrawBitmapTransparent+0x50>
 800145c:	461d      	mov	r5, r3
 800145e:	eba8 0b03 	sub.w	fp, r8, r3
 8001462:	e00b      	b.n	800147c <LCD_DrawBitmapTransparent+0x42>
			{
				color = LCD_RGB_332_565(*data);
 8001464:	7818      	ldrb	r0, [r3, #0]
 8001466:	f7ff ff45 	bl	80012f4 <LCD_RGB_332_565>

				if (color != transparentColor)
 800146a:	4550      	cmp	r0, sl
 800146c:	f105 0501 	add.w	r5, r5, #1
				color = LCD_RGB_332_565(*data);
 8001470:	4603      	mov	r3, r0
				if (color != transparentColor)
 8001472:	d003      	beq.n	800147c <LCD_DrawBitmapTransparent+0x42>
					LCD_PutPixel(layer, j, i, color);
 8001474:	4622      	mov	r2, r4
 8001476:	4648      	mov	r0, r9
 8001478:	f7ff ff5d 	bl	8001336 <LCD_PutPixel>
 800147c:	eb0b 0105 	add.w	r1, fp, r5
			for (uint32_t j = x0 ; j < (sizeX + x0) ; j++)
 8001480:	428f      	cmp	r7, r1
 8001482:	462b      	mov	r3, r5
 8001484:	d8ee      	bhi.n	8001464 <LCD_DrawBitmapTransparent+0x2a>
		for (uint32_t i = y0 ; i < (sizeY + y0) ; i++)
 8001486:	3401      	adds	r4, #1
 8001488:	e7e6      	b.n	8001458 <LCD_DrawBitmapTransparent+0x1e>
 800148a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001490 <SDRAM_Initialization_sequence>:




void SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001494:	4c23      	ldr	r4, [pc, #140]	; (8001524 <SDRAM_Initialization_sequence+0x94>)
{
 8001496:	b087      	sub	sp, #28
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001498:	2608      	movs	r6, #8
  __IO uint32_t tmpmrd =0;
 800149a:	2700      	movs	r7, #0
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800149c:	2501      	movs	r5, #1
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800149e:	eb0d 0106 	add.w	r1, sp, r6
{
 80014a2:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	4620      	mov	r0, r4
  __IO uint32_t tmpmrd =0;
 80014aa:	9701      	str	r7, [sp, #4]
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80014ac:	9502      	str	r5, [sp, #8]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80014ae:	9603      	str	r6, [sp, #12]
  Command.AutoRefreshNumber       = 1;
 80014b0:	9504      	str	r5, [sp, #16]
  Command.ModeRegisterDefinition  = 0;
 80014b2:	9705      	str	r7, [sp, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014b4:	f003 f93f 	bl	8004736 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(100);
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f000 fac7 	bl	8001a4c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80014be:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014c0:	eb0d 0106 	add.w	r1, sp, r6
 80014c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c8:	4620      	mov	r0, r4
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80014ca:	9302      	str	r3, [sp, #8]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 80014cc:	f04f 0804 	mov.w	r8, #4
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80014d0:	9603      	str	r6, [sp, #12]
  Command.AutoRefreshNumber       = 1;
 80014d2:	9504      	str	r5, [sp, #16]
  Command.ModeRegisterDefinition  = 0;
 80014d4:	9705      	str	r7, [sp, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014d6:	f003 f92e 	bl	8004736 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80014da:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014dc:	eb0d 0106 	add.w	r1, sp, r6
 80014e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e4:	4620      	mov	r0, r4
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80014e6:	9302      	str	r3, [sp, #8]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80014e8:	9603      	str	r6, [sp, #12]
  Command.AutoRefreshNumber       = 4;
 80014ea:	f8cd 8010 	str.w	r8, [sp, #16]
  Command.ModeRegisterDefinition  = 0;
 80014ee:	9705      	str	r7, [sp, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014f0:	f003 f921 	bl	8004736 <HAL_SDRAM_SendCommand>
  
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80014f4:	f240 2331 	movw	r3, #561	; 0x231
 80014f8:	9301      	str	r3, [sp, #4]

  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 80014fa:	9b01      	ldr	r3, [sp, #4]
 80014fc:	9305      	str	r3, [sp, #20]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80014fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001502:	eb0d 0106 	add.w	r1, sp, r6
 8001506:	4620      	mov	r0, r4
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001508:	f8cd 8008 	str.w	r8, [sp, #8]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800150c:	9603      	str	r6, [sp, #12]
  Command.AutoRefreshNumber       = 1;
 800150e:	9504      	str	r5, [sp, #16]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001510:	f003 f911 	bl	8004736 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8001514:	4649      	mov	r1, r9
 8001516:	4620      	mov	r0, r4
 8001518:	f003 f924 	bl	8004764 <HAL_SDRAM_ProgramRefreshRate>
}
 800151c:	b007      	add	sp, #28
 800151e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001522:	bf00      	nop
 8001524:	20000b14 	.word	0x20000b14

08001528 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001528:	b508      	push	{r3, lr}
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800152a:	f000 f9ab 	bl	8001884 <LCD_IO_Init>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 800152e:	20ca      	movs	r0, #202	; 0xca
 8001530:	f000 fa20 	bl	8001974 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8001534:	20c3      	movs	r0, #195	; 0xc3
 8001536:	f000 fa01 	bl	800193c <LCD_IO_WriteData>
 800153a:	2008      	movs	r0, #8
 800153c:	f000 f9fe 	bl	800193c <LCD_IO_WriteData>
 8001540:	2050      	movs	r0, #80	; 0x50
 8001542:	f000 f9fb 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001546:	20cf      	movs	r0, #207	; 0xcf
 8001548:	f000 fa14 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800154c:	2000      	movs	r0, #0
 800154e:	f000 f9f5 	bl	800193c <LCD_IO_WriteData>
 8001552:	20c1      	movs	r0, #193	; 0xc1
 8001554:	f000 f9f2 	bl	800193c <LCD_IO_WriteData>
 8001558:	2030      	movs	r0, #48	; 0x30
 800155a:	f000 f9ef 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800155e:	20ed      	movs	r0, #237	; 0xed
 8001560:	f000 fa08 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001564:	2064      	movs	r0, #100	; 0x64
 8001566:	f000 f9e9 	bl	800193c <LCD_IO_WriteData>
 800156a:	2003      	movs	r0, #3
 800156c:	f000 f9e6 	bl	800193c <LCD_IO_WriteData>
 8001570:	2012      	movs	r0, #18
 8001572:	f000 f9e3 	bl	800193c <LCD_IO_WriteData>
 8001576:	2081      	movs	r0, #129	; 0x81
 8001578:	f000 f9e0 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800157c:	20e8      	movs	r0, #232	; 0xe8
 800157e:	f000 f9f9 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001582:	2085      	movs	r0, #133	; 0x85
 8001584:	f000 f9da 	bl	800193c <LCD_IO_WriteData>
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f9d7 	bl	800193c <LCD_IO_WriteData>
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 f9d4 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001594:	20cb      	movs	r0, #203	; 0xcb
 8001596:	f000 f9ed 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800159a:	2039      	movs	r0, #57	; 0x39
 800159c:	f000 f9ce 	bl	800193c <LCD_IO_WriteData>
 80015a0:	202c      	movs	r0, #44	; 0x2c
 80015a2:	f000 f9cb 	bl	800193c <LCD_IO_WriteData>
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f9c8 	bl	800193c <LCD_IO_WriteData>
 80015ac:	2034      	movs	r0, #52	; 0x34
 80015ae:	f000 f9c5 	bl	800193c <LCD_IO_WriteData>
 80015b2:	2002      	movs	r0, #2
 80015b4:	f000 f9c2 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80015b8:	20f7      	movs	r0, #247	; 0xf7
 80015ba:	f000 f9db 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80015be:	2020      	movs	r0, #32
 80015c0:	f000 f9bc 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80015c4:	20ea      	movs	r0, #234	; 0xea
 80015c6:	f000 f9d5 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f9b6 	bl	800193c <LCD_IO_WriteData>
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 f9b3 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80015d6:	20b1      	movs	r0, #177	; 0xb1
 80015d8:	f000 f9cc 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 f9ad 	bl	800193c <LCD_IO_WriteData>
 80015e2:	201b      	movs	r0, #27
 80015e4:	f000 f9aa 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80015e8:	20b6      	movs	r0, #182	; 0xb6
 80015ea:	f000 f9c3 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 f9a4 	bl	800193c <LCD_IO_WriteData>
 80015f4:	20a2      	movs	r0, #162	; 0xa2
 80015f6:	f000 f9a1 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80015fa:	20c0      	movs	r0, #192	; 0xc0
 80015fc:	f000 f9ba 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001600:	2010      	movs	r0, #16
 8001602:	f000 f99b 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001606:	20c1      	movs	r0, #193	; 0xc1
 8001608:	f000 f9b4 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800160c:	2010      	movs	r0, #16
 800160e:	f000 f995 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001612:	20c5      	movs	r0, #197	; 0xc5
 8001614:	f000 f9ae 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001618:	2045      	movs	r0, #69	; 0x45
 800161a:	f000 f98f 	bl	800193c <LCD_IO_WriteData>
 800161e:	2015      	movs	r0, #21
 8001620:	f000 f98c 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001624:	20c7      	movs	r0, #199	; 0xc7
 8001626:	f000 f9a5 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800162a:	2090      	movs	r0, #144	; 0x90
 800162c:	f000 f986 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001630:	2036      	movs	r0, #54	; 0x36
 8001632:	f000 f99f 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001636:	20c8      	movs	r0, #200	; 0xc8
 8001638:	f000 f980 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800163c:	20f2      	movs	r0, #242	; 0xf2
 800163e:	f000 f999 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f97a 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001648:	20b0      	movs	r0, #176	; 0xb0
 800164a:	f000 f993 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800164e:	20c2      	movs	r0, #194	; 0xc2
 8001650:	f000 f974 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001654:	20b6      	movs	r0, #182	; 0xb6
 8001656:	f000 f98d 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800165a:	200a      	movs	r0, #10
 800165c:	f000 f96e 	bl	800193c <LCD_IO_WriteData>
 8001660:	20a7      	movs	r0, #167	; 0xa7
 8001662:	f000 f96b 	bl	800193c <LCD_IO_WriteData>
 8001666:	2027      	movs	r0, #39	; 0x27
 8001668:	f000 f968 	bl	800193c <LCD_IO_WriteData>
 800166c:	2004      	movs	r0, #4
 800166e:	f000 f965 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001672:	202a      	movs	r0, #42	; 0x2a
 8001674:	f000 f97e 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001678:	2000      	movs	r0, #0
 800167a:	f000 f95f 	bl	800193c <LCD_IO_WriteData>
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f95c 	bl	800193c <LCD_IO_WriteData>
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f959 	bl	800193c <LCD_IO_WriteData>
 800168a:	20ef      	movs	r0, #239	; 0xef
 800168c:	f000 f956 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001690:	202b      	movs	r0, #43	; 0x2b
 8001692:	f000 f96f 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f950 	bl	800193c <LCD_IO_WriteData>
 800169c:	2000      	movs	r0, #0
 800169e:	f000 f94d 	bl	800193c <LCD_IO_WriteData>
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 f94a 	bl	800193c <LCD_IO_WriteData>
 80016a8:	203f      	movs	r0, #63	; 0x3f
 80016aa:	f000 f947 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80016ae:	20f6      	movs	r0, #246	; 0xf6
 80016b0:	f000 f960 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f000 f941 	bl	800193c <LCD_IO_WriteData>
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f93e 	bl	800193c <LCD_IO_WriteData>
 80016c0:	2006      	movs	r0, #6
 80016c2:	f000 f93b 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80016c6:	202c      	movs	r0, #44	; 0x2c
 80016c8:	f000 f954 	bl	8001974 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80016cc:	20c8      	movs	r0, #200	; 0xc8
 80016ce:	f000 f96d 	bl	80019ac <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80016d2:	2026      	movs	r0, #38	; 0x26
 80016d4:	f000 f94e 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80016d8:	2001      	movs	r0, #1
 80016da:	f000 f92f 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80016de:	20e0      	movs	r0, #224	; 0xe0
 80016e0:	f000 f948 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 f929 	bl	800193c <LCD_IO_WriteData>
 80016ea:	2029      	movs	r0, #41	; 0x29
 80016ec:	f000 f926 	bl	800193c <LCD_IO_WriteData>
 80016f0:	2024      	movs	r0, #36	; 0x24
 80016f2:	f000 f923 	bl	800193c <LCD_IO_WriteData>
 80016f6:	200c      	movs	r0, #12
 80016f8:	f000 f920 	bl	800193c <LCD_IO_WriteData>
 80016fc:	200e      	movs	r0, #14
 80016fe:	f000 f91d 	bl	800193c <LCD_IO_WriteData>
 8001702:	2009      	movs	r0, #9
 8001704:	f000 f91a 	bl	800193c <LCD_IO_WriteData>
 8001708:	204e      	movs	r0, #78	; 0x4e
 800170a:	f000 f917 	bl	800193c <LCD_IO_WriteData>
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 f914 	bl	800193c <LCD_IO_WriteData>
 8001714:	203c      	movs	r0, #60	; 0x3c
 8001716:	f000 f911 	bl	800193c <LCD_IO_WriteData>
 800171a:	2009      	movs	r0, #9
 800171c:	f000 f90e 	bl	800193c <LCD_IO_WriteData>
 8001720:	2013      	movs	r0, #19
 8001722:	f000 f90b 	bl	800193c <LCD_IO_WriteData>
 8001726:	2005      	movs	r0, #5
 8001728:	f000 f908 	bl	800193c <LCD_IO_WriteData>
 800172c:	2017      	movs	r0, #23
 800172e:	f000 f905 	bl	800193c <LCD_IO_WriteData>
 8001732:	2011      	movs	r0, #17
 8001734:	f000 f902 	bl	800193c <LCD_IO_WriteData>
 8001738:	2000      	movs	r0, #0
 800173a:	f000 f8ff 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800173e:	20e1      	movs	r0, #225	; 0xe1
 8001740:	f000 f918 	bl	8001974 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f8f9 	bl	800193c <LCD_IO_WriteData>
 800174a:	2016      	movs	r0, #22
 800174c:	f000 f8f6 	bl	800193c <LCD_IO_WriteData>
 8001750:	201b      	movs	r0, #27
 8001752:	f000 f8f3 	bl	800193c <LCD_IO_WriteData>
 8001756:	2004      	movs	r0, #4
 8001758:	f000 f8f0 	bl	800193c <LCD_IO_WriteData>
 800175c:	2011      	movs	r0, #17
 800175e:	f000 f8ed 	bl	800193c <LCD_IO_WriteData>
 8001762:	2007      	movs	r0, #7
 8001764:	f000 f8ea 	bl	800193c <LCD_IO_WriteData>
 8001768:	2031      	movs	r0, #49	; 0x31
 800176a:	f000 f8e7 	bl	800193c <LCD_IO_WriteData>
 800176e:	2033      	movs	r0, #51	; 0x33
 8001770:	f000 f8e4 	bl	800193c <LCD_IO_WriteData>
 8001774:	2042      	movs	r0, #66	; 0x42
 8001776:	f000 f8e1 	bl	800193c <LCD_IO_WriteData>
 800177a:	2005      	movs	r0, #5
 800177c:	f000 f8de 	bl	800193c <LCD_IO_WriteData>
 8001780:	200c      	movs	r0, #12
 8001782:	f000 f8db 	bl	800193c <LCD_IO_WriteData>
 8001786:	200a      	movs	r0, #10
 8001788:	f000 f8d8 	bl	800193c <LCD_IO_WriteData>
 800178c:	2028      	movs	r0, #40	; 0x28
 800178e:	f000 f8d5 	bl	800193c <LCD_IO_WriteData>
 8001792:	202f      	movs	r0, #47	; 0x2f
 8001794:	f000 f8d2 	bl	800193c <LCD_IO_WriteData>
 8001798:	200f      	movs	r0, #15
 800179a:	f000 f8cf 	bl	800193c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800179e:	2011      	movs	r0, #17
 80017a0:	f000 f8e8 	bl	8001974 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80017a4:	20c8      	movs	r0, #200	; 0xc8
 80017a6:	f000 f901 	bl	80019ac <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80017aa:	2029      	movs	r0, #41	; 0x29
 80017ac:	f000 f8e2 	bl	8001974 <LCD_IO_WriteReg>
 80017b0:	202c      	movs	r0, #44	; 0x2c
}
 80017b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80017b6:	f000 b8dd 	b.w	8001974 <LCD_IO_WriteReg>
	...

080017bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80017bc:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80017be:	4c21      	ldr	r4, [pc, #132]	; (8001844 <SPIx_Init+0x88>)
{
 80017c0:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80017c2:	4620      	mov	r0, r4
 80017c4:	f003 f9e0 	bl	8004b88 <HAL_SPI_GetState>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d138      	bne.n	800183e <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <SPIx_Init+0x8c>)
 80017ce:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017d0:	2318      	movs	r3, #24
 80017d2:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80017d4:	2307      	movs	r3, #7
 80017d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80017de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80017e2:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <SPIx_Init+0x90>)
 80017e6:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80017e8:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80017ea:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80017ec:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80017ee:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80017f0:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80017f2:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80017f4:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80017f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
 80017fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001800:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001804:	9201      	str	r2, [sp, #4]
 8001806:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001808:	9002      	str	r0, [sp, #8]
 800180a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800180c:	4810      	ldr	r0, [pc, #64]	; (8001850 <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800180e:	f042 0220 	orr.w	r2, r2, #32
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800181e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001822:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001828:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800182a:	2301      	movs	r3, #1
 800182c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800182e:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001830:	2305      	movs	r3, #5
 8001832:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001834:	f000 fffc 	bl	8002830 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8001838:	4620      	mov	r0, r4
 800183a:	f002 fffd 	bl	8004838 <HAL_SPI_Init>
}
 800183e:	b008      	add	sp, #32
 8001840:	bd10      	pop	{r4, pc}
 8001842:	bf00      	nop
 8001844:	200004a4 	.word	0x200004a4
 8001848:	40015000 	.word	0x40015000
 800184c:	40023800 	.word	0x40023800
 8001850:	40021400 	.word	0x40021400

08001854 <SPIx_Write>:
{
 8001854:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <SPIx_Write+0x28>)
{
 8001858:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800185a:	681b      	ldr	r3, [r3, #0]
{
 800185c:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001860:	2201      	movs	r2, #1
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <SPIx_Write+0x2c>)
 8001864:	f003 f8dc 	bl	8004a20 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8001868:	b120      	cbz	r0, 8001874 <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <SPIx_Write+0x2c>)
 800186c:	f003 f8a0 	bl	80049b0 <HAL_SPI_DeInit>
  SPIx_Init();
 8001870:	f7ff ffa4 	bl	80017bc <SPIx_Init>
}
 8001874:	b003      	add	sp, #12
 8001876:	f85d fb04 	ldr.w	pc, [sp], #4
 800187a:	bf00      	nop
 800187c:	20000404 	.word	0x20000404
 8001880:	200004a4 	.word	0x200004a4

08001884 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <LCD_IO_Init+0xa8>)
 8001888:	781d      	ldrb	r5, [r3, #0]
{
 800188a:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 800188c:	2d00      	cmp	r5, #0
 800188e:	d14a      	bne.n	8001926 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001890:	4c27      	ldr	r4, [pc, #156]	; (8001930 <LCD_IO_Init+0xac>)
 8001892:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8001894:	2601      	movs	r6, #1
 8001896:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 8001898:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800189a:	4826      	ldr	r0, [pc, #152]	; (8001934 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6323      	str	r3, [r4, #48]	; 0x30
 80018a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018a4:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018ac:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 80018ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018b0:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80018b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80018b6:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80018b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018ba:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80018bc:	f000 ffb8 	bl	8002830 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80018c0:	9501      	str	r5, [sp, #4]
 80018c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80018c4:	481b      	ldr	r0, [pc, #108]	; (8001934 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6323      	str	r3, [r4, #48]	; 0x30
 80018cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018ce:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018d8:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80018de:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80018e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018e2:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80018e4:	f000 ffa4 	bl	8002830 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80018e8:	9502      	str	r5, [sp, #8]
 80018ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6323      	str	r3, [r4, #48]	; 0x30
 80018f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018f6:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 80018f8:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80018fc:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80018fe:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001900:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8001902:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001904:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001906:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001908:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800190a:	f000 ff91 	bl	8002830 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800190e:	462a      	mov	r2, r5
 8001910:	4621      	mov	r1, r4
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <LCD_IO_Init+0xb4>)
 8001914:	f001 f9c2 	bl	8002c9c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001918:	4632      	mov	r2, r6
 800191a:	4621      	mov	r1, r4
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <LCD_IO_Init+0xb4>)
 800191e:	f001 f9bd 	bl	8002c9c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001922:	f7ff ff4b 	bl	80017bc <SPIx_Init>
  }
}
 8001926:	b009      	add	sp, #36	; 0x24
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	bf00      	nop
 800192c:	200004a2 	.word	0x200004a2
 8001930:	40023800 	.word	0x40023800
 8001934:	40020c00 	.word	0x40020c00
 8001938:	40020800 	.word	0x40020800

0800193c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800193c:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800193e:	4c0b      	ldr	r4, [pc, #44]	; (800196c <LCD_IO_WriteData+0x30>)
{
 8001940:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <LCD_IO_WriteData+0x34>)
 800194a:	f001 f9a7 	bl	8002c9c <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	4620      	mov	r0, r4
 8001954:	f001 f9a2 	bl	8002c9c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001958:	4628      	mov	r0, r5
 800195a:	f7ff ff7b 	bl	8001854 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800195e:	4620      	mov	r0, r4
 8001960:	2201      	movs	r2, #1
 8001962:	2104      	movs	r1, #4
}
 8001964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001968:	f001 b998 	b.w	8002c9c <HAL_GPIO_WritePin>
 800196c:	40020800 	.word	0x40020800
 8001970:	40020c00 	.word	0x40020c00

08001974 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001974:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001976:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <LCD_IO_WriteReg+0x30>)
{
 8001978:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <LCD_IO_WriteReg+0x34>)
 8001982:	f001 f98b 	bl	8002c9c <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001986:	2200      	movs	r2, #0
 8001988:	2104      	movs	r1, #4
 800198a:	4620      	mov	r0, r4
 800198c:	f001 f986 	bl	8002c9c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001990:	4628      	mov	r0, r5
 8001992:	f7ff ff5f 	bl	8001854 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001996:	4620      	mov	r0, r4
 8001998:	2201      	movs	r2, #1
 800199a:	2104      	movs	r1, #4
}
 800199c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80019a0:	f001 b97c 	b.w	8002c9c <HAL_GPIO_WritePin>
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00

080019ac <LCD_Delay>:
 80019ac:	f000 b84e 	b.w	8001a4c <HAL_Delay>

080019b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	490f      	ldr	r1, [pc, #60]	; (80019f0 <SystemInit+0x40>)
 80019b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <SystemInit+0x44>)
 80019c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019c2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80019ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <SystemInit+0x48>)
 80019da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019ea:	608b      	str	r3, [r1, #8]
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	40023800 	.word	0x40023800
 80019f8:	24003010 	.word	0x24003010

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x30>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a0e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 faf3 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fa38 	bl	8000e94 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fa06 	bl	8000e34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001a28:	2000      	movs	r0, #0
 8001a2a:	bd08      	pop	{r3, pc}
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001a30:	4a02      	ldr	r2, [pc, #8]	; (8001a3c <HAL_IncTick+0xc>)
 8001a32:	6813      	ldr	r3, [r2, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000e2c 	.word	0x20000e2c

08001a40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <HAL_GetTick+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000e2c 	.word	0x20000e2c

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a4e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff fff6 	bl	8001a40 <HAL_GetTick>
  uint32_t wait = Delay;
 8001a54:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001a58:	4605      	mov	r5, r0
  {
     wait++;
 8001a5a:	bf18      	it	ne
 8001a5c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a5e:	f7ff ffef 	bl	8001a40 <HAL_GetTick>
 8001a62:	1b40      	subs	r0, r0, r5
 8001a64:	42a0      	cmp	r0, r4
 8001a66:	d3fa      	bcc.n	8001a5e <HAL_Delay+0x12>
  {
  }
}
 8001a68:	b003      	add	sp, #12
 8001a6a:	bd30      	pop	{r4, r5, pc}

08001a6c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a6e:	4604      	mov	r4, r0
 8001a70:	2800      	cmp	r0, #0
 8001a72:	f000 8131 	beq.w	8001cd8 <HAL_ADC_Init+0x26c>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001a76:	6803      	ldr	r3, [r0, #0]
 8001a78:	4a98      	ldr	r2, [pc, #608]	; (8001cdc <HAL_ADC_Init+0x270>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00c      	beq.n	8001a98 <HAL_ADC_Init+0x2c>
 8001a7e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d008      	beq.n	8001a98 <HAL_ADC_Init+0x2c>
 8001a86:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_Init+0x2c>
 8001a8e:	f240 110d 	movw	r1, #269	; 0x10d
 8001a92:	4893      	ldr	r0, [pc, #588]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001a94:	f7ff f955 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001a98:	6863      	ldr	r3, [r4, #4]
 8001a9a:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001a9e:	d004      	beq.n	8001aaa <HAL_ADC_Init+0x3e>
 8001aa0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001aa4:	488e      	ldr	r0, [pc, #568]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001aa6:	f7ff f94c 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001aaa:	68a3      	ldr	r3, [r4, #8]
 8001aac:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8001ab0:	d004      	beq.n	8001abc <HAL_ADC_Init+0x50>
 8001ab2:	f240 110f 	movw	r1, #271	; 0x10f
 8001ab6:	488a      	ldr	r0, [pc, #552]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001ab8:	f7ff f943 	bl	8000d42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001abc:	6923      	ldr	r3, [r4, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d904      	bls.n	8001acc <HAL_ADC_Init+0x60>
 8001ac2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001ac6:	4886      	ldr	r0, [pc, #536]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001ac8:	f7ff f93b 	bl	8000d42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001acc:	69a3      	ldr	r3, [r4, #24]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d904      	bls.n	8001adc <HAL_ADC_Init+0x70>
 8001ad2:	f240 1111 	movw	r1, #273	; 0x111
 8001ad6:	4882      	ldr	r0, [pc, #520]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001ad8:	f7ff f933 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001adc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ade:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8001ae2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8001ae6:	d014      	beq.n	8001b12 <HAL_ADC_Init+0xa6>
 8001ae8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8001aec:	d011      	beq.n	8001b12 <HAL_ADC_Init+0xa6>
 8001aee:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001af2:	d00e      	beq.n	8001b12 <HAL_ADC_Init+0xa6>
 8001af4:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 8001af8:	d00b      	beq.n	8001b12 <HAL_ADC_Init+0xa6>
 8001afa:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001afe:	d008      	beq.n	8001b12 <HAL_ADC_Init+0xa6>
 8001b00:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d904      	bls.n	8001b12 <HAL_ADC_Init+0xa6>
 8001b08:	f44f 7189 	mov.w	r1, #274	; 0x112
 8001b0c:	4874      	ldr	r0, [pc, #464]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b0e:	f7ff f918 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001b12:	68e3      	ldr	r3, [r4, #12]
 8001b14:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001b18:	d004      	beq.n	8001b24 <HAL_ADC_Init+0xb8>
 8001b1a:	f240 1113 	movw	r1, #275	; 0x113
 8001b1e:	4870      	ldr	r0, [pc, #448]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b20:	f7ff f90f 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001b24:	69e3      	ldr	r3, [r4, #28]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d904      	bls.n	8001b36 <HAL_ADC_Init+0xca>
 8001b2c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001b30:	486b      	ldr	r0, [pc, #428]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b32:	f7ff f906 	bl	8000d42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d904      	bls.n	8001b46 <HAL_ADC_Init+0xda>
 8001b3c:	f240 1115 	movw	r1, #277	; 0x115
 8001b40:	4867      	ldr	r0, [pc, #412]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b42:	f7ff f8fe 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001b46:	6963      	ldr	r3, [r4, #20]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d904      	bls.n	8001b56 <HAL_ADC_Init+0xea>
 8001b4c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001b50:	4863      	ldr	r0, [pc, #396]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b52:	f7ff f8f6 	bl	8000d42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001b56:	6a23      	ldr	r3, [r4, #32]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d904      	bls.n	8001b66 <HAL_ADC_Init+0xfa>
 8001b5c:	f240 1117 	movw	r1, #279	; 0x117
 8001b60:	485f      	ldr	r0, [pc, #380]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b62:	f7ff f8ee 	bl	8000d42 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b68:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_ADC_Init+0x278>)
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d008      	beq.n	8001b80 <HAL_ADC_Init+0x114>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b70:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8001b74:	d004      	beq.n	8001b80 <HAL_ADC_Init+0x114>
 8001b76:	f240 111b 	movw	r1, #283	; 0x11b
 8001b7a:	4859      	ldr	r0, [pc, #356]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001b7c:	f7ff f8e1 	bl	8000d42 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b82:	b92b      	cbnz	r3, 8001b90 <HAL_ADC_Init+0x124>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	6463      	str	r3, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7fe fbe6 	bl	800035c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b92:	06db      	lsls	r3, r3, #27
 8001b94:	f100 809e 	bmi.w	8001cd4 <HAL_ADC_Init+0x268>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b9e:	f023 0302 	bic.w	r3, r3, #2
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_ADC_Init+0x27c>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001bb0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	6861      	ldr	r1, [r4, #4]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bbc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bd2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bd6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bde:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bee:	493d      	ldr	r1, [pc, #244]	; (8001ce4 <HAL_ADC_Init+0x278>)
 8001bf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bf2:	428a      	cmp	r2, r1
 8001bf4:	d061      	beq.n	8001cba <HAL_ADC_Init+0x24e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001bfc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c04:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c14:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001c16:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c18:	f022 0202 	bic.w	r2, r2, #2
 8001c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001c24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c26:	6a22      	ldr	r2, [r4, #32]
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	d04e      	beq.n	8001cca <HAL_ADC_Init+0x25e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	d904      	bls.n	8001c3e <HAL_ADC_Init+0x1d2>
 8001c34:	f240 6129 	movw	r1, #1577	; 0x629
 8001c38:	4829      	ldr	r0, [pc, #164]	; (8001ce0 <HAL_ADC_Init+0x274>)
 8001c3a:	f7ff f882 	bl	8000d42 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	6853      	ldr	r3, [r2, #4]
 8001c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c46:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c48:	6853      	ldr	r3, [r2, #4]
 8001c4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c4e:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c54:	fa93 f3a3 	rbit	r3, r3
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c58:	fab3 f183 	clz	r1, r3
 8001c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c5e:	6850      	ldr	r0, [r2, #4]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	408b      	lsls	r3, r1
 8001c64:	4303      	orrs	r3, r0
 8001c66:	6053      	str	r3, [r2, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c68:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c6a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c76:	3901      	subs	r1, #1
 8001c78:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c7e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001c80:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c90:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c92:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c9a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c9e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001ca2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca4:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca8:	f023 0303 	bic.w	r3, r3, #3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001cb8:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc8:	e7a3      	b.n	8001c12 <HAL_ADC_Init+0x1a6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e7c9      	b.n	8001c68 <HAL_ADC_Init+0x1fc>
    tmp_hal_status = HAL_ERROR;
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	e7ec      	b.n	8001cb2 <HAL_ADC_Init+0x246>
    return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
}
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	40012000 	.word	0x40012000
 8001ce0:	08008278 	.word	0x08008278
 8001ce4:	0f000001 	.word	0x0f000001
 8001ce8:	40012300 	.word	0x40012300

08001cec <HAL_ADC_Start_DMA>:
{
 8001cec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t counter = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001cf2:	6983      	ldr	r3, [r0, #24]
 8001cf4:	2b01      	cmp	r3, #1
{
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	460d      	mov	r5, r1
 8001cfa:	4616      	mov	r6, r2
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001cfc:	d904      	bls.n	8001d08 <HAL_ADC_Start_DMA+0x1c>
 8001cfe:	f240 4107 	movw	r1, #1031	; 0x407
 8001d02:	483b      	ldr	r0, [pc, #236]	; (8001df0 <HAL_ADC_Start_DMA+0x104>)
 8001d04:	f7ff f81d 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8001d08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d0a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8001d0e:	d004      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x2e>
 8001d10:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001d14:	4836      	ldr	r0, [pc, #216]	; (8001df0 <HAL_ADC_Start_DMA+0x104>)
 8001d16:	f7ff f814 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hadc);
 8001d1a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d064      	beq.n	8001dec <HAL_ADC_Start_DMA+0x100>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d22:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hadc);
 8001d24:	2301      	movs	r3, #1
 8001d26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d2a:	688b      	ldr	r3, [r1, #8]
 8001d2c:	07d8      	lsls	r0, r3, #31
 8001d2e:	d505      	bpl.n	8001d3c <HAL_ADC_Start_DMA+0x50>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d30:	688b      	ldr	r3, [r1, #8]
 8001d32:	07da      	lsls	r2, r3, #31
 8001d34:	d414      	bmi.n	8001d60 <HAL_ADC_Start_DMA+0x74>
  return HAL_OK;
 8001d36:	2000      	movs	r0, #0
}
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001d3c:	688b      	ldr	r3, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <HAL_ADC_Start_DMA+0x108>)
    __HAL_ADC_ENABLE(hadc);
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	608b      	str	r3, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_ADC_Start_DMA+0x10c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8001d52:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001d54:	9b01      	ldr	r3, [sp, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ea      	beq.n	8001d30 <HAL_ADC_Start_DMA+0x44>
      counter--;
 8001d5a:	9b01      	ldr	r3, [sp, #4]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	e7f8      	b.n	8001d52 <HAL_ADC_Start_DMA+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    ADC_STATE_CLR_SET(hadc->State,
 8001d64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d72:	684b      	ldr	r3, [r1, #4]
 8001d74:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d76:	bf41      	itttt	mi
 8001d78:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8001d7a:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001d7e:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001d82:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d86:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d8a:	bf1c      	itt	ne
 8001d8c:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001d8e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001d94:	2300      	movs	r3, #0
 8001d96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_ADC_Start_DMA+0x110>)
 8001d9c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_ADC_Start_DMA+0x114>)
 8001da0:	6403      	str	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_ADC_Start_DMA+0x118>)
 8001da4:	64c3      	str	r3, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001da6:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001daa:	600b      	str	r3, [r1, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dac:	684b      	ldr	r3, [r1, #4]
 8001dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db2:	604b      	str	r3, [r1, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001db4:	688b      	ldr	r3, [r1, #8]
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	608b      	str	r3, [r1, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	4633      	mov	r3, r6
 8001dc0:	314c      	adds	r1, #76	; 0x4c
 8001dc2:	f000 fc0f 	bl	80025e4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_ADC_Start_DMA+0x11c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f013 0f1f 	tst.w	r3, #31
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	d108      	bne.n	8001de4 <HAL_ADC_Start_DMA+0xf8>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dd2:	6898      	ldr	r0, [r3, #8]
 8001dd4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001dd8:	d1ad      	bne.n	8001d36 <HAL_ADC_Start_DMA+0x4a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	e7a9      	b.n	8001d38 <HAL_ADC_Start_DMA+0x4c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_ADC_Start_DMA+0x120>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d1a5      	bne.n	8001d36 <HAL_ADC_Start_DMA+0x4a>
 8001dea:	e7f2      	b.n	8001dd2 <HAL_ADC_Start_DMA+0xe6>
  __HAL_LOCK(hadc);
 8001dec:	2002      	movs	r0, #2
 8001dee:	e7a3      	b.n	8001d38 <HAL_ADC_Start_DMA+0x4c>
 8001df0:	08008278 	.word	0x08008278
 8001df4:	000f4240 	.word	0x000f4240
 8001df8:	20000408 	.word	0x20000408
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	40012300 	.word	0x40012300
 8001e0c:	40012000 	.word	0x40012000

08001e10 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e14:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001e18:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e1a:	d124      	bne.n	8001e66 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	6891      	ldr	r1, [r2, #8]
 8001e28:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001e2c:	d117      	bne.n	8001e5e <ADC_DMAConvCplt+0x4e>
 8001e2e:	6999      	ldr	r1, [r3, #24]
 8001e30:	b9a9      	cbnz	r1, 8001e5e <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e34:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001e38:	d002      	beq.n	8001e40 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e3a:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e3c:	0549      	lsls	r1, r1, #21
 8001e3e:	d40e      	bmi.n	8001e5e <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e40:	6851      	ldr	r1, [r2, #4]
 8001e42:	f021 0120 	bic.w	r1, r1, #32
 8001e46:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e54:	bf5e      	ittt	pl
 8001e56:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001e58:	f042 0201 	orrpl.w	r2, r2, #1
 8001e5c:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fa12 	bl	8001288 <HAL_ADC_ConvCpltCallback>
 8001e64:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8001e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4718      	bx	r3

08001e70 <HAL_ADC_ConvHalfCpltCallback>:
 8001e70:	4770      	bx	lr

08001e72 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e72:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001e74:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001e76:	f7ff fffb 	bl	8001e70 <HAL_ADC_ConvHalfCpltCallback>
 8001e7a:	bd08      	pop	{r3, pc}

08001e7c <HAL_ADC_ErrorCallback>:
{
 8001e7c:	4770      	bx	lr

08001e7e <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001e80:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e82:	2340      	movs	r3, #64	; 0x40
 8001e84:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8001e8e:	f7ff fff5 	bl	8001e7c <HAL_ADC_ErrorCallback>
 8001e92:	bd08      	pop	{r3, pc}

08001e94 <HAL_ADC_ConfigChannel>:
{
 8001e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001e9a:	680b      	ldr	r3, [r1, #0]
 8001e9c:	2b12      	cmp	r3, #18
{
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	460f      	mov	r7, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ea2:	d907      	bls.n	8001eb4 <HAL_ADC_ConfigChannel+0x20>
 8001ea4:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_ADC_ConfigChannel+0x158>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x20>
 8001eaa:	f240 5117 	movw	r1, #1303	; 0x517
 8001eae:	4850      	ldr	r0, [pc, #320]	; (8001ff0 <HAL_ADC_ConfigChannel+0x15c>)
 8001eb0:	f7fe ff47 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d904      	bls.n	8001ec6 <HAL_ADC_ConfigChannel+0x32>
 8001ebc:	f44f 61a3 	mov.w	r1, #1304	; 0x518
 8001ec0:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <HAL_ADC_ConfigChannel+0x15c>)
 8001ec2:	f7fe ff3e 	bl	8000d42 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	d904      	bls.n	8001ed6 <HAL_ADC_ConfigChannel+0x42>
 8001ecc:	f240 5119 	movw	r1, #1305	; 0x519
 8001ed0:	4847      	ldr	r0, [pc, #284]	; (8001ff0 <HAL_ADC_ConfigChannel+0x15c>)
 8001ed2:	f7fe ff36 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hadc);
 8001ed6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d069      	beq.n	8001fb2 <HAL_ADC_ConfigChannel+0x11e>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ede:	683d      	ldr	r5, [r7, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hadc);
 8001ee4:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee6:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001ee8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001eec:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eee:	d929      	bls.n	8001f44 <HAL_ADC_ConfigChannel+0xb0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001ef4:	68c1      	ldr	r1, [r0, #12]
 8001ef6:	3b1e      	subs	r3, #30
 8001ef8:	f04f 0e07 	mov.w	lr, #7
 8001efc:	fa0e fe03 	lsl.w	lr, lr, r3
 8001f00:	ea21 010e 	bic.w	r1, r1, lr
 8001f04:	60c1      	str	r1, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f06:	68c1      	ldr	r1, [r0, #12]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7U)
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	2a06      	cmp	r2, #6
 8001f14:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001f18:	d824      	bhi.n	8001f64 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f1a:	4413      	add	r3, r2
 8001f1c:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8001f1e:	1f59      	subs	r1, r3, #5
 8001f20:	231f      	movs	r3, #31
 8001f22:	408b      	lsls	r3, r1
 8001f24:	ea27 0303 	bic.w	r3, r7, r3
 8001f28:	6343      	str	r3, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f2a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f2c:	fa06 f101 	lsl.w	r1, r6, r1
 8001f30:	4311      	orrs	r1, r2
 8001f32:	6341      	str	r1, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_ADC_ConfigChannel+0x160>)
 8001f36:	4298      	cmp	r0, r3
 8001f38:	d033      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x10e>
  __HAL_UNLOCK(hadc);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f40:	b003      	add	sp, #12
 8001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f44:	6901      	ldr	r1, [r0, #16]
 8001f46:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001f4a:	f04f 0e07 	mov.w	lr, #7
 8001f4e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001f52:	ea21 010e 	bic.w	r1, r1, lr
 8001f56:	6101      	str	r1, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f58:	6901      	ldr	r1, [r0, #16]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6103      	str	r3, [r0, #16]
 8001f62:	e7d5      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x7c>
  else if (sConfig->Rank < 13U)
 8001f64:	2a0c      	cmp	r2, #12
 8001f66:	d80e      	bhi.n	8001f86 <HAL_ADC_ConfigChannel+0xf2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f68:	4413      	add	r3, r2
 8001f6a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001f6c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001f70:	231f      	movs	r3, #31
 8001f72:	4093      	lsls	r3, r2
 8001f74:	ea21 0303 	bic.w	r3, r1, r3
 8001f78:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f7c:	fa06 f202 	lsl.w	r2, r6, r2
 8001f80:	431a      	orrs	r2, r3
 8001f82:	6302      	str	r2, [r0, #48]	; 0x30
 8001f84:	e7d6      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xa0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f86:	4413      	add	r3, r2
 8001f88:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f8a:	3b41      	subs	r3, #65	; 0x41
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	ea21 0202 	bic.w	r2, r1, r2
 8001f94:	62c2      	str	r2, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f96:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001f98:	fa06 f103 	lsl.w	r1, r6, r3
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001fa0:	e7c8      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xa0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fa2:	2d12      	cmp	r5, #18
 8001fa4:	d107      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x122>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_ADC_ConfigChannel+0x164>)
 8001fa8:	6853      	ldr	r3, [r2, #4]
 8001faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fae:	6053      	str	r3, [r2, #4]
 8001fb0:	e7c3      	b.n	8001f3a <HAL_ADC_ConfigChannel+0xa6>
  __HAL_LOCK(hadc);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	e7c4      	b.n	8001f40 <HAL_ADC_ConfigChannel+0xac>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_ADC_ConfigChannel+0x158>)
 8001fb8:	429d      	cmp	r5, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_ADC_ConfigChannel+0x12c>
 8001fbc:	2d11      	cmp	r5, #17
 8001fbe:	d1bc      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0xa6>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fc0:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <HAL_ADC_ConfigChannel+0x164>)
 8001fc2:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fc4:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fc6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fca:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fcc:	d1b5      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0xa6>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_ADC_ConfigChannel+0x168>)
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_ADC_ConfigChannel+0x16c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001fd8:	230a      	movs	r3, #10
 8001fda:	4353      	muls	r3, r2
        counter--;
 8001fdc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0aa      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0xa6>
        counter--;
 8001fe4:	9b01      	ldr	r3, [sp, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	e7f8      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x148>
 8001fea:	bf00      	nop
 8001fec:	10000012 	.word	0x10000012
 8001ff0:	08008278 	.word	0x08008278
 8001ff4:	40012000 	.word	0x40012000
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	20000408 	.word	0x20000408
 8002000:	000f4240 	.word	0x000f4240

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002004:	1ec3      	subs	r3, r0, #3
 8002006:	2b04      	cmp	r3, #4
{
 8002008:	b510      	push	{r4, lr}
 800200a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800200c:	d903      	bls.n	8002016 <HAL_NVIC_SetPriorityGrouping+0x12>
 800200e:	21a4      	movs	r1, #164	; 0xa4
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002012:	f7fe fe96 	bl	8000d42 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8002018:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002026:	0224      	lsls	r4, r4, #8
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002030:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8002032:	60d4      	str	r4, [r2, #12]
 8002034:	bd10      	pop	{r4, pc}
 8002036:	bf00      	nop
 8002038:	080082b6 	.word	0x080082b6
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002040:	2a0f      	cmp	r2, #15
{ 
 8002042:	b570      	push	{r4, r5, r6, lr}
 8002044:	4604      	mov	r4, r0
 8002046:	460e      	mov	r6, r1
 8002048:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800204a:	d903      	bls.n	8002054 <HAL_NVIC_SetPriority+0x14>
 800204c:	21bc      	movs	r1, #188	; 0xbc
 800204e:	481a      	ldr	r0, [pc, #104]	; (80020b8 <HAL_NVIC_SetPriority+0x78>)
 8002050:	f7fe fe77 	bl	8000d42 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002054:	2e0f      	cmp	r6, #15
 8002056:	d903      	bls.n	8002060 <HAL_NVIC_SetPriority+0x20>
 8002058:	21bd      	movs	r1, #189	; 0xbd
 800205a:	4817      	ldr	r0, [pc, #92]	; (80020b8 <HAL_NVIC_SetPriority+0x78>)
 800205c:	f7fe fe71 	bl	8000d42 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_NVIC_SetPriority+0x7c>)
 8002062:	68d9      	ldr	r1, [r3, #12]
 8002064:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206c:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	2a06      	cmp	r2, #6
 8002078:	bf8c      	ite	hi
 800207a:	3903      	subhi	r1, #3
 800207c:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002086:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208a:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 800208e:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	ea42 0205 	orr.w	r2, r2, r5
 8002094:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	bfaf      	iteee	ge
 800209a:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	f004 040f 	andlt.w	r4, r4, #15
 80020a2:	4b07      	ldrlt	r3, [pc, #28]	; (80020c0 <HAL_NVIC_SetPriority+0x80>)
 80020a4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	bfa5      	ittet	ge
 80020a8:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 80020ac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	bf00      	nop
 80020b8:	080082b6 	.word	0x080082b6
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	e000ed14 	.word	0xe000ed14

080020c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80020c6:	1e04      	subs	r4, r0, #0
 80020c8:	da03      	bge.n	80020d2 <HAL_NVIC_EnableIRQ+0xe>
 80020ca:	21d0      	movs	r1, #208	; 0xd0
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <HAL_NVIC_EnableIRQ+0x24>)
 80020ce:	f7fe fe38 	bl	8000d42 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020d2:	0962      	lsrs	r2, r4, #5
 80020d4:	2301      	movs	r3, #1
 80020d6:	f004 041f 	and.w	r4, r4, #31
 80020da:	fa03 f404 	lsl.w	r4, r3, r4
 80020de:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_NVIC_EnableIRQ+0x28>)
 80020e0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80020e4:	bd10      	pop	{r4, pc}
 80020e6:	bf00      	nop
 80020e8:	080082b6 	.word	0x080082b6
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	3801      	subs	r0, #1
 80020f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80020f6:	d20a      	bcs.n	800210e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	21f0      	movs	r1, #240	; 0xf0
 8002100:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800211c:	2804      	cmp	r0, #4
{
 800211e:	b510      	push	{r4, lr}
 8002120:	4c08      	ldr	r4, [pc, #32]	; (8002144 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8002122:	d00a      	beq.n	800213a <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8002124:	b120      	cbz	r0, 8002130 <HAL_SYSTICK_CLKSourceConfig+0x14>
 8002126:	f240 11db 	movw	r1, #475	; 0x1db
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 800212c:	f7fe fe09 	bl	8000d42 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002136:	6023      	str	r3, [r4, #0]
 8002138:	bd10      	pop	{r4, pc}
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	e7f9      	b.n	8002136 <HAL_SYSTICK_CLKSourceConfig+0x1a>
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010
 8002148:	080082b6 	.word	0x080082b6

0800214c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800214c:	4770      	bx	lr

0800214e <HAL_SYSTICK_IRQHandler>:
{
 800214e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002150:	f7ff fffc 	bl	800214c <HAL_SYSTICK_Callback>
 8002154:	bd08      	pop	{r3, pc}
	...

08002158 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002158:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800215a:	4604      	mov	r4, r0
 800215c:	b1b0      	cbz	r0, 800218c <HAL_DAC_Init+0x34>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800215e:	6802      	ldr	r2, [r0, #0]
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_DAC_Init+0x38>)
 8002162:	429a      	cmp	r2, r3
 8002164:	d003      	beq.n	800216e <HAL_DAC_Init+0x16>
 8002166:	21f0      	movs	r1, #240	; 0xf0
 8002168:	480a      	ldr	r0, [pc, #40]	; (8002194 <HAL_DAC_Init+0x3c>)
 800216a:	f7fe fdea 	bl	8000d42 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800216e:	7923      	ldrb	r3, [r4, #4]
 8002170:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002174:	b91b      	cbnz	r3, 800217e <HAL_DAC_Init+0x26>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002176:	7162      	strb	r2, [r4, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe f959 	bl	8000430 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800217e:	2302      	movs	r3, #2
 8002180:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002182:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002184:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002186:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002188:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800218a:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
}
 800218e:	bd10      	pop	{r4, pc}
 8002190:	40007400 	.word	0x40007400
 8002194:	080082f7 	.word	0x080082f7

08002198 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002198:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp1 = 0U, tmp2 = 0U;
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800219a:	f031 0310 	bics.w	r3, r1, #16
{
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
  assert_param(IS_DAC_CHANNEL(Channel));
 80021a2:	d004      	beq.n	80021ae <HAL_DAC_Start+0x16>
 80021a4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80021a8:	4816      	ldr	r0, [pc, #88]	; (8002204 <HAL_DAC_Start+0x6c>)
 80021aa:	f7fe fdca 	bl	8000d42 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021ae:	7963      	ldrb	r3, [r4, #5]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f04f 0002 	mov.w	r0, #2
 80021b6:	d018      	beq.n	80021ea <HAL_DAC_Start+0x52>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80021b8:	6823      	ldr	r3, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ba:	7120      	strb	r0, [r4, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80021bc:	6819      	ldr	r1, [r3, #0]
  __HAL_LOCK(hdac);
 80021be:	2201      	movs	r2, #1
 80021c0:	7162      	strb	r2, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80021c2:	40aa      	lsls	r2, r5
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80021c8:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80021ca:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80021cc:	b975      	cbnz	r5, 80021ec <HAL_DAC_Start+0x54>
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80021ce:	0748      	lsls	r0, r1, #29
 80021d0:	d507      	bpl.n	80021e2 <HAL_DAC_Start+0x4a>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80021d2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80021d6:	2a38      	cmp	r2, #56	; 0x38
 80021d8:	d103      	bne.n	80021e2 <HAL_DAC_Start+0x4a>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80021e0:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021e2:	2301      	movs	r3, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021e4:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80021e6:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80021e8:	7160      	strb	r0, [r4, #5]
    
  /* Return function status */
  return HAL_OK;
}
 80021ea:	bd38      	pop	{r3, r4, r5, pc}
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80021ec:	0349      	lsls	r1, r1, #13
 80021ee:	d5f8      	bpl.n	80021e2 <HAL_DAC_Start+0x4a>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80021f0:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80021f4:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 80021f8:	d1f3      	bne.n	80021e2 <HAL_DAC_Start+0x4a>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	f042 0202 	orr.w	r2, r2, #2
 8002200:	e7ee      	b.n	80021e0 <HAL_DAC_Start+0x48>
 8002202:	bf00      	nop
 8002204:	080082f7 	.word	0x080082f7

08002208 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002208:	4770      	bx	lr

0800220a <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220e:	0491      	lsls	r1, r2, #18
{
 8002210:	b510      	push	{r4, lr}
 8002212:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002214:	d50e      	bpl.n	8002234 <HAL_DAC_IRQHandler+0x2a>
    hdac->State = HAL_DAC_STATE_ERROR;
 8002216:	2204      	movs	r2, #4
 8002218:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800221a:	6902      	ldr	r2, [r0, #16]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002226:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222e:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002230:	f7ff ffea 	bl	8002208 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	d511      	bpl.n	8002260 <HAL_DAC_IRQHandler+0x56>
    hdac->State = HAL_DAC_STATE_ERROR;
 800223c:	2204      	movs	r2, #4
 800223e:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002240:	6922      	ldr	r2, [r4, #16]
 8002242:	f042 0202 	orr.w	r2, r2, #2
 8002246:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002254:	4620      	mov	r0, r4
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800225c:	f000 b882 	b.w	8002364 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8002260:	bd10      	pop	{r4, pc}
	...

08002264 <HAL_DAC_ConfigChannel>:
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002264:	680b      	ldr	r3, [r1, #0]
{
 8002266:	b570      	push	{r4, r5, r6, lr}
 8002268:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800226a:	f033 0204 	bics.w	r2, r3, #4
{
 800226e:	4604      	mov	r4, r0
 8002270:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002272:	d012      	beq.n	800229a <HAL_DAC_ConfigChannel+0x36>
 8002274:	f023 0208 	bic.w	r2, r3, #8
 8002278:	2a24      	cmp	r2, #36	; 0x24
 800227a:	d00e      	beq.n	800229a <HAL_DAC_ConfigChannel+0x36>
 800227c:	f023 0210 	bic.w	r2, r3, #16
 8002280:	2a0c      	cmp	r2, #12
 8002282:	d00a      	beq.n	800229a <HAL_DAC_ConfigChannel+0x36>
 8002284:	f023 0220 	bic.w	r2, r3, #32
 8002288:	2a14      	cmp	r2, #20
 800228a:	d006      	beq.n	800229a <HAL_DAC_ConfigChannel+0x36>
 800228c:	2b3c      	cmp	r3, #60	; 0x3c
 800228e:	d004      	beq.n	800229a <HAL_DAC_ConfigChannel+0x36>
 8002290:	f240 310a 	movw	r1, #778	; 0x30a
 8002294:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_DAC_ConfigChannel+0x98>)
 8002296:	f7fe fd54 	bl	8000d42 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800229a:	6873      	ldr	r3, [r6, #4]
 800229c:	f033 0302 	bics.w	r3, r3, #2
 80022a0:	d004      	beq.n	80022ac <HAL_DAC_ConfigChannel+0x48>
 80022a2:	f240 310b 	movw	r1, #779	; 0x30b
 80022a6:	4815      	ldr	r0, [pc, #84]	; (80022fc <HAL_DAC_ConfigChannel+0x98>)
 80022a8:	f7fe fd4b 	bl	8000d42 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 80022ac:	f035 0310 	bics.w	r3, r5, #16
 80022b0:	d004      	beq.n	80022bc <HAL_DAC_ConfigChannel+0x58>
 80022b2:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80022b6:	4811      	ldr	r0, [pc, #68]	; (80022fc <HAL_DAC_ConfigChannel+0x98>)
 80022b8:	f7fe fd43 	bl	8000d42 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80022bc:	7963      	ldrb	r3, [r4, #5]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f04f 0002 	mov.w	r0, #2
 80022c4:	d018      	beq.n	80022f8 <HAL_DAC_ConfigChannel+0x94>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022c6:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c8:	7120      	strb	r0, [r4, #4]
  tmpreg1 = hdac->Instance->CR;
 80022ca:	6813      	ldr	r3, [r2, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80022cc:	f640 71fe 	movw	r1, #4094	; 0xffe
 80022d0:	40a9      	lsls	r1, r5
 80022d2:	ea23 0101 	bic.w	r1, r3, r1
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022d6:	e896 0009 	ldmia.w	r6, {r0, r3}
 80022da:	4303      	orrs	r3, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80022dc:	40ab      	lsls	r3, r5
 80022de:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022e0:	6013      	str	r3, [r2, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	21c0      	movs	r1, #192	; 0xc0
 80022e6:	fa01 f505 	lsl.w	r5, r1, r5
 80022ea:	ea23 0505 	bic.w	r5, r3, r5
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022ee:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80022f0:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80022f2:	6015      	str	r5, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80022f4:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80022f6:	7160      	strb	r0, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
}
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
 80022fa:	bf00      	nop
 80022fc:	080082f7 	.word	0x080082f7

08002300 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002302:	461d      	mov	r5, r3
  __IO uint32_t tmp = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002308:	f031 0310 	bics.w	r3, r1, #16
{  
 800230c:	4607      	mov	r7, r0
 800230e:	460e      	mov	r6, r1
 8002310:	4614      	mov	r4, r2
  assert_param(IS_DAC_CHANNEL(Channel));
 8002312:	d004      	beq.n	800231e <HAL_DAC_SetValue+0x1e>
 8002314:	f240 3142 	movw	r1, #834	; 0x342
 8002318:	4811      	ldr	r0, [pc, #68]	; (8002360 <HAL_DAC_SetValue+0x60>)
 800231a:	f7fe fd12 	bl	8000d42 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 800231e:	f034 0304 	bics.w	r3, r4, #4
 8002322:	d006      	beq.n	8002332 <HAL_DAC_SetValue+0x32>
 8002324:	2c08      	cmp	r4, #8
 8002326:	d004      	beq.n	8002332 <HAL_DAC_SetValue+0x32>
 8002328:	f240 3143 	movw	r1, #835	; 0x343
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <HAL_DAC_SetValue+0x60>)
 800232e:	f7fe fd08 	bl	8000d42 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 8002332:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002336:	429d      	cmp	r5, r3
 8002338:	d904      	bls.n	8002344 <HAL_DAC_SetValue+0x44>
 800233a:	f44f 7151 	mov.w	r1, #836	; 0x344
 800233e:	4808      	ldr	r0, [pc, #32]	; (8002360 <HAL_DAC_SetValue+0x60>)
 8002340:	f7fe fcff 	bl	8000d42 <assert_failed>
  
  tmp = (uint32_t)hdac->Instance; 
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	9301      	str	r3, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002348:	9a01      	ldr	r2, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 800234a:	b93e      	cbnz	r6, 800235c <HAL_DAC_SetValue+0x5c>
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800234c:	3208      	adds	r2, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800234e:	4422      	add	r2, r4
 8002350:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002352:	9b01      	ldr	r3, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8002354:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8002356:	601d      	str	r5, [r3, #0]
}
 8002358:	b003      	add	sp, #12
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800235c:	3214      	adds	r2, #20
 800235e:	e7f6      	b.n	800234e <HAL_DAC_SetValue+0x4e>
 8002360:	080082f7 	.word	0x080082f7

08002364 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002364:	4770      	bx	lr
	...

08002368 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002370:	f023 0303 	bic.w	r3, r3, #3
 8002374:	2118      	movs	r1, #24
 8002376:	3a10      	subs	r2, #16
 8002378:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237c:	4904      	ldr	r1, [pc, #16]	; (8002390 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800237e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002380:	bf88      	it	hi
 8002382:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002384:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002386:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002388:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800238a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	08008373 	.word	0x08008373

08002394 <HAL_DMA_Init>:
{
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fb52 	bl	8001a40 <HAL_GetTick>
 800239c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800239e:	2c00      	cmp	r4, #0
 80023a0:	f000 8117 	beq.w	80025d2 <HAL_DMA_Init+0x23e>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	4a8c      	ldr	r2, [pc, #560]	; (80025d8 <HAL_DMA_Init+0x244>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d031      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023ac:	3218      	adds	r2, #24
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02e      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023b2:	3218      	adds	r2, #24
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d02b      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023b8:	3218      	adds	r2, #24
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d028      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023be:	3218      	adds	r2, #24
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d025      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023c4:	3218      	adds	r2, #24
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d022      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023ca:	3218      	adds	r2, #24
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01f      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023d0:	3218      	adds	r2, #24
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01c      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023d6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80023da:	4293      	cmp	r3, r2
 80023dc:	d018      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023de:	3218      	adds	r2, #24
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d015      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023e4:	3218      	adds	r2, #24
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d012      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023ea:	3218      	adds	r2, #24
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00f      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023f0:	3218      	adds	r2, #24
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00c      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023f6:	3218      	adds	r2, #24
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 80023fc:	3218      	adds	r2, #24
 80023fe:	4293      	cmp	r3, r2
 8002400:	d006      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 8002402:	3218      	adds	r2, #24
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <HAL_DMA_Init+0x7c>
 8002408:	21ca      	movs	r1, #202	; 0xca
 800240a:	4874      	ldr	r0, [pc, #464]	; (80025dc <HAL_DMA_Init+0x248>)
 800240c:	f7fe fc99 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002410:	6863      	ldr	r3, [r4, #4]
 8002412:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8002416:	d006      	beq.n	8002426 <HAL_DMA_Init+0x92>
 8002418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241c:	d003      	beq.n	8002426 <HAL_DMA_Init+0x92>
 800241e:	21cb      	movs	r1, #203	; 0xcb
 8002420:	486e      	ldr	r0, [pc, #440]	; (80025dc <HAL_DMA_Init+0x248>)
 8002422:	f7fe fc8e 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002426:	68a3      	ldr	r3, [r4, #8]
 8002428:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800242c:	d005      	beq.n	800243a <HAL_DMA_Init+0xa6>
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d003      	beq.n	800243a <HAL_DMA_Init+0xa6>
 8002432:	21cc      	movs	r1, #204	; 0xcc
 8002434:	4869      	ldr	r0, [pc, #420]	; (80025dc <HAL_DMA_Init+0x248>)
 8002436:	f7fe fc84 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800243a:	68e3      	ldr	r3, [r4, #12]
 800243c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002440:	d003      	beq.n	800244a <HAL_DMA_Init+0xb6>
 8002442:	21cd      	movs	r1, #205	; 0xcd
 8002444:	4865      	ldr	r0, [pc, #404]	; (80025dc <HAL_DMA_Init+0x248>)
 8002446:	f7fe fc7c 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800244a:	6923      	ldr	r3, [r4, #16]
 800244c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002450:	d003      	beq.n	800245a <HAL_DMA_Init+0xc6>
 8002452:	21ce      	movs	r1, #206	; 0xce
 8002454:	4861      	ldr	r0, [pc, #388]	; (80025dc <HAL_DMA_Init+0x248>)
 8002456:	f7fe fc74 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800245a:	6963      	ldr	r3, [r4, #20]
 800245c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8002460:	d006      	beq.n	8002470 <HAL_DMA_Init+0xdc>
 8002462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002466:	d003      	beq.n	8002470 <HAL_DMA_Init+0xdc>
 8002468:	21cf      	movs	r1, #207	; 0xcf
 800246a:	485c      	ldr	r0, [pc, #368]	; (80025dc <HAL_DMA_Init+0x248>)
 800246c:	f7fe fc69 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002470:	69a3      	ldr	r3, [r4, #24]
 8002472:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002476:	d006      	beq.n	8002486 <HAL_DMA_Init+0xf2>
 8002478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247c:	d003      	beq.n	8002486 <HAL_DMA_Init+0xf2>
 800247e:	21d0      	movs	r1, #208	; 0xd0
 8002480:	4856      	ldr	r0, [pc, #344]	; (80025dc <HAL_DMA_Init+0x248>)
 8002482:	f7fe fc5e 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002486:	69e3      	ldr	r3, [r4, #28]
 8002488:	f033 0220 	bics.w	r2, r3, #32
 800248c:	d006      	beq.n	800249c <HAL_DMA_Init+0x108>
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d003      	beq.n	800249c <HAL_DMA_Init+0x108>
 8002494:	21d1      	movs	r1, #209	; 0xd1
 8002496:	4851      	ldr	r0, [pc, #324]	; (80025dc <HAL_DMA_Init+0x248>)
 8002498:	f7fe fc53 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800249c:	6a23      	ldr	r3, [r4, #32]
 800249e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_Init+0x118>
 80024a4:	21d2      	movs	r1, #210	; 0xd2
 80024a6:	484d      	ldr	r0, [pc, #308]	; (80025dc <HAL_DMA_Init+0x248>)
 80024a8:	f7fe fc4b 	bl	8000d42 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80024ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ae:	f033 0304 	bics.w	r3, r3, #4
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_Init+0x128>
 80024b4:	21d3      	movs	r1, #211	; 0xd3
 80024b6:	4849      	ldr	r0, [pc, #292]	; (80025dc <HAL_DMA_Init+0x248>)
 80024b8:	f7fe fc43 	bl	8000d42 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80024bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024be:	b1b3      	cbz	r3, 80024ee <HAL_DMA_Init+0x15a>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80024c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d903      	bls.n	80024ce <HAL_DMA_Init+0x13a>
 80024c6:	21d8      	movs	r1, #216	; 0xd8
 80024c8:	4844      	ldr	r0, [pc, #272]	; (80025dc <HAL_DMA_Init+0x248>)
 80024ca:	f7fe fc3a 	bl	8000d42 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80024ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024d0:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80024d4:	d003      	beq.n	80024de <HAL_DMA_Init+0x14a>
 80024d6:	21d9      	movs	r1, #217	; 0xd9
 80024d8:	4840      	ldr	r0, [pc, #256]	; (80025dc <HAL_DMA_Init+0x248>)
 80024da:	f7fe fc32 	bl	8000d42 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80024de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024e0:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80024e4:	d003      	beq.n	80024ee <HAL_DMA_Init+0x15a>
 80024e6:	21da      	movs	r1, #218	; 0xda
 80024e8:	483c      	ldr	r0, [pc, #240]	; (80025dc <HAL_DMA_Init+0x248>)
 80024ea:	f7fe fc2a 	bl	8000d42 <assert_failed>
  __HAL_UNLOCK(hdma);
 80024ee:	2300      	movs	r3, #0
 80024f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80024f4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	6821      	ldr	r1, [r4, #0]
 8002506:	680b      	ldr	r3, [r1, #0]
 8002508:	07d8      	lsls	r0, r3, #31
 800250a:	d43c      	bmi.n	8002586 <HAL_DMA_Init+0x1f2>
  tmp = hdma->Instance->CR;
 800250c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250e:	4d34      	ldr	r5, [pc, #208]	; (80025e0 <HAL_DMA_Init+0x24c>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002510:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002512:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002514:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	68a3      	ldr	r3, [r4, #8]
 8002518:	4313      	orrs	r3, r2
 800251a:	68e2      	ldr	r2, [r4, #12]
 800251c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	6922      	ldr	r2, [r4, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	6962      	ldr	r2, [r4, #20]
 8002524:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	69e2      	ldr	r2, [r4, #28]
 8002528:	4303      	orrs	r3, r0
 800252a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800252c:	6a22      	ldr	r2, [r4, #32]
 800252e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002530:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002532:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002534:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002538:	bf01      	itttt	eq
 800253a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800253c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800253e:	4335      	orreq	r5, r6
 8002540:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002542:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002544:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002546:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002548:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800254c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002550:	d10b      	bne.n	800256a <HAL_DMA_Init+0x1d6>
    tmp |= hdma->Init.FIFOThreshold;
 8002552:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002554:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002556:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002558:	b13d      	cbz	r5, 800256a <HAL_DMA_Init+0x1d6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255a:	b9f8      	cbnz	r0, 800259c <HAL_DMA_Init+0x208>
  {
    switch (tmp)
 800255c:	2a01      	cmp	r2, #1
 800255e:	d02d      	beq.n	80025bc <HAL_DMA_Init+0x228>
 8002560:	d301      	bcc.n	8002566 <HAL_DMA_Init+0x1d2>
 8002562:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002564:	d101      	bne.n	800256a <HAL_DMA_Init+0x1d6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002566:	01ea      	lsls	r2, r5, #7
 8002568:	d42b      	bmi.n	80025c2 <HAL_DMA_Init+0x22e>
  hdma->Instance->FCR = tmp;
 800256a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff fefb 	bl	8002368 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002572:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002574:	233f      	movs	r3, #63	; 0x3f
 8002576:	4093      	lsls	r3, r2
 8002578:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800257c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002580:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002584:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002586:	f7ff fa5b 	bl	8001a40 <HAL_GetTick>
 800258a:	1b40      	subs	r0, r0, r5
 800258c:	2805      	cmp	r0, #5
 800258e:	d9b9      	bls.n	8002504 <HAL_DMA_Init+0x170>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002590:	2320      	movs	r3, #32
 8002592:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002594:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002596:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800259a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800259c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80025a0:	d113      	bne.n	80025ca <HAL_DMA_Init+0x236>
    switch (tmp)
 80025a2:	2a03      	cmp	r2, #3
 80025a4:	d8e1      	bhi.n	800256a <HAL_DMA_Init+0x1d6>
 80025a6:	a001      	add	r0, pc, #4	; (adr r0, 80025ac <HAL_DMA_Init+0x218>)
 80025a8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80025ac:	080025c3 	.word	0x080025c3
 80025b0:	08002567 	.word	0x08002567
 80025b4:	080025c3 	.word	0x080025c3
 80025b8:	080025bd 	.word	0x080025bd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025bc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80025c0:	d1d3      	bne.n	800256a <HAL_DMA_Init+0x1d6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025c2:	2340      	movs	r3, #64	; 0x40
 80025c4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e7e5      	b.n	8002596 <HAL_DMA_Init+0x202>
    switch (tmp)
 80025ca:	2a02      	cmp	r2, #2
 80025cc:	d9f9      	bls.n	80025c2 <HAL_DMA_Init+0x22e>
 80025ce:	2a03      	cmp	r2, #3
 80025d0:	e7c8      	b.n	8002564 <HAL_DMA_Init+0x1d0>
    return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
 80025d6:	bf00      	nop
 80025d8:	40026010 	.word	0x40026010
 80025dc:	08008335 	.word	0x08008335
 80025e0:	f010803f 	.word	0xf010803f

080025e4 <HAL_DMA_Start_IT>:
{
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e8:	4617      	mov	r7, r2
 80025ea:	4698      	mov	r8, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80025f2:	429a      	cmp	r2, r3
{
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80025fa:	d904      	bls.n	8002606 <HAL_DMA_Start_IT+0x22>
 80025fc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002600:	4822      	ldr	r0, [pc, #136]	; (800268c <HAL_DMA_Start_IT+0xa8>)
 8002602:	f7fe fb9e 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hdma);
 8002606:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800260a:	2b01      	cmp	r3, #1
 800260c:	d03a      	beq.n	8002684 <HAL_DMA_Start_IT+0xa0>
 800260e:	2301      	movs	r3, #1
 8002610:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002614:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002618:	2b01      	cmp	r3, #1
 800261a:	f04f 0002 	mov.w	r0, #2
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	d12b      	bne.n	800267c <HAL_DMA_Start_IT+0x98>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800262a:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800262c:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800262e:	6808      	ldr	r0, [r1, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002630:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002632:	2b40      	cmp	r3, #64	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002634:	f04f 033f 	mov.w	r3, #63	; 0x3f
 8002638:	fa03 f302 	lsl.w	r3, r3, r2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800263c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002640:	6008      	str	r0, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8002642:	f8c1 8004 	str.w	r8, [r1, #4]
    hdma->Instance->PAR = DstAddress;
 8002646:	bf0b      	itete	eq
 8002648:	608f      	streq	r7, [r1, #8]
    hdma->Instance->PAR = SrcAddress;
 800264a:	608d      	strne	r5, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 800264c:	60cd      	streq	r5, [r1, #12]
    hdma->Instance->M0AR = DstAddress;
 800264e:	60cf      	strne	r7, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002650:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002652:	680b      	ldr	r3, [r1, #0]
 8002654:	f043 0316 	orr.w	r3, r3, #22
 8002658:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800265a:	694b      	ldr	r3, [r1, #20]
 800265c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002660:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002664:	b11b      	cbz	r3, 800266e <HAL_DMA_Start_IT+0x8a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002666:	680b      	ldr	r3, [r1, #0]
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 800266e:	680b      	ldr	r3, [r1, #0]
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2000      	movs	r0, #0
 8002678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 800267c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8002680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdma);
 8002684:	2002      	movs	r0, #2
}
 8002686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800268a:	bf00      	nop
 800268c:	08008335 	.word	0x08008335

08002690 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002690:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002694:	2b02      	cmp	r3, #2
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800269c:	2001      	movs	r0, #1
 800269e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80026a0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a2:	2305      	movs	r3, #5
 80026a4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80026a8:	6813      	ldr	r3, [r2, #0]
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80026b0:	2000      	movs	r0, #0
}
 80026b2:	4770      	bx	lr

080026b4 <HAL_DMA_IRQHandler>:
{
 80026b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026ba:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026bc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80026be:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80026c2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	2208      	movs	r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	4216      	tst	r6, r2
{
 80026ca:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026cc:	d00c      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ce:	6801      	ldr	r1, [r0, #0]
 80026d0:	6808      	ldr	r0, [r1, #0]
 80026d2:	0740      	lsls	r0, r0, #29
 80026d4:	d508      	bpl.n	80026e8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d6:	6808      	ldr	r0, [r1, #0]
 80026d8:	f020 0004 	bic.w	r0, r0, #4
 80026dc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026de:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_DMA_IRQHandler+0x174>)
 80026ea:	409a      	lsls	r2, r3
 80026ec:	4216      	tst	r6, r2
 80026ee:	d008      	beq.n	8002702 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026f0:	6821      	ldr	r1, [r4, #0]
 80026f2:	6949      	ldr	r1, [r1, #20]
 80026f4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f6:	bf41      	itttt	mi
 80026f8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026fa:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80026fc:	f042 0202 	orrmi.w	r2, r2, #2
 8002700:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002702:	4a4a      	ldr	r2, [pc, #296]	; (800282c <HAL_DMA_IRQHandler+0x178>)
 8002704:	409a      	lsls	r2, r3
 8002706:	4216      	tst	r6, r2
 8002708:	d008      	beq.n	800271c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800270a:	6821      	ldr	r1, [r4, #0]
 800270c:	6809      	ldr	r1, [r1, #0]
 800270e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002710:	bf41      	itttt	mi
 8002712:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002714:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002716:	f042 0204 	orrmi.w	r2, r2, #4
 800271a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	2210      	movs	r2, #16
 800271e:	409a      	lsls	r2, r3
 8002720:	4216      	tst	r6, r2
 8002722:	d010      	beq.n	8002746 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	0709      	lsls	r1, r1, #28
 800272a:	d50c      	bpl.n	8002746 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800272c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	0350      	lsls	r0, r2, #13
 8002732:	d535      	bpl.n	80027a0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0319      	lsls	r1, r3, #12
 8002738:	d401      	bmi.n	800273e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800273a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800273c:	e000      	b.n	8002740 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800273e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002740:	b10b      	cbz	r3, 8002746 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002742:	4620      	mov	r0, r4
 8002744:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002748:	2220      	movs	r2, #32
 800274a:	408a      	lsls	r2, r1
 800274c:	4216      	tst	r6, r2
 800274e:	d038      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	06c6      	lsls	r6, r0, #27
 8002756:	d534      	bpl.n	80027c2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002758:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800275a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800275e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002760:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002762:	d125      	bne.n	80027b0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002764:	f022 0216 	bic.w	r2, r2, #22
 8002768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002770:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002772:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002774:	b90a      	cbnz	r2, 800277a <HAL_DMA_IRQHandler+0xc6>
 8002776:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002778:	b11a      	cbz	r2, 8002782 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f022 0208 	bic.w	r2, r2, #8
 8002780:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002782:	233f      	movs	r3, #63	; 0x3f
 8002784:	408b      	lsls	r3, r1
 8002786:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8002788:	2300      	movs	r3, #0
 800278a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800278e:	2301      	movs	r3, #1
 8002790:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002794:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002796:	b10b      	cbz	r3, 800279c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8002798:	4620      	mov	r0, r4
 800279a:	4798      	blx	r3
}
 800279c:	b003      	add	sp, #12
 800279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	bf5e      	ittt	pl
 80027a6:	681a      	ldrpl	r2, [r3, #0]
 80027a8:	f022 0208 	bicpl.w	r2, r2, #8
 80027ac:	601a      	strpl	r2, [r3, #0]
 80027ae:	e7c4      	b.n	800273a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b0:	0350      	lsls	r0, r2, #13
 80027b2:	d528      	bpl.n	8002806 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0319      	lsls	r1, r3, #12
 80027b8:	d432      	bmi.n	8002820 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80027ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80027bc:	b10b      	cbz	r3, 80027c2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80027be:	4620      	mov	r0, r4
 80027c0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0e9      	beq.n	800279c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027ca:	07da      	lsls	r2, r3, #31
 80027cc:	d519      	bpl.n	8002802 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80027ce:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80027d0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80027d6:	6813      	ldr	r3, [r2, #0]
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80027e2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80027e6:	9b01      	ldr	r3, [sp, #4]
 80027e8:	3301      	adds	r3, #1
 80027ea:	429f      	cmp	r7, r3
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	d302      	bcc.n	80027f6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f0:	6813      	ldr	r3, [r2, #0]
 80027f2:	07db      	lsls	r3, r3, #31
 80027f4:	d4f7      	bmi.n	80027e6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80027f6:	2300      	movs	r3, #0
 80027f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002802:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002804:	e7c7      	b.n	8002796 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800280c:	d108      	bne.n	8002820 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	f021 0110 	bic.w	r1, r1, #16
 8002814:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002816:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002818:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800281c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002822:	e7cb      	b.n	80027bc <HAL_DMA_IRQHandler+0x108>
 8002824:	20000408 	.word	0x20000408
 8002828:	00800001 	.word	0x00800001
 800282c:	00800004 	.word	0x00800004

08002830 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002830:	4ba5      	ldr	r3, [pc, #660]	; (8002ac8 <HAL_GPIO_Init+0x298>)
 8002832:	4298      	cmp	r0, r3
{
 8002834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	4604      	mov	r4, r0
 800283a:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800283c:	d02b      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 800283e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002842:	4298      	cmp	r0, r3
 8002844:	d027      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 8002846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284a:	4298      	cmp	r0, r3
 800284c:	d023      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 800284e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002852:	4298      	cmp	r0, r3
 8002854:	d01f      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 8002856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285a:	4298      	cmp	r0, r3
 800285c:	d01b      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 800285e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002862:	4298      	cmp	r0, r3
 8002864:	d017      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 8002866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286a:	4298      	cmp	r0, r3
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 800286e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002872:	4298      	cmp	r0, r3
 8002874:	d00f      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 8002876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287a:	4298      	cmp	r0, r3
 800287c:	d00b      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 800287e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002882:	4298      	cmp	r0, r3
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 8002886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288a:	4298      	cmp	r0, r3
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x66>
 800288e:	21c5      	movs	r1, #197	; 0xc5
 8002890:	488e      	ldr	r0, [pc, #568]	; (8002acc <HAL_GPIO_Init+0x29c>)
 8002892:	f7fe fa56 	bl	8000d42 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	b29a      	uxth	r2, r3
 800289a:	b112      	cbz	r2, 80028a2 <HAL_GPIO_Init+0x72>
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	b11b      	cbz	r3, 80028aa <HAL_GPIO_Init+0x7a>
 80028a2:	21c6      	movs	r1, #198	; 0xc6
 80028a4:	4889      	ldr	r0, [pc, #548]	; (8002acc <HAL_GPIO_Init+0x29c>)
 80028a6:	f7fe fa4c 	bl	8000d42 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028aa:	686b      	ldr	r3, [r5, #4]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d917      	bls.n	80028e0 <HAL_GPIO_Init+0xb0>
 80028b0:	f1a3 0211 	sub.w	r2, r3, #17
 80028b4:	2a01      	cmp	r2, #1
 80028b6:	d913      	bls.n	80028e0 <HAL_GPIO_Init+0xb0>
 80028b8:	4985      	ldr	r1, [pc, #532]	; (8002ad0 <HAL_GPIO_Init+0x2a0>)
 80028ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80028be:	428a      	cmp	r2, r1
 80028c0:	d00e      	beq.n	80028e0 <HAL_GPIO_Init+0xb0>
 80028c2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80028c6:	428b      	cmp	r3, r1
 80028c8:	d00a      	beq.n	80028e0 <HAL_GPIO_Init+0xb0>
 80028ca:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80028ce:	428a      	cmp	r2, r1
 80028d0:	d006      	beq.n	80028e0 <HAL_GPIO_Init+0xb0>
 80028d2:	4a80      	ldr	r2, [pc, #512]	; (8002ad4 <HAL_GPIO_Init+0x2a4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0xb0>
 80028d8:	21c7      	movs	r1, #199	; 0xc7
 80028da:	487c      	ldr	r0, [pc, #496]	; (8002acc <HAL_GPIO_Init+0x29c>)
 80028dc:	f7fe fa31 	bl	8000d42 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80028e0:	68ab      	ldr	r3, [r5, #8]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d903      	bls.n	80028ee <HAL_GPIO_Init+0xbe>
 80028e6:	21c8      	movs	r1, #200	; 0xc8
 80028e8:	4878      	ldr	r0, [pc, #480]	; (8002acc <HAL_GPIO_Init+0x29c>)
 80028ea:	f7fe fa2a 	bl	8000d42 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ee:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8002adc <HAL_GPIO_Init+0x2ac>
{
 80028f2:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 80028f4:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f6:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 80028f8:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fc:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8002900:	454f      	cmp	r7, r9
 8002902:	f040 80ca 	bne.w	8002a9a <HAL_GPIO_Init+0x26a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002906:	686a      	ldr	r2, [r5, #4]
 8002908:	f022 0210 	bic.w	r2, r2, #16
 800290c:	2a02      	cmp	r2, #2
 800290e:	d116      	bne.n	800293e <HAL_GPIO_Init+0x10e>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002910:	692a      	ldr	r2, [r5, #16]
 8002912:	2a0f      	cmp	r2, #15
 8002914:	d903      	bls.n	800291e <HAL_GPIO_Init+0xee>
 8002916:	21d9      	movs	r1, #217	; 0xd9
 8002918:	486c      	ldr	r0, [pc, #432]	; (8002acc <HAL_GPIO_Init+0x29c>)
 800291a:	f7fe fa12 	bl	8000d42 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 800291e:	08f1      	lsrs	r1, r6, #3
 8002920:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002924:	f006 0207 	and.w	r2, r6, #7
 8002928:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 800292a:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292c:	220f      	movs	r2, #15
 800292e:	4082      	lsls	r2, r0
 8002930:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002934:	692a      	ldr	r2, [r5, #16]
 8002936:	4082      	lsls	r2, r0
 8002938:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800293c:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800293e:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 8002940:	6820      	ldr	r0, [r4, #0]
 8002942:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	f04f 0a03 	mov.w	sl, #3
 800294a:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294e:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002952:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002956:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295e:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002962:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002964:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002966:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 8002968:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800296a:	d817      	bhi.n	800299c <HAL_GPIO_Init+0x16c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800296c:	68ea      	ldr	r2, [r5, #12]
 800296e:	2a03      	cmp	r2, #3
 8002970:	d903      	bls.n	800297a <HAL_GPIO_Init+0x14a>
 8002972:	21ec      	movs	r1, #236	; 0xec
 8002974:	4855      	ldr	r0, [pc, #340]	; (8002acc <HAL_GPIO_Init+0x29c>)
 8002976:	f7fe f9e4 	bl	8000d42 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 800297a:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800297c:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800297e:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002980:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002984:	fa02 f20b 	lsl.w	r2, r2, fp
 8002988:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 800298a:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 800298c:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800298e:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002992:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002996:	40b3      	lsls	r3, r6
 8002998:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800299a:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 800299c:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299e:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a0:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	68ab      	ldr	r3, [r5, #8]
 80029a6:	fa03 f30b 	lsl.w	r3, r3, fp
 80029aa:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80029ae:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b0:	00c3      	lsls	r3, r0, #3
 80029b2:	d572      	bpl.n	8002a9a <HAL_GPIO_Init+0x26a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <HAL_GPIO_Init+0x2a8>)
 80029b6:	2300      	movs	r3, #0
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80029bc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80029c0:	6451      	str	r1, [r2, #68]	; 0x44
 80029c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029c4:	f026 0103 	bic.w	r1, r6, #3
 80029c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80029cc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029d0:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80029d4:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d6:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80029dc:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f20e 	lsl.w	r2, r2, lr
 80029ea:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	4a36      	ldr	r2, [pc, #216]	; (8002ac8 <HAL_GPIO_Init+0x298>)
 80029f0:	4294      	cmp	r4, r2
 80029f2:	d027      	beq.n	8002a44 <HAL_GPIO_Init+0x214>
 80029f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029f8:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80029fc:	429c      	cmp	r4, r3
 80029fe:	d053      	beq.n	8002aa8 <HAL_GPIO_Init+0x278>
 8002a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a04:	429c      	cmp	r4, r3
 8002a06:	d051      	beq.n	8002aac <HAL_GPIO_Init+0x27c>
 8002a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	d04f      	beq.n	8002ab0 <HAL_GPIO_Init+0x280>
 8002a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a14:	429c      	cmp	r4, r3
 8002a16:	d04d      	beq.n	8002ab4 <HAL_GPIO_Init+0x284>
 8002a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a1c:	429c      	cmp	r4, r3
 8002a1e:	d04b      	beq.n	8002ab8 <HAL_GPIO_Init+0x288>
 8002a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a24:	429c      	cmp	r4, r3
 8002a26:	d049      	beq.n	8002abc <HAL_GPIO_Init+0x28c>
 8002a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	d047      	beq.n	8002ac0 <HAL_GPIO_Init+0x290>
 8002a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d045      	beq.n	8002ac4 <HAL_GPIO_Init+0x294>
 8002a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a3c:	429c      	cmp	r4, r3
 8002a3e:	bf14      	ite	ne
 8002a40:	230a      	movne	r3, #10
 8002a42:	2309      	moveq	r3, #9
 8002a44:	fa03 f30e 	lsl.w	r3, r3, lr
 8002a48:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8002a4e:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a56:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8002a58:	bf54      	ite	pl
 8002a5a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002a5c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 8002a60:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8002a64:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a68:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	bf54      	ite	pl
 8002a6c:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002a6e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 8002a72:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7a:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	bf54      	ite	pl
 8002a7e:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002a80:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 8002a84:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 8002a88:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a8c:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	bf54      	ite	pl
 8002a90:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8002a92:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 8002a96:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	3601      	adds	r6, #1
 8002a9c:	2e10      	cmp	r6, #16
 8002a9e:	f47f af29 	bne.w	80028f4 <HAL_GPIO_Init+0xc4>
      }
    }
  }
}
 8002aa2:	b003      	add	sp, #12
 8002aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e7cb      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e7c9      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e7c7      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e7c5      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002ab8:	2305      	movs	r3, #5
 8002aba:	e7c3      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002abc:	2306      	movs	r3, #6
 8002abe:	e7c1      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	e7bf      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	e7bd      	b.n	8002a44 <HAL_GPIO_Init+0x214>
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	0800837b 	.word	0x0800837b
 8002ad0:	10110000 	.word	0x10110000
 8002ad4:	10220000 	.word	0x10220000
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_GPIO_DeInit+0x184>)
 8002ae6:	4298      	cmp	r0, r3
{
 8002ae8:	4604      	mov	r4, r0
 8002aea:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002aec:	d02c      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d028      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d024      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b02:	4298      	cmp	r0, r3
 8002b04:	d020      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	d01c      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b12:	4298      	cmp	r0, r3
 8002b14:	d018      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b1a:	4298      	cmp	r0, r3
 8002b1c:	d014      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b22:	4298      	cmp	r0, r3
 8002b24:	d010      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2a:	4298      	cmp	r0, r3
 8002b2c:	d00c      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b32:	4298      	cmp	r0, r3
 8002b34:	d008      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d004      	beq.n	8002b48 <HAL_GPIO_DeInit+0x68>
 8002b3e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002b42:	4849      	ldr	r0, [pc, #292]	; (8002c68 <HAL_GPIO_DeInit+0x188>)
 8002b44:	f7fe f8fd 	bl	8000d42 <assert_failed>
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b48:	4d48      	ldr	r5, [pc, #288]	; (8002c6c <HAL_GPIO_DeInit+0x18c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b4a:	f8df a124 	ldr.w	sl, [pc, #292]	; 8002c70 <HAL_GPIO_DeInit+0x190>
 8002b4e:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002c74 <HAL_GPIO_DeInit+0x194>
{
 8002b52:	2100      	movs	r1, #0
    ioposition = 0x01U << position;
 8002b54:	f04f 0901 	mov.w	r9, #1
 8002b58:	fa09 f201 	lsl.w	r2, r9, r1
    if(iocurrent == ioposition)
 8002b5c:	ea32 0308 	bics.w	r3, r2, r8
 8002b60:	d168      	bne.n	8002c34 <HAL_GPIO_DeInit+0x154>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	2303      	movs	r3, #3
 8002b64:	fa01 f009 	lsl.w	r0, r1, r9
 8002b68:	6826      	ldr	r6, [r4, #0]
 8002b6a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b6e:	43c0      	mvns	r0, r0
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b70:	fa21 fe03 	lsr.w	lr, r1, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b74:	4006      	ands	r6, r0
 8002b76:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8002b7a:	6026      	str	r6, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7c:	f001 0707 	and.w	r7, r1, #7
 8002b80:	f8de c020 	ldr.w	ip, [lr, #32]
 8002b84:	260f      	movs	r6, #15
 8002b86:	00bf      	lsls	r7, r7, #2
 8002b88:	fa06 f707 	lsl.w	r7, r6, r7
 8002b8c:	ea2c 0707 	bic.w	r7, ip, r7
 8002b90:	f8ce 7020 	str.w	r7, [lr, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b94:	68a7      	ldr	r7, [r4, #8]
 8002b96:	4007      	ands	r7, r0
 8002b98:	60a7      	str	r7, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9a:	6867      	ldr	r7, [r4, #4]
 8002b9c:	43d2      	mvns	r2, r2
 8002b9e:	4017      	ands	r7, r2
 8002ba0:	6067      	str	r7, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	68e7      	ldr	r7, [r4, #12]
 8002ba4:	4038      	ands	r0, r7
 8002ba6:	60e0      	str	r0, [r4, #12]
 8002ba8:	f021 0003 	bic.w	r0, r1, #3
 8002bac:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002bb0:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bb4:	ea01 0703 	and.w	r7, r1, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_GPIO_DeInit+0x184>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	f8d0 e008 	ldr.w	lr, [r0, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bbe:	00bf      	lsls	r7, r7, #2
 8002bc0:	40be      	lsls	r6, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bc2:	429c      	cmp	r4, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bc4:	ea0e 0e06 	and.w	lr, lr, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bc8:	d039      	beq.n	8002c3e <HAL_GPIO_DeInit+0x15e>
 8002bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	d037      	beq.n	8002c42 <HAL_GPIO_DeInit+0x162>
 8002bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd6:	429c      	cmp	r4, r3
 8002bd8:	d035      	beq.n	8002c46 <HAL_GPIO_DeInit+0x166>
 8002bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bde:	429c      	cmp	r4, r3
 8002be0:	d033      	beq.n	8002c4a <HAL_GPIO_DeInit+0x16a>
 8002be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002be6:	429c      	cmp	r4, r3
 8002be8:	d031      	beq.n	8002c4e <HAL_GPIO_DeInit+0x16e>
 8002bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bee:	429c      	cmp	r4, r3
 8002bf0:	d02f      	beq.n	8002c52 <HAL_GPIO_DeInit+0x172>
 8002bf2:	4554      	cmp	r4, sl
 8002bf4:	d02f      	beq.n	8002c56 <HAL_GPIO_DeInit+0x176>
 8002bf6:	455c      	cmp	r4, fp
 8002bf8:	d02f      	beq.n	8002c5a <HAL_GPIO_DeInit+0x17a>
 8002bfa:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002bfe:	429c      	cmp	r4, r3
 8002c00:	d02d      	beq.n	8002c5e <HAL_GPIO_DeInit+0x17e>
 8002c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c06:	429c      	cmp	r4, r3
 8002c08:	bf0c      	ite	eq
 8002c0a:	2309      	moveq	r3, #9
 8002c0c:	230a      	movne	r3, #10
 8002c0e:	40bb      	lsls	r3, r7
 8002c10:	459e      	cmp	lr, r3
 8002c12:	d10f      	bne.n	8002c34 <HAL_GPIO_DeInit+0x154>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c14:	6883      	ldr	r3, [r0, #8]
 8002c16:	ea23 0606 	bic.w	r6, r3, r6
 8002c1a:	6086      	str	r6, [r0, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c22:	686b      	ldr	r3, [r5, #4]
 8002c24:	4013      	ands	r3, r2
 8002c26:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c28:	68ab      	ldr	r3, [r5, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c2e:	68eb      	ldr	r3, [r5, #12]
 8002c30:	401a      	ands	r2, r3
 8002c32:	60ea      	str	r2, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c34:	3101      	adds	r1, #1
 8002c36:	2910      	cmp	r1, #16
 8002c38:	d18c      	bne.n	8002b54 <HAL_GPIO_DeInit+0x74>
      }
    }
  }
}
 8002c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e7e5      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c42:	464b      	mov	r3, r9
 8002c44:	e7e3      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e7e1      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e7df      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e7dd      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e7db      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c56:	2306      	movs	r3, #6
 8002c58:	e7d9      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e7d7      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	e7d5      	b.n	8002c0e <HAL_GPIO_DeInit+0x12e>
 8002c62:	bf00      	nop
 8002c64:	40020000 	.word	0x40020000
 8002c68:	0800837b 	.word	0x0800837b
 8002c6c:	40013c00 	.word	0x40013c00
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40021c00 	.word	0x40021c00

08002c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	b921      	cbnz	r1, 8002c8a <HAL_GPIO_ReadPin+0x12>
 8002c80:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c84:	4804      	ldr	r0, [pc, #16]	; (8002c98 <HAL_GPIO_ReadPin+0x20>)
 8002c86:	f7fe f85c 	bl	8000d42 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c8a:	692b      	ldr	r3, [r5, #16]
 8002c8c:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002c8e:	bf14      	ite	ne
 8002c90:	2001      	movne	r0, #1
 8002c92:	2000      	moveq	r0, #0
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop
 8002c98:	0800837b 	.word	0x0800837b

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	4605      	mov	r5, r0
 8002ca0:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	b921      	cbnz	r1, 8002cb0 <HAL_GPIO_WritePin+0x14>
 8002ca6:	f240 11b1 	movw	r1, #433	; 0x1b1
 8002caa:	4808      	ldr	r0, [pc, #32]	; (8002ccc <HAL_GPIO_WritePin+0x30>)
 8002cac:	f7fe f849 	bl	8000d42 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002cb0:	2e01      	cmp	r6, #1
 8002cb2:	d906      	bls.n	8002cc2 <HAL_GPIO_WritePin+0x26>
 8002cb4:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8002cb8:	4804      	ldr	r0, [pc, #16]	; (8002ccc <HAL_GPIO_WritePin+0x30>)
 8002cba:	f7fe f842 	bl	8000d42 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cbe:	61ac      	str	r4, [r5, #24]
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	d1fb      	bne.n	8002cbe <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	0424      	lsls	r4, r4, #16
 8002cc8:	e7f9      	b.n	8002cbe <HAL_GPIO_WritePin+0x22>
 8002cca:	bf00      	nop
 8002ccc:	0800837b 	.word	0x0800837b

08002cd0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	b921      	cbnz	r1, 8002ce2 <HAL_GPIO_TogglePin+0x12>
 8002cd8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <HAL_GPIO_TogglePin+0x1c>)
 8002cde:	f7fe f830 	bl	8000d42 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8002ce2:	696b      	ldr	r3, [r5, #20]
 8002ce4:	405c      	eors	r4, r3
 8002ce6:	616c      	str	r4, [r5, #20]
 8002ce8:	bd38      	pop	{r3, r4, r5, pc}
 8002cea:	bf00      	nop
 8002cec:	0800837b 	.word	0x0800837b

08002cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002cf4:	6959      	ldr	r1, [r3, #20]
 8002cf6:	4201      	tst	r1, r0
 8002cf8:	d002      	beq.n	8002d00 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cfa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cfc:	f003 fe2c 	bl	8006958 <HAL_GPIO_EXTI_Callback>
 8002d00:	bd08      	pop	{r3, pc}
 8002d02:	bf00      	nop
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d08:	6802      	ldr	r2, [r0, #0]
 8002d0a:	6953      	ldr	r3, [r2, #20]
 8002d0c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002d10:	d00d      	beq.n	8002d2e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d12:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002d16:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8002d1c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8002d26:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	4770      	bx	lr
  }
  return HAL_OK;
 8002d2e:	4618      	mov	r0, r3
}
 8002d30:	4770      	bx	lr

08002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002d32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d36:	4604      	mov	r4, r0
 8002d38:	4617      	mov	r7, r2
 8002d3a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002d40:	b28e      	uxth	r6, r1
 8002d42:	6825      	ldr	r5, [r4, #0]
 8002d44:	f1b8 0f01 	cmp.w	r8, #1
 8002d48:	bf0c      	ite	eq
 8002d4a:	696b      	ldreq	r3, [r5, #20]
 8002d4c:	69ab      	ldrne	r3, [r5, #24]
 8002d4e:	ea36 0303 	bics.w	r3, r6, r3
 8002d52:	bf14      	ite	ne
 8002d54:	2001      	movne	r0, #1
 8002d56:	2000      	moveq	r0, #0
 8002d58:	b908      	cbnz	r0, 8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8002d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d5e:	696b      	ldr	r3, [r5, #20]
 8002d60:	055a      	lsls	r2, r3, #21
 8002d62:	d512      	bpl.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002d70:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d72:	2304      	movs	r3, #4
 8002d74:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002d76:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8002d7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8002d80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
 8002d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002d8a:	1c7b      	adds	r3, r7, #1
 8002d8c:	d0d9      	beq.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002d8e:	b94f      	cbnz	r7, 8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d90:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002d92:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d94:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002d96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002d9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8002d9e:	2003      	movs	r0, #3
 8002da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002da4:	f7fe fe4c 	bl	8001a40 <HAL_GetTick>
 8002da8:	eba0 0009 	sub.w	r0, r0, r9
 8002dac:	4287      	cmp	r7, r0
 8002dae:	d2c8      	bcs.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8002db0:	e7ee      	b.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08002db2 <I2C_WaitOnFlagUntilTimeout>:
{
 8002db2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002db6:	9e08      	ldr	r6, [sp, #32]
 8002db8:	4604      	mov	r4, r0
 8002dba:	4690      	mov	r8, r2
 8002dbc:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002dbe:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8002dc2:	b28d      	uxth	r5, r1
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f1b9 0f01 	cmp.w	r9, #1
 8002dca:	bf0c      	ite	eq
 8002dcc:	695b      	ldreq	r3, [r3, #20]
 8002dce:	699b      	ldrne	r3, [r3, #24]
 8002dd0:	ea35 0303 	bics.w	r3, r5, r3
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	4543      	cmp	r3, r8
 8002ddc:	d002      	beq.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8002dde:	2000      	movs	r0, #0
}
 8002de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002de4:	1c7b      	adds	r3, r7, #1
 8002de6:	d0ed      	beq.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002de8:	b95f      	cbnz	r7, 8002e02 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002dea:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002dec:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002df0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002df4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002df8:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002e02:	f7fe fe1d 	bl	8001a40 <HAL_GetTick>
 8002e06:	1b80      	subs	r0, r0, r6
 8002e08:	4287      	cmp	r7, r0
 8002e0a:	d2db      	bcs.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x12>
 8002e0c:	e7ed      	b.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x38>

08002e0e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8002e0e:	b570      	push	{r4, r5, r6, lr}
 8002e10:	4604      	mov	r4, r0
 8002e12:	460d      	mov	r5, r1
 8002e14:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	d501      	bpl.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8002e1e:	2000      	movs	r0, #0
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ff70 	bl	8002d08 <I2C_IsAcknowledgeFailed>
 8002e28:	b9a8      	cbnz	r0, 8002e56 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002e2a:	1c6a      	adds	r2, r5, #1
 8002e2c:	d0f3      	beq.n	8002e16 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e2e:	b965      	cbnz	r5, 8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8002e38:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002e3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002e42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002e46:	2003      	movs	r0, #3
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e4a:	f7fe fdf9 	bl	8001a40 <HAL_GetTick>
 8002e4e:	1b80      	subs	r0, r0, r6
 8002e50:	4285      	cmp	r5, r0
 8002e52:	d2e0      	bcs.n	8002e16 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8002e54:	e7ec      	b.n	8002e30 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
}
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e5c <I2C_RequestMemoryWrite>:
{
 8002e5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002e60:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e62:	6802      	ldr	r2, [r0, #0]
{
 8002e64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002e66:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]
{
 8002e70:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e72:	9600      	str	r6, [sp, #0]
 8002e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e76:	2200      	movs	r2, #0
 8002e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002e7c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7e:	f7ff ff98 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	b968      	cbnz	r0, 8002ea0 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e84:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e88:	491c      	ldr	r1, [pc, #112]	; (8002efc <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e8a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002e8e:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e90:	4620      	mov	r0, r4
 8002e92:	4633      	mov	r3, r6
 8002e94:	f7ff ff4d 	bl	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e98:	b130      	cbz	r0, 8002ea8 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d018      	beq.n	8002ed2 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8002ea0:	2003      	movs	r0, #3
}
 8002ea2:	b004      	add	sp, #16
 8002ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	9003      	str	r0, [sp, #12]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	9203      	str	r2, [sp, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb8:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff ffa7 	bl	8002e0e <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec0:	b148      	cbz	r0, 8002ed6 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d1eb      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	e7e5      	b.n	8002ea2 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed6:	f1b8 0f01 	cmp.w	r8, #1
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	d102      	bne.n	8002ee4 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	b2ed      	uxtb	r5, r5
 8002ee0:	611d      	str	r5, [r3, #16]
 8002ee2:	e7de      	b.n	8002ea2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee4:	0a2a      	lsrs	r2, r5, #8
 8002ee6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002eea:	4632      	mov	r2, r6
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff ff8e 	bl	8002e0e <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1e5      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	e7f1      	b.n	8002ede <I2C_RequestMemoryWrite+0x82>
 8002efa:	bf00      	nop
 8002efc:	00010002 	.word	0x00010002

08002f00 <I2C_RequestMemoryRead>:
{
 8002f00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002f04:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002f06:	6803      	ldr	r3, [r0, #0]
{
 8002f08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002f0a:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f1a:	601a      	str	r2, [r3, #0]
{
 8002f1c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1e:	9500      	str	r5, [sp, #0]
 8002f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f22:	2200      	movs	r2, #0
 8002f24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002f28:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2a:	f7ff ff42 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	b980      	cbnz	r0, 8002f52 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f30:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f32:	492f      	ldr	r1, [pc, #188]	; (8002ff0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f34:	b2ff      	uxtb	r7, r7
 8002f36:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8002f3a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	462b      	mov	r3, r5
 8002f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f42:	f7ff fef6 	bl	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f46:	b140      	cbz	r0, 8002f5a <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d101      	bne.n	8002f52 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e000      	b.n	8002f54 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8002f52:	2003      	movs	r0, #3
}
 8002f54:	b004      	add	sp, #16
 8002f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	9003      	str	r0, [sp, #12]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	9203      	str	r2, [sp, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f66:	462a      	mov	r2, r5
 8002f68:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff ff4e 	bl	8002e0e <I2C_WaitOnTXEFlagUntilTimeout>
 8002f72:	b140      	cbz	r0, 8002f86 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1eb      	bne.n	8002f52 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e7e3      	b.n	8002f4e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f86:	f1b8 0f01 	cmp.w	r8, #1
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	d124      	bne.n	8002fd8 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8e:	b2f6      	uxtb	r6, r6
 8002f90:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	462a      	mov	r2, r5
 8002f94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff ff39 	bl	8002e0e <I2C_WaitOnTXEFlagUntilTimeout>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d1e8      	bne.n	8002f74 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fa2:	6821      	ldr	r1, [r4, #0]
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fac:	4620      	mov	r0, r4
 8002fae:	9500      	str	r5, [sp, #0]
 8002fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb6:	f7ff fefc 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d1c9      	bne.n	8002f52 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fbe:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fc2:	490b      	ldr	r1, [pc, #44]	; (8002ff0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fc4:	f047 0701 	orr.w	r7, r7, #1
 8002fc8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fca:	4620      	mov	r0, r4
 8002fcc:	462b      	mov	r3, r5
 8002fce:	f7ff feb0 	bl	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d1b8      	bne.n	8002f48 <I2C_RequestMemoryRead+0x48>
 8002fd6:	e7bd      	b.n	8002f54 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd8:	0a32      	lsrs	r2, r6, #8
 8002fda:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002fde:	462a      	mov	r2, r5
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7ff ff14 	bl	8002e0e <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d1c4      	bne.n	8002f74 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	e7cf      	b.n	8002f8e <I2C_RequestMemoryRead+0x8e>
 8002fee:	bf00      	nop
 8002ff0:	00010002 	.word	0x00010002

08002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	460d      	mov	r5, r1
 8002ffa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	6943      	ldr	r3, [r0, #20]
 8003000:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003004:	d001      	beq.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003006:	2000      	movs	r0, #0
}
 8003008:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800300a:	6942      	ldr	r2, [r0, #20]
 800300c:	06d2      	lsls	r2, r2, #27
 800300e:	d50b      	bpl.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8003016:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800301a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800301e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8003022:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8003026:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003028:	b95d      	cbnz	r5, 8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800302c:	f043 0320 	orr.w	r3, r3, #32
 8003030:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8003032:	2320      	movs	r3, #32
 8003034:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8003038:	2300      	movs	r3, #0
 800303a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800303e:	2003      	movs	r0, #3
 8003040:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003042:	f7fe fcfd 	bl	8001a40 <HAL_GetTick>
 8003046:	1b80      	subs	r0, r0, r6
 8003048:	4285      	cmp	r5, r0
 800304a:	d2d7      	bcs.n	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800304c:	e7ed      	b.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800304e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800304e:	b570      	push	{r4, r5, r6, lr}
 8003050:	4604      	mov	r4, r0
 8003052:	460d      	mov	r5, r1
 8003054:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	075b      	lsls	r3, r3, #29
 800305c:	d501      	bpl.n	8003062 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800305e:	2000      	movs	r0, #0
 8003060:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003062:	4620      	mov	r0, r4
 8003064:	f7ff fe50 	bl	8002d08 <I2C_IsAcknowledgeFailed>
 8003068:	b9a8      	cbnz	r0, 8003096 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800306a:	1c6a      	adds	r2, r5, #1
 800306c:	d0f3      	beq.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800306e:	b965      	cbnz	r5, 800308a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003072:	f043 0320 	orr.w	r3, r3, #32
 8003076:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8003078:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	2300      	movs	r3, #0
 800307c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800307e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8003082:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003086:	2003      	movs	r0, #3
 8003088:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800308a:	f7fe fcd9 	bl	8001a40 <HAL_GetTick>
 800308e:	1b80      	subs	r0, r0, r6
 8003090:	4285      	cmp	r5, r0
 8003092:	d2e0      	bcs.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8003094:	e7ec      	b.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8003096:	2001      	movs	r0, #1
}
 8003098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800309c <HAL_I2C_Init>:
{
 800309c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800309e:	4604      	mov	r4, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	f000 80c1 	beq.w	8003228 <HAL_I2C_Init+0x18c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030a6:	6803      	ldr	r3, [r0, #0]
 80030a8:	4a60      	ldr	r2, [pc, #384]	; (800322c <HAL_I2C_Init+0x190>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00c      	beq.n	80030c8 <HAL_I2C_Init+0x2c>
 80030ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d008      	beq.n	80030c8 <HAL_I2C_Init+0x2c>
 80030b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_I2C_Init+0x2c>
 80030be:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80030c2:	485b      	ldr	r0, [pc, #364]	; (8003230 <HAL_I2C_Init+0x194>)
 80030c4:	f7fd fe3d 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <HAL_I2C_Init+0x198>)
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d904      	bls.n	80030dc <HAL_I2C_Init+0x40>
 80030d2:	f240 1171 	movw	r1, #369	; 0x171
 80030d6:	4856      	ldr	r0, [pc, #344]	; (8003230 <HAL_I2C_Init+0x194>)
 80030d8:	f7fd fe33 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80030dc:	68a3      	ldr	r3, [r4, #8]
 80030de:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80030e2:	d004      	beq.n	80030ee <HAL_I2C_Init+0x52>
 80030e4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80030e8:	4851      	ldr	r0, [pc, #324]	; (8003230 <HAL_I2C_Init+0x194>)
 80030ea:	f7fd fe2a 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f4:	f023 0303 	bic.w	r3, r3, #3
 80030f8:	b123      	cbz	r3, 8003104 <HAL_I2C_Init+0x68>
 80030fa:	f240 1173 	movw	r1, #371	; 0x173
 80030fe:	484c      	ldr	r0, [pc, #304]	; (8003230 <HAL_I2C_Init+0x194>)
 8003100:	f7fd fe1f 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003104:	6923      	ldr	r3, [r4, #16]
 8003106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800310a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310e:	d004      	beq.n	800311a <HAL_I2C_Init+0x7e>
 8003110:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003114:	4846      	ldr	r0, [pc, #280]	; (8003230 <HAL_I2C_Init+0x194>)
 8003116:	f7fd fe14 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800311a:	6963      	ldr	r3, [r4, #20]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d904      	bls.n	800312a <HAL_I2C_Init+0x8e>
 8003120:	f240 1175 	movw	r1, #373	; 0x175
 8003124:	4842      	ldr	r0, [pc, #264]	; (8003230 <HAL_I2C_Init+0x194>)
 8003126:	f7fd fe0c 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800312a:	69a3      	ldr	r3, [r4, #24]
 800312c:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8003130:	d004      	beq.n	800313c <HAL_I2C_Init+0xa0>
 8003132:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8003136:	483e      	ldr	r0, [pc, #248]	; (8003230 <HAL_I2C_Init+0x194>)
 8003138:	f7fd fe03 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800313c:	69e3      	ldr	r3, [r4, #28]
 800313e:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8003142:	d004      	beq.n	800314e <HAL_I2C_Init+0xb2>
 8003144:	f240 1177 	movw	r1, #375	; 0x177
 8003148:	4839      	ldr	r0, [pc, #228]	; (8003230 <HAL_I2C_Init+0x194>)
 800314a:	f7fd fdfa 	bl	8000d42 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800314e:	6a23      	ldr	r3, [r4, #32]
 8003150:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8003154:	d004      	beq.n	8003160 <HAL_I2C_Init+0xc4>
 8003156:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800315a:	4835      	ldr	r0, [pc, #212]	; (8003230 <HAL_I2C_Init+0x194>)
 800315c:	f7fd fdf1 	bl	8000d42 <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003160:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003164:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003168:	b923      	cbnz	r3, 8003174 <HAL_I2C_Init+0xd8>
    hi2c->Lock = HAL_UNLOCKED;
 800316a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800316e:	4620      	mov	r0, r4
 8003170:	f7fd fb9e 	bl	80008b0 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8003174:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003176:	4e30      	ldr	r6, [pc, #192]	; (8003238 <HAL_I2C_Init+0x19c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003178:	4d30      	ldr	r5, [pc, #192]	; (800323c <HAL_I2C_Init+0x1a0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 800317a:	2324      	movs	r3, #36	; 0x24
 800317c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003180:	6813      	ldr	r3, [r2, #0]
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003188:	f001 f85a 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800318c:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 800318e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003190:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003194:	42b3      	cmp	r3, r6
 8003196:	bf84      	itt	hi
 8003198:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800319c:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 800319e:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80031a0:	bf91      	iteee	ls
 80031a2:	1c69      	addls	r1, r5, #1
 80031a4:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80031a8:	fbb1 f1f5 	udivhi	r1, r1, r5
 80031ac:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80031ae:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80031b0:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80031b2:	d821      	bhi.n	80031f8 <HAL_I2C_Init+0x15c>
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80031ba:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80031be:	2b03      	cmp	r3, #3
 80031c0:	bf98      	it	ls
 80031c2:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031c4:	6a21      	ldr	r1, [r4, #32]
 80031c6:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80031c8:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80031ce:	68e1      	ldr	r1, [r4, #12]
 80031d0:	6923      	ldr	r3, [r4, #16]
 80031d2:	430b      	orrs	r3, r1
 80031d4:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80031d6:	69a1      	ldr	r1, [r4, #24]
 80031d8:	6963      	ldr	r3, [r4, #20]
 80031da:	430b      	orrs	r3, r1
 80031dc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ea:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80031f8:	68a1      	ldr	r1, [r4, #8]
 80031fa:	b949      	cbnz	r1, 8003210 <HAL_I2C_Init+0x174>
 80031fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003200:	fbb0 f0f3 	udiv	r0, r0, r3
 8003204:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003208:	b163      	cbz	r3, 8003224 <HAL_I2C_Init+0x188>
 800320a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800320e:	e7d9      	b.n	80031c4 <HAL_I2C_Init+0x128>
 8003210:	2119      	movs	r1, #25
 8003212:	434b      	muls	r3, r1
 8003214:	fbb0 f0f3 	udiv	r0, r0, r3
 8003218:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800321c:	b113      	cbz	r3, 8003224 <HAL_I2C_Init+0x188>
 800321e:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8003222:	e7cf      	b.n	80031c4 <HAL_I2C_Init+0x128>
 8003224:	2001      	movs	r0, #1
 8003226:	e7cd      	b.n	80031c4 <HAL_I2C_Init+0x128>
    return HAL_ERROR;
 8003228:	2001      	movs	r0, #1
}
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	40005400 	.word	0x40005400
 8003230:	080083ba 	.word	0x080083ba
 8003234:	00061a7f 	.word	0x00061a7f
 8003238:	000186a0 	.word	0x000186a0
 800323c:	000f4240 	.word	0x000f4240

08003240 <HAL_I2C_Mem_Write>:
{
 8003240:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003244:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003246:	4698      	mov	r8, r3
 8003248:	4604      	mov	r4, r0
 800324a:	4689      	mov	r9, r1
 800324c:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 800324e:	f7fe fbf7 	bl	8001a40 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003252:	f1b8 0f01 	cmp.w	r8, #1
  tickstart = HAL_GetTick();
 8003256:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003258:	d007      	beq.n	800326a <HAL_I2C_Mem_Write+0x2a>
 800325a:	f1b8 0f10 	cmp.w	r8, #16
 800325e:	d004      	beq.n	800326a <HAL_I2C_Mem_Write+0x2a>
 8003260:	f640 116d 	movw	r1, #2413	; 0x96d
 8003264:	4844      	ldr	r0, [pc, #272]	; (8003378 <HAL_I2C_Mem_Write+0x138>)
 8003266:	f7fd fd6c 	bl	8000d42 <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800326a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800326e:	2b20      	cmp	r3, #32
 8003270:	d003      	beq.n	800327a <HAL_I2C_Mem_Write+0x3a>
    return HAL_BUSY;
 8003272:	2002      	movs	r0, #2
}
 8003274:	b002      	add	sp, #8
 8003276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800327a:	9500      	str	r5, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	493e      	ldr	r1, [pc, #248]	; (800337c <HAL_I2C_Mem_Write+0x13c>)
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff fd95 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 8003288:	2800      	cmp	r0, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_I2C_Mem_Write+0x32>
    __HAL_LOCK(hi2c);
 800328c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d0ee      	beq.n	8003272 <HAL_I2C_Mem_Write+0x32>
 8003294:	2301      	movs	r3, #1
 8003296:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80032a0:	bf5e      	ittt	pl
 80032a2:	681a      	ldrpl	r2, [r3, #0]
 80032a4:	f042 0201 	orrpl.w	r2, r2, #1
 80032a8:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b2:	2321      	movs	r3, #33	; 0x21
 80032b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b8:	2340      	movs	r3, #64	; 0x40
 80032ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80032be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032c0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c2:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 80032c4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80032ca:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <HAL_I2C_Mem_Write+0x140>)
 80032ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80032d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032d2:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d4:	9501      	str	r5, [sp, #4]
 80032d6:	9600      	str	r6, [sp, #0]
 80032d8:	4643      	mov	r3, r8
 80032da:	4652      	mov	r2, sl
 80032dc:	4649      	mov	r1, r9
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff fdbc 	bl	8002e5c <I2C_RequestMemoryWrite>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d02a      	beq.n	800333e <HAL_I2C_Mem_Write+0xfe>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032ea:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <HAL_I2C_Mem_Write+0xc2>
        return HAL_ERROR;
 80032f2:	2001      	movs	r0, #1
 80032f4:	e7be      	b.n	8003274 <HAL_I2C_Mem_Write+0x34>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	f7ff fd8a 	bl	8002e0e <I2C_WaitOnTXEFlagUntilTimeout>
 80032fa:	b120      	cbz	r0, 8003306 <HAL_I2C_Mem_Write+0xc6>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d034      	beq.n	800336c <HAL_I2C_Mem_Write+0x12c>
          return HAL_TIMEOUT;
 8003302:	2003      	movs	r0, #3
 8003304:	e7b6      	b.n	8003274 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003306:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003308:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 800330a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800330c:	1c4b      	adds	r3, r1, #1
 800330e:	6263      	str	r3, [r4, #36]	; 0x24
 8003310:	780b      	ldrb	r3, [r1, #0]
 8003312:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8003314:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003316:	3b01      	subs	r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800331c:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 800331e:	1e50      	subs	r0, r2, #1
 8003320:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003322:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8003324:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003326:	d50a      	bpl.n	800333e <HAL_I2C_Mem_Write+0xfe>
 8003328:	b148      	cbz	r0, 800333e <HAL_I2C_Mem_Write+0xfe>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800332a:	1c8b      	adds	r3, r1, #2
 800332c:	6263      	str	r3, [r4, #36]	; 0x24
 800332e:	784b      	ldrb	r3, [r1, #1]
 8003330:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8003332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003334:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8003336:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8003338:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800333a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800333c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800333e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	462a      	mov	r2, r5
 8003342:	4631      	mov	r1, r6
 8003344:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1d5      	bne.n	80032f6 <HAL_I2C_Mem_Write+0xb6>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	f7ff fe80 	bl	800304e <I2C_WaitOnBTFFlagUntilTimeout>
 800334e:	2800      	cmp	r0, #0
 8003350:	d1d4      	bne.n	80032fc <HAL_I2C_Mem_Write+0xbc>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	2320      	movs	r3, #32
 800335e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003362:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800336a:	e783      	b.n	8003274 <HAL_I2C_Mem_Write+0x34>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800336c:	6822      	ldr	r2, [r4, #0]
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e7bc      	b.n	80032f2 <HAL_I2C_Mem_Write+0xb2>
 8003378:	080083ba 	.word	0x080083ba
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000

08003384 <HAL_I2C_Mem_Read>:
{
 8003384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	461d      	mov	r5, r3
 800338c:	4604      	mov	r4, r0
 800338e:	4689      	mov	r9, r1
 8003390:	4692      	mov	sl, r2
 8003392:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8003394:	f7fe fb54 	bl	8001a40 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003398:	2d01      	cmp	r5, #1
  tickstart = HAL_GetTick();
 800339a:	4606      	mov	r6, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800339c:	d006      	beq.n	80033ac <HAL_I2C_Mem_Read+0x28>
 800339e:	2d10      	cmp	r5, #16
 80033a0:	d004      	beq.n	80033ac <HAL_I2C_Mem_Read+0x28>
 80033a2:	f640 11f2 	movw	r1, #2546	; 0x9f2
 80033a6:	4881      	ldr	r0, [pc, #516]	; (80035ac <HAL_I2C_Mem_Read+0x228>)
 80033a8:	f7fd fccb 	bl	8000d42 <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d004      	beq.n	80033be <HAL_I2C_Mem_Read+0x3a>
    return HAL_BUSY;
 80033b4:	2502      	movs	r5, #2
}
 80033b6:	4628      	mov	r0, r5
 80033b8:	b006      	add	sp, #24
 80033ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033be:	9600      	str	r6, [sp, #0]
 80033c0:	2319      	movs	r3, #25
 80033c2:	2201      	movs	r2, #1
 80033c4:	497a      	ldr	r1, [pc, #488]	; (80035b0 <HAL_I2C_Mem_Read+0x22c>)
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7ff fcf3 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d1f1      	bne.n	80033b4 <HAL_I2C_Mem_Read+0x30>
    __HAL_LOCK(hi2c);
 80033d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d0ed      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x30>
 80033d8:	2301      	movs	r3, #1
 80033da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80033e4:	bf5e      	ittt	pl
 80033e6:	681a      	ldrpl	r2, [r3, #0]
 80033e8:	f042 0201 	orrpl.w	r2, r2, #1
 80033ec:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f4:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033f6:	2322      	movs	r3, #34	; 0x22
 80033f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033fc:	2340      	movs	r3, #64	; 0x40
 80033fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8003402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003404:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003406:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 800340a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340e:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003412:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003414:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_I2C_Mem_Read+0x230>)
 8003416:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003418:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800341a:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800341c:	9601      	str	r6, [sp, #4]
 800341e:	462b      	mov	r3, r5
 8003420:	9700      	str	r7, [sp, #0]
 8003422:	4652      	mov	r2, sl
 8003424:	4649      	mov	r1, r9
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff fd6a 	bl	8002f00 <I2C_RequestMemoryRead>
 800342c:	4605      	mov	r5, r0
 800342e:	b130      	cbz	r0, 800343e <HAL_I2C_Mem_Read+0xba>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003430:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003432:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003436:	2b04      	cmp	r3, #4
 8003438:	d13a      	bne.n	80034b0 <HAL_I2C_Mem_Read+0x12c>
              return HAL_ERROR;
 800343a:	2501      	movs	r5, #1
 800343c:	e7bb      	b.n	80033b6 <HAL_I2C_Mem_Read+0x32>
    if(hi2c->XferSize == 0U)
 800343e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	b992      	cbnz	r2, 800346a <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003444:	9002      	str	r0, [sp, #8]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	9202      	str	r2, [sp, #8]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	9202      	str	r2, [sp, #8]
 800344e:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	2320      	movs	r3, #32
 800345a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345e:	2300      	movs	r3, #0
 8003460:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003464:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003468:	e7a5      	b.n	80033b6 <HAL_I2C_Mem_Read+0x32>
    else if(hi2c->XferSize == 1U)
 800346a:	2a01      	cmp	r2, #1
 800346c:	d122      	bne.n	80034b4 <HAL_I2C_Mem_Read+0x130>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003474:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	9003      	str	r0, [sp, #12]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80035b8 <HAL_I2C_Mem_Read+0x234>
    while(hi2c->XferSize > 0U)
 800348e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0e1      	beq.n	8003458 <HAL_I2C_Mem_Read+0xd4>
      if(hi2c->XferSize <= 3U)
 8003494:	2b03      	cmp	r3, #3
 8003496:	d86b      	bhi.n	8003570 <HAL_I2C_Mem_Read+0x1ec>
        if(hi2c->XferSize== 1U)
 8003498:	2b01      	cmp	r3, #1
 800349a:	d123      	bne.n	80034e4 <HAL_I2C_Mem_Read+0x160>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800349c:	4632      	mov	r2, r6
 800349e:	4639      	mov	r1, r7
 80034a0:	4620      	mov	r0, r4
 80034a2:	f7ff fda7 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d039      	beq.n	800351e <HAL_I2C_Mem_Read+0x19a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80034aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d1c4      	bne.n	800343a <HAL_I2C_Mem_Read+0xb6>
              return HAL_TIMEOUT;
 80034b0:	2503      	movs	r5, #3
 80034b2:	e780      	b.n	80033b6 <HAL_I2C_Mem_Read+0x32>
    else if(hi2c->XferSize == 2U)
 80034b4:	2a02      	cmp	r2, #2
 80034b6:	d10e      	bne.n	80034d6 <HAL_I2C_Mem_Read+0x152>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034be:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c8:	9004      	str	r0, [sp, #16]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	9204      	str	r2, [sp, #16]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	9304      	str	r3, [sp, #16]
 80034d2:	9b04      	ldr	r3, [sp, #16]
 80034d4:	e7d9      	b.n	800348a <HAL_I2C_Mem_Read+0x106>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	9005      	str	r0, [sp, #20]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	9205      	str	r2, [sp, #20]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	9305      	str	r3, [sp, #20]
 80034e0:	9b05      	ldr	r3, [sp, #20]
 80034e2:	e7d2      	b.n	800348a <HAL_I2C_Mem_Read+0x106>
        else if(hi2c->XferSize == 2U)
 80034e4:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	9600      	str	r6, [sp, #0]
 80034e8:	463b      	mov	r3, r7
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	4641      	mov	r1, r8
 80034f0:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80034f2:	d122      	bne.n	800353a <HAL_I2C_Mem_Read+0x1b6>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f4:	f7ff fc5d 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d1d9      	bne.n	80034b0 <HAL_I2C_Mem_Read+0x12c>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003504:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003506:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	1c51      	adds	r1, r2, #1
 800350c:	6261      	str	r1, [r4, #36]	; 0x24
 800350e:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8003510:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003516:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003518:	3b01      	subs	r3, #1
 800351a:	b29b      	uxth	r3, r3
 800351c:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800351e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	6262      	str	r2, [r4, #36]	; 0x24
 8003524:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003526:	6912      	ldr	r2, [r2, #16]
 8003528:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800352a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003532:	3b01      	subs	r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003538:	e7a9      	b.n	800348e <HAL_I2C_Mem_Read+0x10a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	f7ff fc3a 	bl	8002db2 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4602      	mov	r2, r0
 8003540:	2800      	cmp	r0, #0
 8003542:	d1b5      	bne.n	80034b0 <HAL_I2C_Mem_Read+0x12c>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800354c:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800354e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	1c48      	adds	r0, r1, #1
 8003554:	6260      	str	r0, [r4, #36]	; 0x24
 8003556:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8003558:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800355c:	3b01      	subs	r3, #1
 800355e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003562:	3b01      	subs	r3, #1
 8003564:	b29b      	uxth	r3, r3
 8003566:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003568:	4641      	mov	r1, r8
 800356a:	463b      	mov	r3, r7
 800356c:	4620      	mov	r0, r4
 800356e:	e7c1      	b.n	80034f4 <HAL_I2C_Mem_Read+0x170>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	4632      	mov	r2, r6
 8003572:	4639      	mov	r1, r7
 8003574:	4620      	mov	r0, r4
 8003576:	f7ff fd3d 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357a:	2800      	cmp	r0, #0
 800357c:	d195      	bne.n	80034aa <HAL_I2C_Mem_Read+0x126>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800357e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	6262      	str	r2, [r4, #36]	; 0x24
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	6912      	ldr	r2, [r2, #16]
 8003588:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800358a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800358c:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800358e:	3b01      	subs	r3, #1
 8003590:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003592:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003594:	3b01      	subs	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800359a:	6953      	ldr	r3, [r2, #20]
 800359c:	075b      	lsls	r3, r3, #29
 800359e:	f57f af76 	bpl.w	800348e <HAL_I2C_Mem_Read+0x10a>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80035a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	6261      	str	r1, [r4, #36]	; 0x24
 80035a8:	e7bd      	b.n	8003526 <HAL_I2C_Mem_Read+0x1a2>
 80035aa:	bf00      	nop
 80035ac:	080083ba 	.word	0x080083ba
 80035b0:	00100002 	.word	0x00100002
 80035b4:	ffff0000 	.word	0xffff0000
 80035b8:	00010004 	.word	0x00010004

080035bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035c0:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035c2:	6804      	ldr	r4, [r0, #0]
 80035c4:	684f      	ldr	r7, [r1, #4]
 80035c6:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035c8:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 80035cc:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035d0:	3284      	adds	r2, #132	; 0x84
 80035d2:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035d4:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035d8:	6858      	ldr	r0, [r3, #4]
 80035da:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80035de:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035e0:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035e2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035e6:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035ea:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035ec:	4430      	add	r0, r6
 80035ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80035f2:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80035f4:	68e0      	ldr	r0, [r4, #12]
 80035f6:	68cd      	ldr	r5, [r1, #12]
 80035f8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80035fc:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80035fe:	6898      	ldr	r0, [r3, #8]
 8003600:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003604:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003606:	68e6      	ldr	r6, [r4, #12]
 8003608:	6888      	ldr	r0, [r1, #8]
 800360a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800360e:	3001      	adds	r0, #1
 8003610:	4430      	add	r0, r6
 8003612:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003616:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003618:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800361a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800361c:	f020 0007 	bic.w	r0, r0, #7
 8003620:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003622:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003626:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003628:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800362a:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800362e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003632:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003636:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800363a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800363e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003642:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003646:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003648:	6958      	ldr	r0, [r3, #20]
 800364a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800364e:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003650:	6948      	ldr	r0, [r1, #20]
 8003652:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003654:	69d8      	ldr	r0, [r3, #28]
 8003656:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800365a:	f020 0007 	bic.w	r0, r0, #7
 800365e:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003660:	6a08      	ldr	r0, [r1, #32]
 8003662:	69cd      	ldr	r5, [r1, #28]
 8003664:	4305      	orrs	r5, r0
 8003666:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003668:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800366a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800366c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003670:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003672:	b31e      	cbz	r6, 80036bc <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003674:	2e01      	cmp	r6, #1
 8003676:	d023      	beq.n	80036c0 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003678:	1eb0      	subs	r0, r6, #2
 800367a:	2802      	cmp	r0, #2
 800367c:	d922      	bls.n	80036c4 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800367e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003680:	bf0c      	ite	eq
 8003682:	2002      	moveq	r0, #2
 8003684:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003686:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003688:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800368c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800368e:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003690:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003692:	eba7 070e 	sub.w	r7, r7, lr
 8003696:	4345      	muls	r5, r0
 8003698:	4378      	muls	r0, r7
 800369a:	3003      	adds	r0, #3
 800369c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80036a0:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80036a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036a4:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80036a8:	f020 0007 	bic.w	r0, r0, #7
 80036ac:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80036ae:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80036b0:	58a3      	ldr	r3, [r4, r2]
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	50a3      	str	r3, [r4, r2]
 80036b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80036bc:	2004      	movs	r0, #4
 80036be:	e7e2      	b.n	8003686 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80036c0:	2003      	movs	r0, #3
 80036c2:	e7e0      	b.n	8003686 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80036c4:	2002      	movs	r0, #2
 80036c6:	e7de      	b.n	8003686 <LTDC_SetConfig+0xca>

080036c8 <HAL_LTDC_Init>:
{
 80036c8:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80036ca:	4604      	mov	r4, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f000 80cd 	beq.w	800386c <HAL_LTDC_Init+0x1a4>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 80036d2:	6802      	ldr	r2, [r0, #0]
 80036d4:	4b66      	ldr	r3, [pc, #408]	; (8003870 <HAL_LTDC_Init+0x1a8>)
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d003      	beq.n	80036e2 <HAL_LTDC_Init+0x1a>
 80036da:	21a8      	movs	r1, #168	; 0xa8
 80036dc:	4865      	ldr	r0, [pc, #404]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 80036de:	f7fd fb30 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 80036e2:	6963      	ldr	r3, [r4, #20]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	d303      	bcc.n	80036f2 <HAL_LTDC_Init+0x2a>
 80036ea:	21a9      	movs	r1, #169	; 0xa9
 80036ec:	4861      	ldr	r0, [pc, #388]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 80036ee:	f7fd fb28 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 80036f2:	69a3      	ldr	r3, [r4, #24]
 80036f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f8:	d303      	bcc.n	8003702 <HAL_LTDC_Init+0x3a>
 80036fa:	21aa      	movs	r1, #170	; 0xaa
 80036fc:	485d      	ldr	r0, [pc, #372]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 80036fe:	f7fd fb20 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8003702:	69e3      	ldr	r3, [r4, #28]
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	d303      	bcc.n	8003712 <HAL_LTDC_Init+0x4a>
 800370a:	21ab      	movs	r1, #171	; 0xab
 800370c:	4859      	ldr	r0, [pc, #356]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800370e:	f7fd fb18 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 8003712:	6a23      	ldr	r3, [r4, #32]
 8003714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003718:	d303      	bcc.n	8003722 <HAL_LTDC_Init+0x5a>
 800371a:	21ac      	movs	r1, #172	; 0xac
 800371c:	4855      	ldr	r0, [pc, #340]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800371e:	f7fd fb10 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8003722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003728:	d303      	bcc.n	8003732 <HAL_LTDC_Init+0x6a>
 800372a:	21ad      	movs	r1, #173	; 0xad
 800372c:	4851      	ldr	r0, [pc, #324]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800372e:	f7fd fb08 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 8003732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d303      	bcc.n	8003742 <HAL_LTDC_Init+0x7a>
 800373a:	21ae      	movs	r1, #174	; 0xae
 800373c:	484d      	ldr	r0, [pc, #308]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800373e:	f7fd fb00 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 8003742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003748:	d303      	bcc.n	8003752 <HAL_LTDC_Init+0x8a>
 800374a:	21af      	movs	r1, #175	; 0xaf
 800374c:	4849      	ldr	r0, [pc, #292]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800374e:	f7fd faf8 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d303      	bcc.n	8003762 <HAL_LTDC_Init+0x9a>
 800375a:	21b0      	movs	r1, #176	; 0xb0
 800375c:	4845      	ldr	r0, [pc, #276]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800375e:	f7fd faf0 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8003762:	6863      	ldr	r3, [r4, #4]
 8003764:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8003768:	d003      	beq.n	8003772 <HAL_LTDC_Init+0xaa>
 800376a:	21b1      	movs	r1, #177	; 0xb1
 800376c:	4841      	ldr	r0, [pc, #260]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800376e:	f7fd fae8 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8003778:	d003      	beq.n	8003782 <HAL_LTDC_Init+0xba>
 800377a:	21b2      	movs	r1, #178	; 0xb2
 800377c:	483d      	ldr	r0, [pc, #244]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800377e:	f7fd fae0 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003782:	68e3      	ldr	r3, [r4, #12]
 8003784:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 8003788:	d003      	beq.n	8003792 <HAL_LTDC_Init+0xca>
 800378a:	21b3      	movs	r1, #179	; 0xb3
 800378c:	4839      	ldr	r0, [pc, #228]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800378e:	f7fd fad8 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8003798:	d003      	beq.n	80037a2 <HAL_LTDC_Init+0xda>
 800379a:	21b4      	movs	r1, #180	; 0xb4
 800379c:	4835      	ldr	r0, [pc, #212]	; (8003874 <HAL_LTDC_Init+0x1ac>)
 800379e:	f7fd fad0 	bl	8000d42 <assert_failed>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80037a2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 80037a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037aa:	b923      	cbnz	r3, 80037b6 <HAL_LTDC_Init+0xee>
    hltdc->Lock = HAL_UNLOCKED;
 80037ac:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fd f90f 	bl	80009d4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037bc:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037be:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80037c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037c8:	6862      	ldr	r2, [r4, #4]
 80037ca:	6999      	ldr	r1, [r3, #24]
 80037cc:	4302      	orrs	r2, r0
 80037ce:	68e0      	ldr	r0, [r4, #12]
 80037d0:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037d2:	6920      	ldr	r0, [r4, #16]
 80037d4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4926      	ldr	r1, [pc, #152]	; (8003878 <HAL_LTDC_Init+0x1b0>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037de:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037e0:	400a      	ands	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80037ea:	69a0      	ldr	r0, [r4, #24]
 80037ec:	4302      	orrs	r2, r0
 80037ee:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037f0:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80037f2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037f4:	400a      	ands	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80037fe:	6a20      	ldr	r0, [r4, #32]
 8003800:	4302      	orrs	r2, r0
 8003802:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003804:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003806:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003808:	400a      	ands	r2, r1
 800380a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003814:	4302      	orrs	r2, r0
 8003816:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	4011      	ands	r1, r2
 800381c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800381e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003820:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003822:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003826:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003828:	430a      	orrs	r2, r1
 800382a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800382c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800382e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003832:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003836:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800383a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800383c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800383e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003842:	430a      	orrs	r2, r1
 8003844:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003848:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800384e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003850:	f042 0206 	orr.w	r2, r2, #6
 8003854:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800385e:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003860:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003862:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003866:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800386a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800386c:	2001      	movs	r0, #1
}
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	40016800 	.word	0x40016800
 8003874:	080083f8 	.word	0x080083f8
 8003878:	f000f800 	.word	0xf000f800

0800387c <HAL_LTDC_ErrorCallback>:
 800387c:	4770      	bx	lr

0800387e <HAL_LTDC_LineEventCallback>:
 800387e:	4770      	bx	lr

08003880 <HAL_LTDC_ReloadEventCallback>:
{
 8003880:	4770      	bx	lr

08003882 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003882:	6803      	ldr	r3, [r0, #0]
{
 8003884:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003886:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003888:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 800388a:	0772      	lsls	r2, r6, #29
{
 800388c:	4604      	mov	r4, r0
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 800388e:	d514      	bpl.n	80038ba <HAL_LTDC_IRQHandler+0x38>
 8003890:	0769      	lsls	r1, r5, #29
 8003892:	d512      	bpl.n	80038ba <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800389c:	2204      	movs	r2, #4
 800389e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80038a0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80038ac:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80038ae:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80038b2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80038b6:	f7ff ffe1 	bl	800387c <HAL_LTDC_ErrorCallback>
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 80038ba:	07b2      	lsls	r2, r6, #30
 80038bc:	d516      	bpl.n	80038ec <HAL_LTDC_IRQHandler+0x6a>
 80038be:	07ab      	lsls	r3, r5, #30
 80038c0:	d514      	bpl.n	80038ec <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c6:	f022 0202 	bic.w	r2, r2, #2
 80038ca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80038cc:	2202      	movs	r2, #2
 80038ce:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80038d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80038da:	2304      	movs	r3, #4
 80038dc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80038e0:	2300      	movs	r3, #0
 80038e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff ffc8 	bl	800387c <HAL_LTDC_ErrorCallback>
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 80038ec:	07f0      	lsls	r0, r6, #31
 80038ee:	d510      	bpl.n	8003912 <HAL_LTDC_IRQHandler+0x90>
 80038f0:	07e9      	lsls	r1, r5, #31
 80038f2:	d50e      	bpl.n	8003912 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80038fe:	2201      	movs	r2, #1
 8003900:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8003902:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8003904:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003908:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff ffb6 	bl	800387e <HAL_LTDC_LineEventCallback>
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 8003912:	0732      	lsls	r2, r6, #28
 8003914:	d511      	bpl.n	800393a <HAL_LTDC_IRQHandler+0xb8>
 8003916:	072b      	lsls	r3, r5, #28
 8003918:	d50f      	bpl.n	800393a <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391e:	f022 0208 	bic.w	r2, r2, #8
 8003922:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003924:	2208      	movs	r2, #8
 8003926:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003928:	2301      	movs	r3, #1
 800392a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800392e:	2300      	movs	r3, #0
 8003930:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003934:	4620      	mov	r0, r4
 8003936:	f7ff ffa3 	bl	8003880 <HAL_LTDC_ReloadEventCallback>
 800393a:	bd70      	pop	{r4, r5, r6, pc}

0800393c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 800393c:	2a01      	cmp	r2, #1
{   
 800393e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003942:	4607      	mov	r7, r0
 8003944:	460e      	mov	r6, r1
 8003946:	4691      	mov	r9, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003948:	d904      	bls.n	8003954 <HAL_LTDC_ConfigLayer+0x18>
 800394a:	f240 11f1 	movw	r1, #497	; 0x1f1
 800394e:	4847      	ldr	r0, [pc, #284]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003950:	f7fd f9f7 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003954:	6833      	ldr	r3, [r6, #0]
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d304      	bcc.n	8003966 <HAL_LTDC_ConfigLayer+0x2a>
 800395c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8003960:	4842      	ldr	r0, [pc, #264]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003962:	f7fd f9ee 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003966:	6873      	ldr	r3, [r6, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d304      	bcc.n	8003978 <HAL_LTDC_ConfigLayer+0x3c>
 800396e:	f240 11f3 	movw	r1, #499	; 0x1f3
 8003972:	483e      	ldr	r0, [pc, #248]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003974:	f7fd f9e5 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8003978:	68b3      	ldr	r3, [r6, #8]
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	d304      	bcc.n	800398a <HAL_LTDC_ConfigLayer+0x4e>
 8003980:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003984:	4839      	ldr	r0, [pc, #228]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003986:	f7fd f9dc 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 800398a:	68f3      	ldr	r3, [r6, #12]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d304      	bcc.n	800399c <HAL_LTDC_ConfigLayer+0x60>
 8003992:	f240 11f5 	movw	r1, #501	; 0x1f5
 8003996:	4835      	ldr	r0, [pc, #212]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003998:	f7fd f9d3 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 800399c:	6933      	ldr	r3, [r6, #16]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d904      	bls.n	80039ac <HAL_LTDC_ConfigLayer+0x70>
 80039a2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80039a6:	4831      	ldr	r0, [pc, #196]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 80039a8:	f7fd f9cb 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 80039ac:	6973      	ldr	r3, [r6, #20]
 80039ae:	2bff      	cmp	r3, #255	; 0xff
 80039b0:	d904      	bls.n	80039bc <HAL_LTDC_ConfigLayer+0x80>
 80039b2:	f240 11f7 	movw	r1, #503	; 0x1f7
 80039b6:	482d      	ldr	r0, [pc, #180]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 80039b8:	f7fd f9c3 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 80039bc:	69b3      	ldr	r3, [r6, #24]
 80039be:	2bff      	cmp	r3, #255	; 0xff
 80039c0:	d904      	bls.n	80039cc <HAL_LTDC_ConfigLayer+0x90>
 80039c2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80039c6:	4829      	ldr	r0, [pc, #164]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 80039c8:	f7fd f9bb 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 80039cc:	69f3      	ldr	r3, [r6, #28]
 80039ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d004      	beq.n	80039e2 <HAL_LTDC_ConfigLayer+0xa6>
 80039d8:	f240 11f9 	movw	r1, #505	; 0x1f9
 80039dc:	4823      	ldr	r0, [pc, #140]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 80039de:	f7fd f9b0 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 80039e2:	6a33      	ldr	r3, [r6, #32]
 80039e4:	f023 0302 	bic.w	r3, r3, #2
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d004      	beq.n	80039f6 <HAL_LTDC_ConfigLayer+0xba>
 80039ec:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80039f0:	481e      	ldr	r0, [pc, #120]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 80039f2:	f7fd f9a6 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
 80039f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80039f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fc:	d304      	bcc.n	8003a08 <HAL_LTDC_ConfigLayer+0xcc>
 80039fe:	f240 11fb 	movw	r1, #507	; 0x1fb
 8003a02:	481a      	ldr	r0, [pc, #104]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003a04:	f7fd f99d 	bl	8000d42 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8003a08:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0e:	d304      	bcc.n	8003a1a <HAL_LTDC_ConfigLayer+0xde>
 8003a10:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8003a14:	4815      	ldr	r0, [pc, #84]	; (8003a6c <HAL_LTDC_ConfigLayer+0x130>)
 8003a16:	f7fd f994 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hltdc);
 8003a1a:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f04f 0002 	mov.w	r0, #2
 8003a24:	d01f      	beq.n	8003a66 <HAL_LTDC_ConfigLayer+0x12a>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003a26:	4635      	mov	r5, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a28:	f887 00a1 	strb.w	r0, [r7, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a2e:	2434      	movs	r4, #52	; 0x34
 8003a30:	fb04 7409 	mla	r4, r4, r9, r7
  __HAL_LOCK(hltdc);
 8003a34:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003a38:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8003a3a:	f887 80a0 	strb.w	r8, [r7, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	464a      	mov	r2, r9
 8003a50:	4631      	mov	r1, r6
 8003a52:	f7ff fdb3 	bl	80035bc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a56:	683b      	ldr	r3, [r7, #0]
  __HAL_UNLOCK(hltdc);
 8003a58:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a5a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a5e:	f887 80a1 	strb.w	r8, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003a62:	f887 00a0 	strb.w	r0, [r7, #160]	; 0xa0
}
 8003a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a6a:	bf00      	nop
 8003a6c:	080083f8 	.word	0x080083f8

08003a70 <HAL_LTDC_ConfigCLUT>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003a70:	2b01      	cmp	r3, #1
{
 8003a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a76:	4604      	mov	r4, r0
 8003a78:	460d      	mov	r5, r1
 8003a7a:	4616      	mov	r6, r2
 8003a7c:	4698      	mov	r8, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003a7e:	d904      	bls.n	8003a8a <HAL_LTDC_ConfigCLUT+0x1a>
 8003a80:	f240 214d 	movw	r1, #589	; 0x24d
 8003a84:	481d      	ldr	r0, [pc, #116]	; (8003afc <HAL_LTDC_ConfigCLUT+0x8c>)
 8003a86:	f7fd f95c 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hltdc);
 8003a8a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f04f 0002 	mov.w	r0, #2
 8003a94:	d014      	beq.n	8003ac0 <HAL_LTDC_ConfigCLUT+0x50>
 8003a96:	2301      	movs	r3, #1
 8003a98:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003a9c:	2334      	movs	r3, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8003a9e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8003aa2:	ea4f 17c8 	mov.w	r7, r8, lsl #7
  for(counter = 0U; (counter < CLUTSize); counter++)
 8003aa6:	2200      	movs	r2, #0
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003aa8:	fb03 4308 	mla	r3, r3, r8, r4
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003aac:	f04f 5e88 	mov.w	lr, #285212672	; 0x11000000
  for(counter = 0U; (counter < CLUTSize); counter++)
 8003ab0:	42b2      	cmp	r2, r6
 8003ab2:	d107      	bne.n	8003ac4 <HAL_LTDC_ConfigCLUT+0x54>
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003ab4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);  
 8003ab6:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003ab8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);  
 8003abc:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003ac4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003ac6:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8003aca:	2906      	cmp	r1, #6
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003acc:	bf03      	ittte	eq
 8003ace:	b2c1      	uxtbeq	r1, r0
 8003ad0:	fb0e fc02 	muleq.w	ip, lr, r2
 8003ad4:	ea41 010c 	orreq.w	r1, r1, ip
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003ad8:	b281      	uxthne	r1, r0
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003ada:	bf0c      	ite	eq
 8003adc:	f400 4c7f 	andeq.w	ip, r0, #65280	; 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003ae0:	ea41 6102 	orrne.w	r1, r1, r2, lsl #24
 8003ae4:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003ae8:	bf08      	it	eq
 8003aea:	ea41 010c 	orreq.w	r1, r1, ip
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003aee:	4301      	orrs	r1, r0
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	3084      	adds	r0, #132	; 0x84
 8003af4:	4438      	add	r0, r7
  for(counter = 0U; (counter < CLUTSize); counter++)
 8003af6:	3201      	adds	r2, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8003af8:	6401      	str	r1, [r0, #64]	; 0x40
 8003afa:	e7d9      	b.n	8003ab0 <HAL_LTDC_ConfigCLUT+0x40>
 8003afc:	080083f8 	.word	0x080083f8

08003b00 <HAL_LTDC_EnableCLUT>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003b00:	2901      	cmp	r1, #1
{
 8003b02:	b538      	push	{r3, r4, r5, lr}
 8003b04:	4604      	mov	r4, r0
 8003b06:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003b08:	d904      	bls.n	8003b14 <HAL_LTDC_EnableCLUT+0x14>
 8003b0a:	f240 21c1 	movw	r1, #705	; 0x2c1
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <HAL_LTDC_EnableCLUT+0x44>)
 8003b10:	f7fd f917 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hltdc);
 8003b14:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f04f 0002 	mov.w	r0, #2
 8003b1e:	d010      	beq.n	8003b42 <HAL_LTDC_EnableCLUT+0x42>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8003b20:	6822      	ldr	r2, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b22:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8003b26:	01ed      	lsls	r5, r5, #7
 8003b28:	f102 0184 	add.w	r1, r2, #132	; 0x84
  __HAL_UNLOCK(hltdc);
 8003b2c:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8003b2e:	586b      	ldr	r3, [r5, r1]
 8003b30:	f043 0310 	orr.w	r3, r3, #16
 8003b34:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003b3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003b3e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	080083f8 	.word	0x080083f8

08003b48 <HAL_LTDC_SetAddress>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003b48:	2a01      	cmp	r2, #1
{
 8003b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	460f      	mov	r7, r1
 8003b50:	4616      	mov	r6, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003b52:	d904      	bls.n	8003b5e <HAL_LTDC_SetAddress+0x16>
 8003b54:	f240 4105 	movw	r1, #1029	; 0x405
 8003b58:	480f      	ldr	r0, [pc, #60]	; (8003b98 <HAL_LTDC_SetAddress+0x50>)
 8003b5a:	f7fd f8f2 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hltdc);
 8003b5e:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	f04f 0002 	mov.w	r0, #2
 8003b68:	d015      	beq.n	8003b96 <HAL_LTDC_SetAddress+0x4e>
  pLayerCfg->FBStartAdress = Address;
 8003b6a:	2134      	movs	r1, #52	; 0x34
 8003b6c:	4371      	muls	r1, r6
 8003b6e:	1863      	adds	r3, r4, r1
  __HAL_LOCK(hltdc);
 8003b70:	2501      	movs	r5, #1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003b72:	3138      	adds	r1, #56	; 0x38
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b74:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8003b78:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b7c:	4620      	mov	r0, r4
  pLayerCfg->FBStartAdress = Address;
 8003b7e:	65df      	str	r7, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b80:	4632      	mov	r2, r6
 8003b82:	4421      	add	r1, r4
 8003b84:	f7ff fd1a 	bl	80035bc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b88:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003b8a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b8c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b8e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003b92:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b98:	080083f8 	.word	0x080083f8

08003b9c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b9c:	6803      	ldr	r3, [r0, #0]
 8003b9e:	2b0f      	cmp	r3, #15
{
 8003ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ba2:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ba4:	d903      	bls.n	8003bae <HAL_RCC_OscConfig+0x12>
 8003ba6:	21f3      	movs	r1, #243	; 0xf3
 8003ba8:	48a2      	ldr	r0, [pc, #648]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003baa:	f7fd f8ca 	bl	8000d42 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	07dd      	lsls	r5, r3, #31
 8003bb2:	d418      	bmi.n	8003be6 <HAL_RCC_OscConfig+0x4a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	0798      	lsls	r0, r3, #30
 8003bb8:	d46d      	bmi.n	8003c96 <HAL_RCC_OscConfig+0xfa>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	071a      	lsls	r2, r3, #28
 8003bbe:	f100 80c9 	bmi.w	8003d54 <HAL_RCC_OscConfig+0x1b8>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	075b      	lsls	r3, r3, #29
 8003bc6:	f100 80ef 	bmi.w	8003da8 <HAL_RCC_OscConfig+0x20c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003bca:	69a3      	ldr	r3, [r4, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d904      	bls.n	8003bda <HAL_RCC_OscConfig+0x3e>
 8003bd0:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8003bd4:	4897      	ldr	r0, [pc, #604]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003bd6:	f7fd f8b4 	bl	8000d42 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bda:	69a2      	ldr	r2, [r4, #24]
 8003bdc:	2a00      	cmp	r2, #0
 8003bde:	f040 814c 	bne.w	8003e7a <HAL_RCC_OscConfig+0x2de>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003be2:	2000      	movs	r0, #0
 8003be4:	e020      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003be6:	6863      	ldr	r3, [r4, #4]
 8003be8:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8003bec:	d006      	beq.n	8003bfc <HAL_RCC_OscConfig+0x60>
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCC_OscConfig+0x60>
 8003bf4:	21f8      	movs	r1, #248	; 0xf8
 8003bf6:	488f      	ldr	r0, [pc, #572]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	f7fd f8a3 	bl	8000d42 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfc:	4b8e      	ldr	r3, [pc, #568]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	f002 020c 	and.w	r2, r2, #12
 8003c04:	2a04      	cmp	r2, #4
 8003c06:	d007      	beq.n	8003c18 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	2a08      	cmp	r2, #8
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x90>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0259      	lsls	r1, r3, #9
 8003c16:	d509      	bpl.n	8003c2c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4b87      	ldr	r3, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	039a      	lsls	r2, r3, #14
 8003c1e:	d5c9      	bpl.n	8003bb4 <HAL_RCC_OscConfig+0x18>
 8003c20:	6863      	ldr	r3, [r4, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1c6      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x18>
        return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
}
 8003c28:	b003      	add	sp, #12
 8003c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	4d82      	ldr	r5, [pc, #520]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d111      	bne.n	8003c5a <HAL_RCC_OscConfig+0xbe>
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c3e:	f7fd feff 	bl	8001a40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	4d7d      	ldr	r5, [pc, #500]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8003c44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	039b      	lsls	r3, r3, #14
 8003c4a:	d4b3      	bmi.n	8003bb4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fd fef8 	bl	8001a40 <HAL_GetTick>
 8003c50:	1b80      	subs	r0, r0, r6
 8003c52:	2864      	cmp	r0, #100	; 0x64
 8003c54:	d9f7      	bls.n	8003c46 <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
 8003c56:	2003      	movs	r0, #3
 8003c58:	e7e6      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5e:	d104      	bne.n	8003c6a <HAL_RCC_OscConfig+0xce>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	e7e5      	b.n	8003c36 <HAL_RCC_OscConfig+0x9a>
 8003c6a:	682a      	ldr	r2, [r5, #0]
 8003c6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c70:	602a      	str	r2, [r5, #0]
 8003c72:	682a      	ldr	r2, [r5, #0]
 8003c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c78:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1df      	bne.n	8003c3e <HAL_RCC_OscConfig+0xa2>
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fedf 	bl	8001a40 <HAL_GetTick>
 8003c82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	039f      	lsls	r7, r3, #14
 8003c88:	d594      	bpl.n	8003bb4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fed9 	bl	8001a40 <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	2864      	cmp	r0, #100	; 0x64
 8003c92:	d9f7      	bls.n	8003c84 <HAL_RCC_OscConfig+0xe8>
 8003c94:	e7df      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d904      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
 8003c9c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8003ca0:	4864      	ldr	r0, [pc, #400]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003ca2:	f7fd f84e 	bl	8000d42 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	2b1f      	cmp	r3, #31
 8003caa:	d904      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x11a>
 8003cac:	f240 112b 	movw	r1, #299	; 0x12b
 8003cb0:	4860      	ldr	r0, [pc, #384]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	f7fd f846 	bl	8000d42 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb6:	4b60      	ldr	r3, [pc, #384]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	f012 0f0c 	tst.w	r2, #12
 8003cbe:	d007      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	2a08      	cmp	r2, #8
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	025e      	lsls	r6, r3, #9
 8003cce:	d413      	bmi.n	8003cf8 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	0795      	lsls	r5, r2, #30
 8003cd6:	d502      	bpl.n	8003cde <HAL_RCC_OscConfig+0x142>
 8003cd8:	68e2      	ldr	r2, [r4, #12]
 8003cda:	2a01      	cmp	r2, #1
 8003cdc:	d1a3      	bne.n	8003c26 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	22f8      	movs	r2, #248	; 0xf8
 8003ce2:	fa92 f2a2 	rbit	r2, r2
 8003ce6:	fab2 f182 	clz	r1, r2
 8003cea:	6922      	ldr	r2, [r4, #16]
 8003cec:	408a      	lsls	r2, r1
 8003cee:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e760      	b.n	8003bba <HAL_RCC_OscConfig+0x1e>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	68e2      	ldr	r2, [r4, #12]
 8003cfa:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_OscConfig+0x2a0>)
 8003cfc:	b1da      	cbz	r2, 8003d36 <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_ENABLE();
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d02:	f7fd fe9d 	bl	8001a40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	4d4c      	ldr	r5, [pc, #304]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8003d08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	0798      	lsls	r0, r3, #30
 8003d0e:	d50c      	bpl.n	8003d2a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	6829      	ldr	r1, [r5, #0]
 8003d12:	23f8      	movs	r3, #248	; 0xf8
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	fab3 f283 	clz	r2, r3
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	4093      	lsls	r3, r2
 8003d20:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8003d24:	4313      	orrs	r3, r2
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	e747      	b.n	8003bba <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fd fe89 	bl	8001a40 <HAL_GetTick>
 8003d2e:	1b80      	subs	r0, r0, r6
 8003d30:	2802      	cmp	r0, #2
 8003d32:	d9ea      	bls.n	8003d0a <HAL_RCC_OscConfig+0x16e>
 8003d34:	e78f      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 8003d36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d38:	f7fd fe82 	bl	8001a40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3c:	4d3e      	ldr	r5, [pc, #248]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8003d3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	0799      	lsls	r1, r3, #30
 8003d44:	f57f af39 	bpl.w	8003bba <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd fe7a 	bl	8001a40 <HAL_GetTick>
 8003d4c:	1b80      	subs	r0, r0, r6
 8003d4e:	2802      	cmp	r0, #2
 8003d50:	d9f6      	bls.n	8003d40 <HAL_RCC_OscConfig+0x1a4>
 8003d52:	e780      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d54:	6963      	ldr	r3, [r4, #20]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d904      	bls.n	8003d64 <HAL_RCC_OscConfig+0x1c8>
 8003d5a:	f240 116b 	movw	r1, #363	; 0x16b
 8003d5e:	4835      	ldr	r0, [pc, #212]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003d60:	f7fc ffef 	bl	8000d42 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d64:	6962      	ldr	r2, [r4, #20]
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2a4>)
 8003d68:	b17a      	cbz	r2, 8003d8a <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fe67 	bl	8001a40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	4d31      	ldr	r5, [pc, #196]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
      tickstart = HAL_GetTick();
 8003d74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003d78:	079f      	lsls	r7, r3, #30
 8003d7a:	f53f af22 	bmi.w	8003bc2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7e:	f7fd fe5f 	bl	8001a40 <HAL_GetTick>
 8003d82:	1b80      	subs	r0, r0, r6
 8003d84:	2802      	cmp	r0, #2
 8003d86:	d9f6      	bls.n	8003d76 <HAL_RCC_OscConfig+0x1da>
 8003d88:	e765      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 8003d8a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fe58 	bl	8001a40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d90:	4d29      	ldr	r5, [pc, #164]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
      tickstart = HAL_GetTick();
 8003d92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003d96:	0798      	lsls	r0, r3, #30
 8003d98:	f57f af13 	bpl.w	8003bc2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fe50 	bl	8001a40 <HAL_GetTick>
 8003da0:	1b80      	subs	r0, r0, r6
 8003da2:	2802      	cmp	r0, #2
 8003da4:	d9f6      	bls.n	8003d94 <HAL_RCC_OscConfig+0x1f8>
 8003da6:	e756      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003da8:	68a3      	ldr	r3, [r4, #8]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d906      	bls.n	8003dbc <HAL_RCC_OscConfig+0x220>
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d004      	beq.n	8003dbc <HAL_RCC_OscConfig+0x220>
 8003db2:	f240 1195 	movw	r1, #405	; 0x195
 8003db6:	481f      	ldr	r0, [pc, #124]	; (8003e34 <HAL_RCC_OscConfig+0x298>)
 8003db8:	f7fc ffc3 	bl	8000d42 <assert_failed>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
    PWR->CR |= PWR_CR_DBP;
 8003dc2:	4d20      	ldr	r5, [pc, #128]	; (8003e44 <HAL_RCC_OscConfig+0x2a8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003dde:	f7fd fe2f 	bl	8001a40 <HAL_GetTick>
 8003de2:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	05d9      	lsls	r1, r3, #23
 8003de8:	d517      	bpl.n	8003e1a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dea:	68a3      	ldr	r3, [r4, #8]
 8003dec:	4d12      	ldr	r5, [pc, #72]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d119      	bne.n	8003e26 <HAL_RCC_OscConfig+0x28a>
 8003df2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fe21 	bl	8001a40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4d0e      	ldr	r5, [pc, #56]	; (8003e38 <HAL_RCC_OscConfig+0x29c>)
      tickstart = HAL_GetTick();
 8003e00:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e08:	079a      	lsls	r2, r3, #30
 8003e0a:	f53f aede 	bmi.w	8003bca <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fd fe17 	bl	8001a40 <HAL_GetTick>
 8003e12:	1b80      	subs	r0, r0, r6
 8003e14:	42b8      	cmp	r0, r7
 8003e16:	d9f6      	bls.n	8003e06 <HAL_RCC_OscConfig+0x26a>
 8003e18:	e71d      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e1a:	f7fd fe11 	bl	8001a40 <HAL_GetTick>
 8003e1e:	1b80      	subs	r0, r0, r6
 8003e20:	2802      	cmp	r0, #2
 8003e22:	d9df      	bls.n	8003de4 <HAL_RCC_OscConfig+0x248>
 8003e24:	e717      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10e      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2ac>
 8003e2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	672b      	str	r3, [r5, #112]	; 0x70
 8003e32:	e7de      	b.n	8003df2 <HAL_RCC_OscConfig+0x256>
 8003e34:	08008437 	.word	0x08008437
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	42470000 	.word	0x42470000
 8003e40:	42470e80 	.word	0x42470e80
 8003e44:	40007000 	.word	0x40007000
 8003e48:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	672a      	str	r2, [r5, #112]	; 0x70
 8003e50:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ce      	bne.n	8003dfa <HAL_RCC_OscConfig+0x25e>
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fdf0 	bl	8001a40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003e64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e66:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e68:	079b      	lsls	r3, r3, #30
 8003e6a:	f57f aeae 	bpl.w	8003bca <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd fde7 	bl	8001a40 <HAL_GetTick>
 8003e72:	1b80      	subs	r0, r0, r6
 8003e74:	42b8      	cmp	r0, r7
 8003e76:	d9f6      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2ca>
 8003e78:	e6ed      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7a:	4e46      	ldr	r6, [pc, #280]	; (8003f94 <HAL_RCC_OscConfig+0x3f8>)
 8003e7c:	68b3      	ldr	r3, [r6, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	f43f aecf 	beq.w	8003c26 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	2a02      	cmp	r2, #2
 8003e8a:	4d43      	ldr	r5, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x3fc>)
 8003e8c:	d172      	bne.n	8003f74 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003e8e:	69e3      	ldr	r3, [r4, #28]
 8003e90:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8003e94:	d004      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x304>
 8003e96:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003e9a:	4840      	ldr	r0, [pc, #256]	; (8003f9c <HAL_RCC_OscConfig+0x400>)
 8003e9c:	f7fc ff51 	bl	8000d42 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003ea0:	6a23      	ldr	r3, [r4, #32]
 8003ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ea4:	d904      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x314>
 8003ea6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003eaa:	483c      	ldr	r0, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0x400>)
 8003eac:	f7fc ff49 	bl	8000d42 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb2:	3b32      	subs	r3, #50	; 0x32
 8003eb4:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8003eb8:	d904      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x328>
 8003eba:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003ebe:	4837      	ldr	r0, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x400>)
 8003ec0:	f7fc ff3f 	bl	8000d42 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ec6:	2a08      	cmp	r2, #8
 8003ec8:	d804      	bhi.n	8003ed4 <HAL_RCC_OscConfig+0x338>
 8003eca:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8003ece:	40d3      	lsrs	r3, r2
 8003ed0:	07d8      	lsls	r0, r3, #31
 8003ed2:	d404      	bmi.n	8003ede <HAL_RCC_OscConfig+0x342>
 8003ed4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003ed8:	4830      	ldr	r0, [pc, #192]	; (8003f9c <HAL_RCC_OscConfig+0x400>)
 8003eda:	f7fc ff32 	bl	8000d42 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003ede:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ee0:	3b02      	subs	r3, #2
 8003ee2:	2b0d      	cmp	r3, #13
 8003ee4:	d904      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x354>
 8003ee6:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003eea:	482c      	ldr	r0, [pc, #176]	; (8003f9c <HAL_RCC_OscConfig+0x400>)
 8003eec:	f7fc ff29 	bl	8000d42 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fda4 	bl	8001a40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	4e26      	ldr	r6, [pc, #152]	; (8003f94 <HAL_RCC_OscConfig+0x3f8>)
        tickstart = HAL_GetTick();
 8003efa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	0199      	lsls	r1, r3, #6
 8003f00:	d432      	bmi.n	8003f68 <HAL_RCC_OscConfig+0x3cc>
 8003f02:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003f06:	fa97 f7a7 	rbit	r7, r7
 8003f0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f0e:	fab7 f787 	clz	r7, r7
 8003f12:	fa92 f2a2 	rbit	r2, r2
 8003f16:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003f1a:	fab2 f082 	clz	r0, r2
 8003f1e:	fa91 f1a1 	rbit	r1, r1
 8003f22:	6a22      	ldr	r2, [r4, #32]
 8003f24:	69e3      	ldr	r3, [r4, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f2a:	fa02 f707 	lsl.w	r7, r2, r7
 8003f2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003f30:	0852      	lsrs	r2, r2, #1
 8003f32:	3a01      	subs	r2, #1
 8003f34:	4082      	lsls	r2, r0
 8003f36:	433b      	orrs	r3, r7
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3c:	4c15      	ldr	r4, [pc, #84]	; (8003f94 <HAL_RCC_OscConfig+0x3f8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f3e:	fab1 f181 	clz	r1, r1
 8003f42:	fa02 f101 	lsl.w	r1, r2, r1
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fd77 	bl	8001a40 <HAL_GetTick>
 8003f52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	019a      	lsls	r2, r3, #6
 8003f58:	f53f ae43 	bmi.w	8003be2 <HAL_RCC_OscConfig+0x46>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd fd70 	bl	8001a40 <HAL_GetTick>
 8003f60:	1b40      	subs	r0, r0, r5
 8003f62:	2802      	cmp	r0, #2
 8003f64:	d9f6      	bls.n	8003f54 <HAL_RCC_OscConfig+0x3b8>
 8003f66:	e676      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd fd6a 	bl	8001a40 <HAL_GetTick>
 8003f6c:	1bc0      	subs	r0, r0, r7
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d9c4      	bls.n	8003efc <HAL_RCC_OscConfig+0x360>
 8003f72:	e670      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_PLL_DISABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f78:	f7fd fd62 	bl	8001a40 <HAL_GetTick>
 8003f7c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	6833      	ldr	r3, [r6, #0]
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	f57f ae2e 	bpl.w	8003be2 <HAL_RCC_OscConfig+0x46>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fd fd5b 	bl	8001a40 <HAL_GetTick>
 8003f8a:	1b00      	subs	r0, r0, r4
 8003f8c:	2802      	cmp	r0, #2
 8003f8e:	d9f6      	bls.n	8003f7e <HAL_RCC_OscConfig+0x3e2>
 8003f90:	e661      	b.n	8003c56 <HAL_RCC_OscConfig+0xba>
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	42470060 	.word	0x42470060
 8003f9c:	08008437 	.word	0x08008437

08003fa0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_RCC_GetSysClockFreq+0x68>)
 8003fa2:	6893      	ldr	r3, [r2, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b04      	cmp	r3, #4
{
 8003faa:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x16>
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb2:	4816      	ldr	r0, [pc, #88]	; (800400c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003fb4:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8003fb6:	4816      	ldr	r0, [pc, #88]	; (8004010 <HAL_RCC_GetSysClockFreq+0x70>)
 8003fb8:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fba:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbc:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fbe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003fc6:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003fca:	6853      	ldr	r3, [r2, #4]
 8003fcc:	fa94 f0a4 	rbit	r0, r4
 8003fd0:	fab0 f080 	clz	r0, r0
 8003fd4:	ea03 0304 	and.w	r3, r3, r4
 8003fd8:	fa23 f300 	lsr.w	r3, r3, r0
 8003fdc:	bf14      	ite	ne
 8003fde:	480c      	ldrne	r0, [pc, #48]	; (8004010 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003fe0:	480a      	ldreq	r0, [pc, #40]	; (800400c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003fe2:	fbb0 f0f1 	udiv	r0, r0, r1
 8003fe6:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <HAL_RCC_GetSysClockFreq+0x68>)
 8003fea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	fa92 f2a2 	rbit	r2, r2
 8003ff4:	fab2 f282 	clz	r2, r2
 8003ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ffc:	40d3      	lsrs	r3, r2
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004002:	fbb0 f0f3 	udiv	r0, r0, r3
 8004006:	bd10      	pop	{r4, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	007a1200 	.word	0x007a1200

08004014 <HAL_RCC_ClockConfig>:
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004014:	6803      	ldr	r3, [r0, #0]
 8004016:	3b01      	subs	r3, #1
 8004018:	2b0e      	cmp	r3, #14
{
 800401a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401e:	4604      	mov	r4, r0
 8004020:	460e      	mov	r6, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004022:	d904      	bls.n	800402e <HAL_RCC_ClockConfig+0x1a>
 8004024:	f240 2135 	movw	r1, #565	; 0x235
 8004028:	487d      	ldr	r0, [pc, #500]	; (8004220 <HAL_RCC_ClockConfig+0x20c>)
 800402a:	f7fc fe8a 	bl	8000d42 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800402e:	2e0f      	cmp	r6, #15
 8004030:	d904      	bls.n	800403c <HAL_RCC_ClockConfig+0x28>
 8004032:	f240 2136 	movw	r1, #566	; 0x236
 8004036:	487a      	ldr	r0, [pc, #488]	; (8004220 <HAL_RCC_ClockConfig+0x20c>)
 8004038:	f7fc fe83 	bl	8000d42 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800403c:	4b79      	ldr	r3, [pc, #484]	; (8004224 <HAL_RCC_ClockConfig+0x210>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	f002 020f 	and.w	r2, r2, #15
 8004044:	4296      	cmp	r6, r2
 8004046:	d843      	bhi.n	80040d0 <HAL_RCC_ClockConfig+0xbc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	0798      	lsls	r0, r3, #30
 800404c:	d44a      	bmi.n	80040e4 <HAL_RCC_ClockConfig+0xd0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	07d9      	lsls	r1, r3, #31
 8004052:	d466      	bmi.n	8004122 <HAL_RCC_ClockConfig+0x10e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004054:	4b73      	ldr	r3, [pc, #460]	; (8004224 <HAL_RCC_ClockConfig+0x210>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	f002 020f 	and.w	r2, r2, #15
 800405c:	4296      	cmp	r6, r2
 800405e:	f0c0 80bc 	bcc.w	80041da <HAL_RCC_ClockConfig+0x1c6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	075a      	lsls	r2, r3, #29
 8004066:	f100 80c1 	bmi.w	80041ec <HAL_RCC_ClockConfig+0x1d8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	071b      	lsls	r3, r3, #28
 800406e:	d518      	bpl.n	80040a2 <HAL_RCC_ClockConfig+0x8e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004070:	6923      	ldr	r3, [r4, #16]
 8004072:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8004076:	d00c      	beq.n	8004092 <HAL_RCC_ClockConfig+0x7e>
 8004078:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800407c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004080:	d007      	beq.n	8004092 <HAL_RCC_ClockConfig+0x7e>
 8004082:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004086:	d004      	beq.n	8004092 <HAL_RCC_ClockConfig+0x7e>
 8004088:	f240 21b9 	movw	r1, #697	; 0x2b9
 800408c:	4864      	ldr	r0, [pc, #400]	; (8004220 <HAL_RCC_ClockConfig+0x20c>)
 800408e:	f7fc fe58 	bl	8000d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004092:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_RCC_ClockConfig+0x214>)
 8004094:	6921      	ldr	r1, [r4, #16]
 8004096:	6893      	ldr	r3, [r2, #8]
 8004098:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800409c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040a0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80040a2:	f7ff ff7d 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 80040a6:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_RCC_ClockConfig+0x214>)
 80040a8:	22f0      	movs	r2, #240	; 0xf0
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	fa92 f2a2 	rbit	r2, r2
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	40d3      	lsrs	r3, r2
 80040ba:	4a5c      	ldr	r2, [pc, #368]	; (800422c <HAL_RCC_ClockConfig+0x218>)
 80040bc:	5cd3      	ldrb	r3, [r2, r3]
 80040be:	40d8      	lsrs	r0, r3
 80040c0:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <HAL_RCC_ClockConfig+0x21c>)
 80040c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fc fee5 	bl	8000e94 <HAL_InitTick>
  return HAL_OK;
 80040ca:	2000      	movs	r0, #0
}
 80040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d0:	b2f2      	uxtb	r2, r6
 80040d2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	429e      	cmp	r6, r3
 80040dc:	d0b4      	beq.n	8004048 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 80040de:	2001      	movs	r0, #1
 80040e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80040e4:	68a3      	ldr	r3, [r4, #8]
 80040e6:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80040ea:	d012      	beq.n	8004112 <HAL_RCC_ClockConfig+0xfe>
 80040ec:	f023 0220 	bic.w	r2, r3, #32
 80040f0:	2a90      	cmp	r2, #144	; 0x90
 80040f2:	d00e      	beq.n	8004112 <HAL_RCC_ClockConfig+0xfe>
 80040f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80040f8:	2aa0      	cmp	r2, #160	; 0xa0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCC_ClockConfig+0xfe>
 80040fc:	f023 0210 	bic.w	r2, r3, #16
 8004100:	2ac0      	cmp	r2, #192	; 0xc0
 8004102:	d006      	beq.n	8004112 <HAL_RCC_ClockConfig+0xfe>
 8004104:	2bf0      	cmp	r3, #240	; 0xf0
 8004106:	d004      	beq.n	8004112 <HAL_RCC_ClockConfig+0xfe>
 8004108:	f240 214d 	movw	r1, #589	; 0x24d
 800410c:	4844      	ldr	r0, [pc, #272]	; (8004220 <HAL_RCC_ClockConfig+0x20c>)
 800410e:	f7fc fe18 	bl	8000d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004112:	4a45      	ldr	r2, [pc, #276]	; (8004228 <HAL_RCC_ClockConfig+0x214>)
 8004114:	68a1      	ldr	r1, [r4, #8]
 8004116:	6893      	ldr	r3, [r2, #8]
 8004118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800411c:	430b      	orrs	r3, r1
 800411e:	6093      	str	r3, [r2, #8]
 8004120:	e795      	b.n	800404e <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004122:	6863      	ldr	r3, [r4, #4]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d904      	bls.n	8004132 <HAL_RCC_ClockConfig+0x11e>
 8004128:	f44f 7115 	mov.w	r1, #596	; 0x254
 800412c:	483c      	ldr	r0, [pc, #240]	; (8004220 <HAL_RCC_ClockConfig+0x20c>)
 800412e:	f7fc fe08 	bl	8000d42 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	6862      	ldr	r2, [r4, #4]
 8004134:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_RCC_ClockConfig+0x214>)
 8004136:	2a01      	cmp	r2, #1
 8004138:	d11f      	bne.n	800417a <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	d0cd      	beq.n	80040de <HAL_RCC_ClockConfig+0xca>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4d39      	ldr	r5, [pc, #228]	; (8004228 <HAL_RCC_ClockConfig+0x214>)
 8004144:	68ab      	ldr	r3, [r5, #8]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	4313      	orrs	r3, r2
 800414c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800414e:	f7fd fc77 	bl	8001a40 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8004156:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415c:	d117      	bne.n	800418e <HAL_RCC_ClockConfig+0x17a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800415e:	68ab      	ldr	r3, [r5, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b04      	cmp	r3, #4
 8004166:	f43f af75 	beq.w	8004054 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416a:	f7fd fc69 	bl	8001a40 <HAL_GetTick>
 800416e:	1bc0      	subs	r0, r0, r7
 8004170:	4540      	cmp	r0, r8
 8004172:	d9f4      	bls.n	800415e <HAL_RCC_ClockConfig+0x14a>
          return HAL_TIMEOUT;
 8004174:	2003      	movs	r0, #3
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800417a:	1e91      	subs	r1, r2, #2
 800417c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004180:	d802      	bhi.n	8004188 <HAL_RCC_ClockConfig+0x174>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004186:	e7db      	b.n	8004140 <HAL_RCC_ClockConfig+0x12c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	f013 0f02 	tst.w	r3, #2
 800418c:	e7d8      	b.n	8004140 <HAL_RCC_ClockConfig+0x12c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418e:	2b02      	cmp	r3, #2
 8004190:	d10b      	bne.n	80041aa <HAL_RCC_ClockConfig+0x196>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004192:	68ab      	ldr	r3, [r5, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	f43f af5b 	beq.w	8004054 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419e:	f7fd fc4f 	bl	8001a40 <HAL_GetTick>
 80041a2:	1bc0      	subs	r0, r0, r7
 80041a4:	4540      	cmp	r0, r8
 80041a6:	d9f4      	bls.n	8004192 <HAL_RCC_ClockConfig+0x17e>
 80041a8:	e7e4      	b.n	8004174 <HAL_RCC_ClockConfig+0x160>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d110      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1bc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80041ae:	68ab      	ldr	r3, [r5, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	f43f af4d 	beq.w	8004054 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ba:	f7fd fc41 	bl	8001a40 <HAL_GetTick>
 80041be:	1bc0      	subs	r0, r0, r7
 80041c0:	4540      	cmp	r0, r8
 80041c2:	d9f4      	bls.n	80041ae <HAL_RCC_ClockConfig+0x19a>
 80041c4:	e7d6      	b.n	8004174 <HAL_RCC_ClockConfig+0x160>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c6:	f7fd fc3b 	bl	8001a40 <HAL_GetTick>
 80041ca:	1bc0      	subs	r0, r0, r7
 80041cc:	4540      	cmp	r0, r8
 80041ce:	d8d1      	bhi.n	8004174 <HAL_RCC_ClockConfig+0x160>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d0:	68ab      	ldr	r3, [r5, #8]
 80041d2:	f013 0f0c 	tst.w	r3, #12
 80041d6:	d1f6      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x1b2>
 80041d8:	e73c      	b.n	8004054 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	b2f2      	uxtb	r2, r6
 80041dc:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	429e      	cmp	r6, r3
 80041e6:	f47f af7a 	bne.w	80040de <HAL_RCC_ClockConfig+0xca>
 80041ea:	e73a      	b.n	8004062 <HAL_RCC_ClockConfig+0x4e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80041f2:	d00c      	beq.n	800420e <HAL_RCC_ClockConfig+0x1fa>
 80041f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041f8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80041fc:	d007      	beq.n	800420e <HAL_RCC_ClockConfig+0x1fa>
 80041fe:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004202:	d004      	beq.n	800420e <HAL_RCC_ClockConfig+0x1fa>
 8004204:	f240 21b2 	movw	r1, #690	; 0x2b2
 8004208:	4805      	ldr	r0, [pc, #20]	; (8004220 <HAL_RCC_ClockConfig+0x20c>)
 800420a:	f7fc fd9a 	bl	8000d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420e:	4a06      	ldr	r2, [pc, #24]	; (8004228 <HAL_RCC_ClockConfig+0x214>)
 8004210:	68e1      	ldr	r1, [r4, #12]
 8004212:	6893      	ldr	r3, [r2, #8]
 8004214:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004218:	430b      	orrs	r3, r1
 800421a:	6093      	str	r3, [r2, #8]
 800421c:	e725      	b.n	800406a <HAL_RCC_ClockConfig+0x56>
 800421e:	bf00      	nop
 8004220:	08008437 	.word	0x08008437
 8004224:	40023c00 	.word	0x40023c00
 8004228:	40023800 	.word	0x40023800
 800422c:	08008260 	.word	0x08008260
 8004230:	20000408 	.word	0x20000408

08004234 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <HAL_RCC_GetHCLKFreq+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000408 	.word	0x20000408

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	fa92 f2a2 	rbit	r2, r2
 800424c:	fab2 f282 	clz	r2, r2
 8004250:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004254:	40d3      	lsrs	r3, r2
 8004256:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800425c:	6810      	ldr	r0, [r2, #0]
}
 800425e:	40d8      	lsrs	r0, r3
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	08008270 	.word	0x08008270
 800426c:	20000408 	.word	0x20000408

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004272:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	fa92 f2a2 	rbit	r2, r2
 800427c:	fab2 f282 	clz	r2, r2
 8004280:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004284:	40d3      	lsrs	r3, r2
 8004286:	4a04      	ldr	r2, [pc, #16]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800428c:	6810      	ldr	r0, [r2, #0]
} 
 800428e:	40d8      	lsrs	r0, r3
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800
 8004298:	08008270 	.word	0x08008270
 800429c:	20000408 	.word	0x20000408

080042a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042a0:	230f      	movs	r3, #15
 80042a2:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_GetClockConfig+0x34>)
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	f002 0203 	and.w	r2, r2, #3
 80042ac:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80042b4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80042bc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80042c6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_GetClockConfig+0x38>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	600b      	str	r3, [r1, #0]
 80042d2:	4770      	bx	lr
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40023c00 	.word	0x40023c00

080042dc <HAL_RCCEx_PeriphCLKConfig>:
{
  uint32_t tickstart = 0U;
  uint32_t tmpreg1 = 0U;
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80042dc:	6803      	ldr	r3, [r0, #0]
 80042de:	3b01      	subs	r3, #1
 80042e0:	2b7e      	cmp	r3, #126	; 0x7e
{
 80042e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e4:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80042e6:	d904      	bls.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x16>
 80042e8:	f640 018d 	movw	r1, #2189	; 0x88d
 80042ec:	48a7      	ldr	r0, [pc, #668]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80042ee:	f7fc fd28 	bl	8000d42 <assert_failed>
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	079a      	lsls	r2, r3, #30
 80042f6:	d112      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x42>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	f013 0f0c 	tst.w	r3, #12
 80042fe:	f040 808e 	bne.w	800441e <HAL_RCCEx_PeriphCLKConfig+0x142>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	069a      	lsls	r2, r3, #26
 8004306:	f100 814b 	bmi.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004310:	bf1f      	itttt	ne
 8004312:	4b9f      	ldrne	r3, [pc, #636]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004314:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8004318:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 800431a:	2000      	movne	r0, #0
 800431c:	e07d      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800431e:	6863      	ldr	r3, [r4, #4]
 8004320:	3b32      	subs	r3, #50	; 0x32
 8004322:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004326:	d904      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004328:	f640 0197 	movw	r1, #2199	; 0x897
 800432c:	4897      	ldr	r0, [pc, #604]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800432e:	f7fc fd08 	bl	8000d42 <assert_failed>
    __HAL_RCC_PLLI2S_DISABLE();    
 8004332:	4d98      	ldr	r5, [pc, #608]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004334:	4e98      	ldr	r6, [pc, #608]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PLLI2S_DISABLE();    
 8004336:	2300      	movs	r3, #0
 8004338:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800433a:	f7fd fb81 	bl	8001a40 <HAL_GetTick>
 800433e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004340:	6833      	ldr	r3, [r6, #0]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	d463      	bmi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07de      	lsls	r6, r3, #31
 800434a:	d51d      	bpl.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xac>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800434c:	68a3      	ldr	r3, [r4, #8]
 800434e:	3b02      	subs	r3, #2
 8004350:	2b05      	cmp	r3, #5
 8004352:	d904      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004354:	f640 01ad 	movw	r1, #2221	; 0x8ad
 8004358:	488c      	ldr	r0, [pc, #560]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800435a:	f7fc fcf2 	bl	8000d42 <assert_failed>
 800435e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800436a:	fab3 f183 	clz	r1, r3
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	6863      	ldr	r3, [r4, #4]
 8004374:	408b      	lsls	r3, r1
 8004376:	68a1      	ldr	r1, [r4, #8]
 8004378:	fab2 f282 	clz	r2, r2
 800437c:	fa01 f202 	lsl.w	r2, r1, r2
 8004380:	4313      	orrs	r3, r2
 8004382:	4a85      	ldr	r2, [pc, #532]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004384:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	0798      	lsls	r0, r3, #30
 800438c:	d52f      	bpl.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x112>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	3b02      	subs	r3, #2
 8004392:	2b0d      	cmp	r3, #13
 8004394:	d904      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004396:	f640 01ba 	movw	r1, #2234	; 0x8ba
 800439a:	487c      	ldr	r0, [pc, #496]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800439c:	f7fc fcd1 	bl	8000d42 <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80043a0:	69e3      	ldr	r3, [r4, #28]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	2b1f      	cmp	r3, #31
 80043a6:	d904      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80043a8:	f640 01bb 	movw	r1, #2235	; 0x8bb
 80043ac:	4877      	ldr	r0, [pc, #476]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80043ae:	f7fc fcc8 	bl	8000d42 <assert_failed>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80043b2:	4879      	ldr	r0, [pc, #484]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043b4:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80043b8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80043bc:	fa91 f1a1 	rbit	r1, r1
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80043c0:	68e3      	ldr	r3, [r4, #12]
 80043c2:	6866      	ldr	r6, [r4, #4]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80043c4:	fab1 f181 	clz	r1, r1
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80043c8:	061b      	lsls	r3, r3, #24
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80043ca:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80043ce:	40ca      	lsrs	r2, r1
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80043d0:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80043d4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80043d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043dc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80043e0:	69e3      	ldr	r3, [r4, #28]
 80043e2:	f022 021f 	bic.w	r2, r2, #31
 80043e6:	3b01      	subs	r3, #1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 80043ee:	2301      	movs	r3, #1
 80043f0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80043f2:	f7fd fb25 	bl	8001a40 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f6:	4d68      	ldr	r5, [pc, #416]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    tickstart = HAL_GetTick();
 80043f8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	0119      	lsls	r1, r3, #4
 80043fe:	f53f af7b 	bmi.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004402:	f7fd fb1d 	bl	8001a40 <HAL_GetTick>
 8004406:	1b80      	subs	r0, r0, r6
 8004408:	2802      	cmp	r0, #2
 800440a:	d9f6      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800440e:	f7fd fb17 	bl	8001a40 <HAL_GetTick>
 8004412:	1bc0      	subs	r0, r0, r7
 8004414:	2802      	cmp	r0, #2
 8004416:	d993      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x64>
        return HAL_TIMEOUT;
 8004418:	2003      	movs	r0, #3
}
 800441a:	b003      	add	sp, #12
 800441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	3b32      	subs	r3, #50	; 0x32
 8004422:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004426:	d904      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004428:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 800442c:	4857      	ldr	r0, [pc, #348]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800442e:	f7fc fc88 	bl	8000d42 <assert_failed>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004432:	4d5a      	ldr	r5, [pc, #360]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004434:	4e58      	ldr	r6, [pc, #352]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004436:	2300      	movs	r3, #0
 8004438:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800443a:	f7fd fb01 	bl	8001a40 <HAL_GetTick>
 800443e:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f100 809a 	bmi.w	800457c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	075f      	lsls	r7, r3, #29
 800444c:	d542      	bpl.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800444e:	6963      	ldr	r3, [r4, #20]
 8004450:	3b02      	subs	r3, #2
 8004452:	2b0d      	cmp	r3, #13
 8004454:	d904      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004456:	f640 01f5 	movw	r1, #2293	; 0x8f5
 800445a:	484c      	ldr	r0, [pc, #304]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800445c:	f7fc fc71 	bl	8000d42 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004460:	6a23      	ldr	r3, [r4, #32]
 8004462:	3b01      	subs	r3, #1
 8004464:	2b1f      	cmp	r3, #31
 8004466:	d904      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004468:	f640 01f6 	movw	r1, #2294	; 0x8f6
 800446c:	4847      	ldr	r0, [pc, #284]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800446e:	f7fc fc68 	bl	8000d42 <assert_failed>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004472:	4949      	ldr	r1, [pc, #292]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004474:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8004478:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800447c:	fa9e f7ae 	rbit	r7, lr
 8004480:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004484:	fab7 f787 	clz	r7, r7
 8004488:	fa93 f3a3 	rbit	r3, r3
 800448c:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004490:	fab3 f683 	clz	r6, r3
 8004494:	fa90 f0a0 	rbit	r0, r0
 8004498:	fab0 f080 	clz	r0, r0
 800449c:	fa9e feae 	rbit	lr, lr
 80044a0:	6923      	ldr	r3, [r4, #16]
 80044a2:	40b3      	lsls	r3, r6
 80044a4:	6966      	ldr	r6, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80044a6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044aa:	fabe fe8e 	clz	lr, lr
 80044ae:	fa06 f000 	lsl.w	r0, r6, r0
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80044b2:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044b4:	fa02 f20e 	lsl.w	r2, r2, lr
 80044b8:	4303      	orrs	r3, r0
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044c0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80044c4:	6a22      	ldr	r2, [r4, #32]
 80044c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80044ca:	3a01      	subs	r2, #1
 80044cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	071e      	lsls	r6, r3, #28
 80044d8:	d540      	bpl.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80044da:	69a3      	ldr	r3, [r4, #24]
 80044dc:	3b02      	subs	r3, #2
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d904      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80044e2:	f640 1105 	movw	r1, #2309	; 0x905
 80044e6:	4829      	ldr	r0, [pc, #164]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80044e8:	f7fc fc2b 	bl	8000d42 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80044ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ee:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80044f2:	d004      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x222>
 80044f4:	f640 1106 	movw	r1, #2310	; 0x906
 80044f8:	4824      	ldr	r0, [pc, #144]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80044fa:	f7fc fc22 	bl	8000d42 <assert_failed>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80044fe:	4826      	ldr	r0, [pc, #152]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004500:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004504:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004508:	fa91 fea1 	rbit	lr, r1
 800450c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004510:	fabe fe8e 	clz	lr, lr
 8004514:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004518:	fab3 f783 	clz	r7, r3
 800451c:	fa91 f1a1 	rbit	r1, r1
 8004520:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8004524:	fab1 f181 	clz	r1, r1
 8004528:	fa96 f6a6 	rbit	r6, r6
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	40bb      	lsls	r3, r7
 8004530:	69a7      	ldr	r7, [r4, #24]
 8004532:	fab6 f686 	clz	r6, r6
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8004536:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800453a:	fa07 f606 	lsl.w	r6, r7, r6
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800453e:	fa22 f20e 	lsr.w	r2, r2, lr
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004542:	408a      	lsls	r2, r1
 8004544:	4333      	orrs	r3, r6
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800454c:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8004550:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004552:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800455c:	2301      	movs	r3, #1
 800455e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004560:	f7fd fa6e 	bl	8001a40 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004564:	4d0c      	ldr	r5, [pc, #48]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    tickstart = HAL_GetTick();
 8004566:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	0098      	lsls	r0, r3, #2
 800456c:	f53f aec9 	bmi.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0x26>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004570:	f7fd fa66 	bl	8001a40 <HAL_GetTick>
 8004574:	1b80      	subs	r0, r0, r6
 8004576:	2802      	cmp	r0, #2
 8004578:	d9f6      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800457a:	e74d      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800457c:	f7fd fa60 	bl	8001a40 <HAL_GetTick>
 8004580:	1bc0      	subs	r0, r0, r7
 8004582:	2802      	cmp	r0, #2
 8004584:	f67f af5c 	bls.w	8004440 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004588:	e746      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800458a:	bf00      	nop
 800458c:	08008475 	.word	0x08008475
 8004590:	424711e0 	.word	0x424711e0
 8004594:	42470068 	.word	0x42470068
 8004598:	40023800 	.word	0x40023800
 800459c:	42470070 	.word	0x42470070
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80045a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d02e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ac:	d02b      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045ae:	4a43      	ldr	r2, [pc, #268]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 80045b4:	4290      	cmp	r0, r2
 80045b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ba:	d024      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045bc:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 80045c0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80045c4:	4290      	cmp	r0, r2
 80045c6:	d01e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045c8:	483d      	ldr	r0, [pc, #244]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ce:	4282      	cmp	r2, r0
 80045d0:	d019      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045d2:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 80045d6:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 80045da:	4283      	cmp	r3, r0
 80045dc:	d013      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045de:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d010      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d00c      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045ec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d008      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045f4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80045f8:	4299      	cmp	r1, r3
 80045fa:	d004      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80045fc:	f640 1125 	movw	r1, #2341	; 0x925
 8004600:	4831      	ldr	r0, [pc, #196]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004602:	f7fc fb9e 	bl	8000d42 <assert_failed>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	4b30      	ldr	r3, [pc, #192]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
    PWR->CR |= PWR_CR_DBP;
 800460c:	4d30      	ldr	r5, [pc, #192]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004610:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004626:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004628:	f7fd fa0a 	bl	8001a40 <HAL_GetTick>
 800462c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800462e:	682b      	ldr	r3, [r5, #0]
 8004630:	05d9      	lsls	r1, r3, #23
 8004632:	d51a      	bpl.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004634:	4d25      	ldr	r5, [pc, #148]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004638:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800463c:	d11b      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004640:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004644:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800464a:	d133      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800464c:	6891      	ldr	r1, [r2, #8]
 800464e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004652:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004656:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800465a:	4301      	orrs	r1, r0
 800465c:	6091      	str	r1, [r2, #8]
 800465e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	430b      	orrs	r3, r1
 8004666:	6713      	str	r3, [r2, #112]	; 0x70
 8004668:	e64f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7fd f9e9 	bl	8001a40 <HAL_GetTick>
 800466e:	1b80      	subs	r0, r0, r6
 8004670:	2802      	cmp	r0, #2
 8004672:	d9dc      	bls.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004674:	e6d0      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004676:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004678:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800467c:	4293      	cmp	r3, r2
 800467e:	d0de      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x362>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004680:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004682:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8004684:	2101      	movs	r1, #1
 8004686:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468c:	2100      	movs	r1, #0
 800468e:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8004690:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004692:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004694:	07da      	lsls	r2, r3, #31
 8004696:	d5d2      	bpl.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x362>
        tickstart = HAL_GetTick();
 8004698:	f7fd f9d2 	bl	8001a40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046a4:	079b      	lsls	r3, r3, #30
 80046a6:	d4ca      	bmi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x362>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fd f9ca 	bl	8001a40 <HAL_GetTick>
 80046ac:	1b80      	subs	r0, r0, r6
 80046ae:	42b8      	cmp	r0, r7
 80046b0:	d9f7      	bls.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80046b2:	e6b1      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b4:	6891      	ldr	r1, [r2, #8]
 80046b6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80046ba:	e7cf      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x380>
 80046bc:	00020300 	.word	0x00020300
 80046c0:	00080300 	.word	0x00080300
 80046c4:	00100300 	.word	0x00100300
 80046c8:	08008475 	.word	0x08008475
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
 80046d4:	42470e40 	.word	0x42470e40

080046d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80046dc:	4604      	mov	r4, r0
 80046de:	b1c8      	cbz	r0, 8004714 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80046e0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80046e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046e8:	b91b      	cbnz	r3, 80046f2 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80046ea:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80046ee:	f7fb ff21 	bl	8000534 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80046f8:	1d21      	adds	r1, r4, #4
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	f001 fa28 	bl	8005b50 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004700:	6862      	ldr	r2, [r4, #4]
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	4629      	mov	r1, r5
 8004706:	f001 fad1 	bl	8005cac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800470a:	2301      	movs	r3, #1
 800470c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004710:	2000      	movs	r0, #0
 8004712:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
}
 8004716:	bd38      	pop	{r3, r4, r5, pc}

08004718 <HAL_SDRAM_RefreshErrorCallback>:
 8004718:	4770      	bx	lr

0800471a <HAL_SDRAM_IRQHandler>:
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 800471a:	6803      	ldr	r3, [r0, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	07db      	lsls	r3, r3, #31
{
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8004724:	d506      	bpl.n	8004734 <HAL_SDRAM_IRQHandler+0x1a>
  {
    /* SDRAM refresh error interrupt callback */
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8004726:	f7ff fff7 	bl	8004718 <HAL_SDRAM_RefreshErrorCallback>
    
    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	6953      	ldr	r3, [r2, #20]
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6153      	str	r3, [r2, #20]
 8004734:	bd10      	pop	{r4, pc}

08004736 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004736:	b538      	push	{r3, r4, r5, lr}
 8004738:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800473a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800473e:	b2c0      	uxtb	r0, r0
 8004740:	2802      	cmp	r0, #2
{
 8004742:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004744:	d00d      	beq.n	8004762 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004746:	2302      	movs	r3, #2
 8004748:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	f001 fb4b 	bl	8005de8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004752:	682b      	ldr	r3, [r5, #0]
 8004754:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004756:	bf0c      	ite	eq
 8004758:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800475a:	2301      	movne	r3, #1
 800475c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004760:	2000      	movs	r0, #0
}
 8004762:	bd38      	pop	{r3, r4, r5, pc}

08004764 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004768:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800476c:	b2c0      	uxtb	r0, r0
 800476e:	2802      	cmp	r0, #2
 8004770:	d009      	beq.n	8004786 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004772:	2302      	movs	r3, #2
 8004774:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	f001 fb8d 	bl	8005e98 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800477e:	2301      	movs	r3, #1
 8004780:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8004784:	2000      	movs	r0, #0
}
 8004786:	bd10      	pop	{r4, pc}

08004788 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478c:	9e06      	ldr	r6, [sp, #24]
 800478e:	4604      	mov	r4, r0
 8004790:	4688      	mov	r8, r1
 8004792:	4617      	mov	r7, r2
 8004794:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	6893      	ldr	r3, [r2, #8]
 800479a:	ea38 0303 	bics.w	r3, r8, r3
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	429f      	cmp	r7, r3
 80047a6:	d102      	bne.n	80047ae <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80047a8:	2000      	movs	r0, #0
}
 80047aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80047ae:	1c6b      	adds	r3, r5, #1
 80047b0:	d0f2      	beq.n	8004798 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80047b2:	bb55      	cbnz	r5, 800480a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047bc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80047c4:	d10a      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x54>
 80047c6:	68a2      	ldr	r2, [r4, #8]
 80047c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80047cc:	d002      	beq.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80047ce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80047d2:	d103      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047de:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80047e2:	d109      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ea:	0412      	lsls	r2, r2, #16
 80047ec:	0c12      	lsrs	r2, r2, #16
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f6:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80047fe:	2300      	movs	r3, #0
 8004800:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8004804:	2003      	movs	r0, #3
 8004806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800480a:	f7fd f919 	bl	8001a40 <HAL_GetTick>
 800480e:	1b80      	subs	r0, r0, r6
 8004810:	4285      	cmp	r5, r0
 8004812:	d8c0      	bhi.n	8004796 <SPI_WaitFlagStateUntilTimeout+0xe>
 8004814:	e7ce      	b.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08004816 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004816:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004818:	460b      	mov	r3, r1
 800481a:	9200      	str	r2, [sp, #0]
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	2200      	movs	r2, #0
{
 8004820:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004822:	f7ff ffb1 	bl	8004788 <SPI_WaitFlagStateUntilTimeout>
 8004826:	b120      	cbz	r0, 8004832 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004828:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800482a:	f043 0320 	orr.w	r3, r3, #32
 800482e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8004830:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8004832:	b002      	add	sp, #8
 8004834:	bd10      	pop	{r4, pc}
	...

08004838 <HAL_SPI_Init>:
{
 8004838:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800483a:	4604      	mov	r4, r0
 800483c:	2800      	cmp	r0, #0
 800483e:	f000 80b0 	beq.w	80049a2 <HAL_SPI_Init+0x16a>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004842:	6803      	ldr	r3, [r0, #0]
 8004844:	4a58      	ldr	r2, [pc, #352]	; (80049a8 <HAL_SPI_Init+0x170>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d018      	beq.n	800487c <HAL_SPI_Init+0x44>
 800484a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800484e:	4293      	cmp	r3, r2
 8004850:	d014      	beq.n	800487c <HAL_SPI_Init+0x44>
 8004852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004856:	4293      	cmp	r3, r2
 8004858:	d010      	beq.n	800487c <HAL_SPI_Init+0x44>
 800485a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800485e:	4293      	cmp	r3, r2
 8004860:	d00c      	beq.n	800487c <HAL_SPI_Init+0x44>
 8004862:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8004866:	4293      	cmp	r3, r2
 8004868:	d008      	beq.n	800487c <HAL_SPI_Init+0x44>
 800486a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_SPI_Init+0x44>
 8004872:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004876:	484d      	ldr	r0, [pc, #308]	; (80049ac <HAL_SPI_Init+0x174>)
 8004878:	f7fc fa63 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	b13b      	cbz	r3, 8004890 <HAL_SPI_Init+0x58>
 8004880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004884:	d004      	beq.n	8004890 <HAL_SPI_Init+0x58>
 8004886:	f240 1111 	movw	r1, #273	; 0x111
 800488a:	4848      	ldr	r0, [pc, #288]	; (80049ac <HAL_SPI_Init+0x174>)
 800488c:	f7fc fa59 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004890:	68a3      	ldr	r3, [r4, #8]
 8004892:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004896:	d007      	beq.n	80048a8 <HAL_SPI_Init+0x70>
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d004      	beq.n	80048a8 <HAL_SPI_Init+0x70>
 800489e:	f44f 7189 	mov.w	r1, #274	; 0x112
 80048a2:	4842      	ldr	r0, [pc, #264]	; (80049ac <HAL_SPI_Init+0x174>)
 80048a4:	f7fc fa4d 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80048a8:	68e3      	ldr	r3, [r4, #12]
 80048aa:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80048ae:	d004      	beq.n	80048ba <HAL_SPI_Init+0x82>
 80048b0:	f240 1113 	movw	r1, #275	; 0x113
 80048b4:	483d      	ldr	r0, [pc, #244]	; (80049ac <HAL_SPI_Init+0x174>)
 80048b6:	f7fc fa44 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80048ba:	69a3      	ldr	r3, [r4, #24]
 80048bc:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80048c0:	d007      	beq.n	80048d2 <HAL_SPI_Init+0x9a>
 80048c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c6:	d004      	beq.n	80048d2 <HAL_SPI_Init+0x9a>
 80048c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80048cc:	4837      	ldr	r0, [pc, #220]	; (80049ac <HAL_SPI_Init+0x174>)
 80048ce:	f7fc fa38 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80048d2:	69e3      	ldr	r3, [r4, #28]
 80048d4:	f033 0318 	bics.w	r3, r3, #24
 80048d8:	d006      	beq.n	80048e8 <HAL_SPI_Init+0xb0>
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d004      	beq.n	80048e8 <HAL_SPI_Init+0xb0>
 80048de:	f240 1115 	movw	r1, #277	; 0x115
 80048e2:	4832      	ldr	r0, [pc, #200]	; (80049ac <HAL_SPI_Init+0x174>)
 80048e4:	f7fc fa2d 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80048e8:	6a23      	ldr	r3, [r4, #32]
 80048ea:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80048ee:	d004      	beq.n	80048fa <HAL_SPI_Init+0xc2>
 80048f0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80048f4:	482d      	ldr	r0, [pc, #180]	; (80049ac <HAL_SPI_Init+0x174>)
 80048f6:	f7fc fa24 	bl	8000d42 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80048fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048fc:	f033 0310 	bics.w	r3, r3, #16
 8004900:	d004      	beq.n	800490c <HAL_SPI_Init+0xd4>
 8004902:	f240 1117 	movw	r1, #279	; 0x117
 8004906:	4829      	ldr	r0, [pc, #164]	; (80049ac <HAL_SPI_Init+0x174>)
 8004908:	f7fc fa1b 	bl	8000d42 <assert_failed>
  if(hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800490c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800490e:	b983      	cbnz	r3, 8004932 <HAL_SPI_Init+0xfa>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	f033 0302 	bics.w	r3, r3, #2
 8004916:	d004      	beq.n	8004922 <HAL_SPI_Init+0xea>
 8004918:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800491c:	4823      	ldr	r0, [pc, #140]	; (80049ac <HAL_SPI_Init+0x174>)
 800491e:	f7fc fa10 	bl	8000d42 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004922:	6963      	ldr	r3, [r4, #20]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d904      	bls.n	8004932 <HAL_SPI_Init+0xfa>
 8004928:	f240 111b 	movw	r1, #283	; 0x11b
 800492c:	481f      	ldr	r0, [pc, #124]	; (80049ac <HAL_SPI_Init+0x174>)
 800492e:	f7fc fa08 	bl	8000d42 <assert_failed>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004932:	2300      	movs	r3, #0
 8004934:	62a3      	str	r3, [r4, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8004936:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800493a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800493e:	b923      	cbnz	r3, 800494a <HAL_SPI_Init+0x112>
    hspi->Lock = HAL_UNLOCKED;
 8004940:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004944:	4620      	mov	r0, r4
 8004946:	f7fc fa23 	bl	8000d90 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800494a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800494c:	68a0      	ldr	r0, [r4, #8]
 800494e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004950:	2302      	movs	r3, #2
 8004952:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004956:	680b      	ldr	r3, [r1, #0]
 8004958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	4303      	orrs	r3, r0
 8004962:	68e0      	ldr	r0, [r4, #12]
 8004964:	4303      	orrs	r3, r0
 8004966:	6920      	ldr	r0, [r4, #16]
 8004968:	4303      	orrs	r3, r0
 800496a:	6960      	ldr	r0, [r4, #20]
 800496c:	4303      	orrs	r3, r0
 800496e:	69e0      	ldr	r0, [r4, #28]
 8004970:	4303      	orrs	r3, r0
 8004972:	6a20      	ldr	r0, [r4, #32]
 8004974:	4303      	orrs	r3, r0
 8004976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004978:	4303      	orrs	r3, r0
 800497a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800497e:	4303      	orrs	r3, r0
 8004980:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004982:	0c12      	lsrs	r2, r2, #16
 8004984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004986:	f002 0204 	and.w	r2, r2, #4
 800498a:	431a      	orrs	r2, r3
 800498c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498e:	69cb      	ldr	r3, [r1, #28]
 8004990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004994:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004996:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004998:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800499c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80049a0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80049a2:	2001      	movs	r0, #1
}
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	40013000 	.word	0x40013000
 80049ac:	080084b6 	.word	0x080084b6

080049b0 <HAL_SPI_DeInit>:
{
 80049b0:	b510      	push	{r4, lr}
  if(hspi == NULL)
 80049b2:	4604      	mov	r4, r0
 80049b4:	b370      	cbz	r0, 8004a14 <HAL_SPI_DeInit+0x64>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80049b6:	6803      	ldr	r3, [r0, #0]
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <HAL_SPI_DeInit+0x68>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_SPI_DeInit+0x40>
 80049be:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d014      	beq.n	80049f0 <HAL_SPI_DeInit+0x40>
 80049c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d010      	beq.n	80049f0 <HAL_SPI_DeInit+0x40>
 80049ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00c      	beq.n	80049f0 <HAL_SPI_DeInit+0x40>
 80049d6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80049da:	4293      	cmp	r3, r2
 80049dc:	d008      	beq.n	80049f0 <HAL_SPI_DeInit+0x40>
 80049de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_SPI_DeInit+0x40>
 80049e6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80049ea:	480c      	ldr	r0, [pc, #48]	; (8004a1c <HAL_SPI_DeInit+0x6c>)
 80049ec:	f7fc f9a9 	bl	8000d42 <assert_failed>
  __HAL_SPI_DISABLE(hspi);
 80049f0:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80049f2:	2302      	movs	r3, #2
 80049f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  HAL_SPI_MspDeInit(hspi);
 80049fe:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8004a00:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004a02:	f7fc f9f9 	bl	8000df8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a06:	2000      	movs	r0, #0
 8004a08:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8004a0a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8004a0e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8004a12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a14:	2001      	movs	r0, #1
}
 8004a16:	bd10      	pop	{r4, pc}
 8004a18:	40013000 	.word	0x40013000
 8004a1c:	080084b6 	.word	0x080084b6

08004a20 <HAL_SPI_Transmit>:
{
 8004a20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004a24:	461e      	mov	r6, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004a26:	6883      	ldr	r3, [r0, #8]
 8004a28:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	460d      	mov	r5, r1
 8004a30:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004a32:	d004      	beq.n	8004a3e <HAL_SPI_Transmit+0x1e>
 8004a34:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004a38:	4852      	ldr	r0, [pc, #328]	; (8004b84 <HAL_SPI_Transmit+0x164>)
 8004a3a:	f7fc f982 	bl	8000d42 <assert_failed>
  __HAL_LOCK(hspi);
 8004a3e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	f000 809c 	beq.w	8004b80 <HAL_SPI_Transmit+0x160>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004a4e:	f7fc fff7 	bl	8001a40 <HAL_GetTick>
 8004a52:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8004a54:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004a58:	b2c0      	uxtb	r0, r0
 8004a5a:	2801      	cmp	r0, #1
 8004a5c:	f040 808e 	bne.w	8004b7c <HAL_SPI_Transmit+0x15c>
  if((pData == NULL ) || (Size == 0))
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	d04e      	beq.n	8004b02 <HAL_SPI_Transmit+0xe2>
 8004a64:	f1b8 0f00 	cmp.w	r8, #0
 8004a68:	d04b      	beq.n	8004b02 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a74:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a76:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8004a7a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a7e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a80:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a82:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a84:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8004a8c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8004a90:	bf02      	ittt	eq
 8004a92:	681a      	ldreq	r2, [r3, #0]
 8004a94:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8004a98:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004a9e:	bf5e      	ittt	pl
 8004aa0:	681a      	ldrpl	r2, [r3, #0]
 8004aa2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa8:	68e2      	ldr	r2, [r4, #12]
 8004aaa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	d138      	bne.n	8004b24 <HAL_SPI_Transmit+0x104>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004ab2:	b11a      	cbz	r2, 8004abc <HAL_SPI_Transmit+0x9c>
 8004ab4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	2a01      	cmp	r2, #1
 8004aba:	d106      	bne.n	8004aca <HAL_SPI_Transmit+0xaa>
          hspi->Instance->DR = *((uint16_t *)pData);
 8004abc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004ac0:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8004ac2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004aca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	b993      	cbnz	r3, 8004af6 <HAL_SPI_Transmit+0xd6>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8004ad0:	9700      	str	r7, [sp, #0]
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	2102      	movs	r1, #2
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7ff fe55 	bl	8004788 <SPI_WaitFlagStateUntilTimeout>
 8004ade:	b978      	cbnz	r0, 8004b00 <HAL_SPI_Transmit+0xe0>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004ae0:	463a      	mov	r2, r7
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff fe96 	bl	8004816 <SPI_CheckFlag_BSY>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d038      	beq.n	8004b60 <HAL_SPI_Transmit+0x140>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aee:	2320      	movs	r3, #32
 8004af0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004af2:	2001      	movs	r0, #1
    goto error;
 8004af4:	e005      	b.n	8004b02 <HAL_SPI_Transmit+0xe2>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	0790      	lsls	r0, r2, #30
 8004afc:	d4de      	bmi.n	8004abc <HAL_SPI_Transmit+0x9c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004afe:	b94e      	cbnz	r6, 8004b14 <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8004b00:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b0e:	b004      	add	sp, #16
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004b14:	1c71      	adds	r1, r6, #1
 8004b16:	d0d8      	beq.n	8004aca <HAL_SPI_Transmit+0xaa>
 8004b18:	f7fc ff92 	bl	8001a40 <HAL_GetTick>
 8004b1c:	1bc0      	subs	r0, r0, r7
 8004b1e:	4286      	cmp	r6, r0
 8004b20:	d8d3      	bhi.n	8004aca <HAL_SPI_Transmit+0xaa>
 8004b22:	e7ed      	b.n	8004b00 <HAL_SPI_Transmit+0xe0>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8004b24:	b11a      	cbz	r2, 8004b2e <HAL_SPI_Transmit+0x10e>
 8004b26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	2a01      	cmp	r2, #1
 8004b2c:	d106      	bne.n	8004b3c <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8004b2e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004b32:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004b34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0c5      	beq.n	8004ad0 <HAL_SPI_Transmit+0xb0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	0792      	lsls	r2, r2, #30
 8004b4a:	d4f0      	bmi.n	8004b2e <HAL_SPI_Transmit+0x10e>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004b4c:	2e00      	cmp	r6, #0
 8004b4e:	d0d7      	beq.n	8004b00 <HAL_SPI_Transmit+0xe0>
 8004b50:	1c73      	adds	r3, r6, #1
 8004b52:	d0f3      	beq.n	8004b3c <HAL_SPI_Transmit+0x11c>
 8004b54:	f7fc ff74 	bl	8001a40 <HAL_GetTick>
 8004b58:	1bc0      	subs	r0, r0, r7
 8004b5a:	4286      	cmp	r6, r0
 8004b5c:	d8ee      	bhi.n	8004b3c <HAL_SPI_Transmit+0x11c>
 8004b5e:	e7cf      	b.n	8004b00 <HAL_SPI_Transmit+0xe0>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b60:	68a3      	ldr	r3, [r4, #8]
 8004b62:	b933      	cbnz	r3, 8004b72 <HAL_SPI_Transmit+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b64:	9303      	str	r3, [sp, #12]
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	9203      	str	r2, [sp, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	9303      	str	r3, [sp, #12]
 8004b70:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004b74:	3000      	adds	r0, #0
 8004b76:	bf18      	it	ne
 8004b78:	2001      	movne	r0, #1
 8004b7a:	e7c2      	b.n	8004b02 <HAL_SPI_Transmit+0xe2>
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	e7c0      	b.n	8004b02 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8004b80:	2002      	movs	r0, #2
 8004b82:	e7c4      	b.n	8004b0e <HAL_SPI_Transmit+0xee>
 8004b84:	080084b6 	.word	0x080084b6

08004b88 <HAL_SPI_GetState>:
  return hspi->State;
 8004b88:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004b8c:	4770      	bx	lr
	...

08004b90 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b90:	6a03      	ldr	r3, [r0, #32]
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b98:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8004b9a:	6842      	ldr	r2, [r0, #4]
{
 8004b9c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004ba6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ba8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004baa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004bae:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004bb0:	4c0c      	ldr	r4, [pc, #48]	; (8004be4 <TIM_OC1_SetConfig+0x54>)
 8004bb2:	42a0      	cmp	r0, r4
 8004bb4:	d009      	beq.n	8004bca <TIM_OC1_SetConfig+0x3a>
 8004bb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004bba:	42a0      	cmp	r0, r4
 8004bbc:	d005      	beq.n	8004bca <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bc2:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004bc6:	6203      	str	r3, [r0, #32]
} 
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8004bca:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bcc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bce:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004bd2:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bd4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bda:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be0:	4322      	orrs	r2, r4
 8004be2:	e7ec      	b.n	8004bbe <TIM_OC1_SetConfig+0x2e>
 8004be4:	40010000 	.word	0x40010000

08004be8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004be8:	6a03      	ldr	r3, [r0, #32]
 8004bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8004bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf4:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8004bf6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfa:	69c6      	ldr	r6, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004bfe:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004c02:	431e      	orrs	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c04:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004c06:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <TIM_OC3_SetConfig+0x9c>)
 8004c10:	4298      	cmp	r0, r3
{
 8004c12:	4605      	mov	r5, r0
 8004c14:	460f      	mov	r7, r1
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004c16:	d003      	beq.n	8004c20 <TIM_OC3_SetConfig+0x38>
 8004c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1c:	4298      	cmp	r0, r3
 8004c1e:	d128      	bne.n	8004c72 <TIM_OC3_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f033 0308 	bics.w	r3, r3, #8
 8004c26:	d004      	beq.n	8004c32 <TIM_OC3_SetConfig+0x4a>
 8004c28:	f241 3119 	movw	r1, #4889	; 0x1319
 8004c2c:	4816      	ldr	r0, [pc, #88]	; (8004c88 <TIM_OC3_SetConfig+0xa0>)
 8004c2e:	f7fc f888 	bl	8000d42 <assert_failed>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8004c38:	d004      	beq.n	8004c44 <TIM_OC3_SetConfig+0x5c>
 8004c3a:	f241 311a 	movw	r1, #4890	; 0x131a
 8004c3e:	4812      	ldr	r0, [pc, #72]	; (8004c88 <TIM_OC3_SetConfig+0xa0>)
 8004c40:	f7fc f87f 	bl	8000d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8004c4a:	d004      	beq.n	8004c56 <TIM_OC3_SetConfig+0x6e>
 8004c4c:	f241 311b 	movw	r1, #4891	; 0x131b
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <TIM_OC3_SetConfig+0xa0>)
 8004c52:	f7fc f876 	bl	8000d42 <assert_failed>
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c56:	68fb      	ldr	r3, [r7, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c58:	69ba      	ldr	r2, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c5a:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c5e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c62:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c64:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c68:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c6a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c6e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c72:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8004c74:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004c78:	61ee      	str	r6, [r5, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7a:	63eb      	str	r3, [r5, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7c:	622c      	str	r4, [r5, #32]
}
 8004c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	080084f4 	.word	0x080084f4

08004c8c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c8c:	6a03      	ldr	r3, [r0, #32]
 8004c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8004c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c96:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c98:	6a07      	ldr	r7, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8004c9a:	6845      	ldr	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9c:	69c6      	ldr	r6, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9e:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca0:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca8:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004caa:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cae:	ea47 3703 	orr.w	r7, r7, r3, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <TIM_OC4_SetConfig+0x68>)
 8004cb4:	4298      	cmp	r0, r3
{
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4688      	mov	r8, r1
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC4_SetConfig+0x38>
 8004cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	d10f      	bne.n	8004ce4 <TIM_OC4_SetConfig+0x58>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004cc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004cc8:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8004ccc:	d004      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x4c>
 8004cce:	f241 315f 	movw	r1, #4959	; 0x135f
 8004cd2:	4809      	ldr	r0, [pc, #36]	; (8004cf8 <TIM_OC4_SetConfig+0x6c>)
 8004cd4:	f7fc f835 	bl	8000d42 <assert_failed>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd8:	f8d8 3014 	ldr.w	r3, [r8, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cdc:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce0:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  TIMx->CR2 = tmpcr2;
 8004ce8:	6065      	str	r5, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004cea:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004cec:	6423      	str	r3, [r4, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	6227      	str	r7, [r4, #32]
}
 8004cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	080084f4 	.word	0x080084f4

08004cfc <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004cfc:	6803      	ldr	r3, [r0, #0]
 8004cfe:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <HAL_TIM_Base_Start_IT+0x94>)
 8004d00:	4293      	cmp	r3, r2
{
 8004d02:	b510      	push	{r4, lr}
 8004d04:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d06:	d037      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d034      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d030      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d028      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d024      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d020      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d36:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01c      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d3e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d014      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d010      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d56:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d008      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x7c>
 8004d6e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8004d72:	4808      	ldr	r0, [pc, #32]	; (8004d94 <HAL_TIM_Base_Start_IT+0x98>)
 8004d74:	f7fb ffe5 	bl	8000d42 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	080084f4 	.word	0x080084f4

08004d98 <HAL_TIM_Base_Stop_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d98:	6803      	ldr	r3, [r0, #0]
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_TIM_Base_Stop_IT+0xa8>)
 8004d9c:	4293      	cmp	r3, r2
{
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004da2:	d037      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d034      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004daa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d030      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02c      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d028      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d024      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dd2:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01c      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dda:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d014      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d010      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004df2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00c      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004dfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d008      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_Base_Stop_IT+0x7c>
 8004e0a:	f240 1179 	movw	r1, #377	; 0x179
 8004e0e:	480d      	ldr	r0, [pc, #52]	; (8004e44 <HAL_TIM_Base_Stop_IT+0xac>)
 8004e10:	f7fb ff97 	bl	8000d42 <assert_failed>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8004e1e:	6a19      	ldr	r1, [r3, #32]
 8004e20:	f241 1211 	movw	r2, #4369	; 0x1111
 8004e24:	4211      	tst	r1, r2
 8004e26:	d108      	bne.n	8004e3a <HAL_TIM_Base_Stop_IT+0xa2>
 8004e28:	6a19      	ldr	r1, [r3, #32]
 8004e2a:	f240 4244 	movw	r2, #1092	; 0x444
 8004e2e:	4211      	tst	r1, r2
 8004e30:	bf02      	ittt	eq
 8004e32:	681a      	ldreq	r2, [r3, #0]
 8004e34:	f022 0201 	biceq.w	r2, r2, #1
 8004e38:	601a      	streq	r2, [r3, #0]
}
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	080084f4 	.word	0x080084f4

08004e48 <HAL_TIM_OC_DelayElapsedCallback>:
 8004e48:	4770      	bx	lr

08004e4a <HAL_TIM_IC_CaptureCallback>:
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIM_PWM_PulseFinishedCallback>:
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_TriggerCallback>:
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e50:	6803      	ldr	r3, [r0, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	0791      	lsls	r1, r2, #30
{
 8004e56:	b510      	push	{r4, lr}
 8004e58:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e5a:	d50e      	bpl.n	8004e7a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	0792      	lsls	r2, r2, #30
 8004e60:	d50b      	bpl.n	8004e7a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e62:	f06f 0202 	mvn.w	r2, #2
 8004e66:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e68:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e6c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	d077      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	f7ff ffea 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	2300      	movs	r3, #0
 8004e78:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	0750      	lsls	r0, r2, #29
 8004e80:	d510      	bpl.n	8004ea4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	0751      	lsls	r1, r2, #29
 8004e86:	d50d      	bpl.n	8004ea4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e88:	f06f 0204 	mvn.w	r2, #4
 8004e8c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e8e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e90:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e92:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e96:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004e98:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e9a:	d068      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9c:	f7ff ffd5 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	0712      	lsls	r2, r2, #28
 8004eaa:	d50f      	bpl.n	8004ecc <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	0710      	lsls	r0, r2, #28
 8004eb0:	d50c      	bpl.n	8004ecc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb2:	f06f 0208 	mvn.w	r2, #8
 8004eb6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eba:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ebc:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ebe:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec2:	d05a      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec4:	f7ff ffc1 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	06d2      	lsls	r2, r2, #27
 8004ed2:	d510      	bpl.n	8004ef6 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	06d0      	lsls	r0, r2, #27
 8004ed8:	d50d      	bpl.n	8004ef6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eda:	f06f 0210 	mvn.w	r2, #16
 8004ede:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eec:	d04b      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	f7ff ffac 	bl	8004e4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	07d1      	lsls	r1, r2, #31
 8004efc:	d508      	bpl.n	8004f10 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	07d2      	lsls	r2, r2, #31
 8004f02:	d505      	bpl.n	8004f10 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f7fb ff02 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	0610      	lsls	r0, r2, #24
 8004f16:	d508      	bpl.n	8004f2a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	0611      	lsls	r1, r2, #24
 8004f1c:	d505      	bpl.n	8004f2a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004f24:	4620      	mov	r0, r4
 8004f26:	f000 fb4e 	bl	80055c6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	0652      	lsls	r2, r2, #25
 8004f30:	d508      	bpl.n	8004f44 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	0650      	lsls	r0, r2, #25
 8004f36:	d505      	bpl.n	8004f44 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f3c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff ff85 	bl	8004e4e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	0691      	lsls	r1, r2, #26
 8004f4a:	d522      	bpl.n	8004f92 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	0692      	lsls	r2, r2, #26
 8004f50:	d51f      	bpl.n	8004f92 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f52:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004f56:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f58:	611a      	str	r2, [r3, #16]
}
 8004f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8004f5e:	f000 bb31 	b.w	80055c4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	f7ff ff71 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7ff ff70 	bl	8004e4c <HAL_TIM_PWM_PulseFinishedCallback>
 8004f6c:	e783      	b.n	8004e76 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	f7ff ff6b 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7ff ff6a 	bl	8004e4c <HAL_TIM_PWM_PulseFinishedCallback>
 8004f78:	e792      	b.n	8004ea0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	f7ff ff65 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f7ff ff64 	bl	8004e4c <HAL_TIM_PWM_PulseFinishedCallback>
 8004f84:	e7a0      	b.n	8004ec8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	f7ff ff5f 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff ff5e 	bl	8004e4c <HAL_TIM_PWM_PulseFinishedCallback>
 8004f90:	e7af      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xa2>
 8004f92:	bd10      	pop	{r4, pc}

08004f94 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004f94:	4a2e      	ldr	r2, [pc, #184]	; (8005050 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8004f96:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004f98:	4290      	cmp	r0, r2
 8004f9a:	d012      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004fa2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004fa6:	4290      	cmp	r0, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fae:	4290      	cmp	r0, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fb6:	4290      	cmp	r0, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004fba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004fbe:	4290      	cmp	r0, r2
 8004fc0:	d11d      	bne.n	8004ffe <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8004fc2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004fca:	4a21      	ldr	r2, [pc, #132]	; (8005050 <TIM_Base_SetConfig+0xbc>)
 8004fcc:	4290      	cmp	r0, r2
 8004fce:	d104      	bne.n	8004fda <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	e028      	b.n	800502c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004fda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004fde:	d0f7      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <TIM_Base_SetConfig+0xc0>)
 8004fe2:	4290      	cmp	r0, r2
 8004fe4:	d0f4      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8004fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fea:	4290      	cmp	r0, r2
 8004fec:	d0f0      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8004fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff2:	4290      	cmp	r0, r2
 8004ff4:	d0ec      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8004ff6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004ffa:	4290      	cmp	r0, r2
 8004ffc:	d0e8      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <TIM_Base_SetConfig+0xc4>)
 8005000:	4290      	cmp	r0, r2
 8005002:	d0e5      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8005004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005008:	4290      	cmp	r0, r2
 800500a:	d0e1      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 800500c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005010:	4290      	cmp	r0, r2
 8005012:	d0dd      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8005014:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005018:	4290      	cmp	r0, r2
 800501a:	d0d9      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 800501c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005020:	4290      	cmp	r0, r2
 8005022:	d0d5      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
 8005024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005028:	4290      	cmp	r0, r2
 800502a:	d0d1      	beq.n	8004fd0 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800502c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502e:	688b      	ldr	r3, [r1, #8]
 8005030:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005032:	680b      	ldr	r3, [r1, #0]
 8005034:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <TIM_Base_SetConfig+0xbc>)
 8005038:	4298      	cmp	r0, r3
 800503a:	d006      	beq.n	800504a <TIM_Base_SetConfig+0xb6>
 800503c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005040:	4298      	cmp	r0, r3
 8005042:	d002      	beq.n	800504a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8005044:	2301      	movs	r3, #1
 8005046:	6143      	str	r3, [r0, #20]
}
 8005048:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800504a:	690b      	ldr	r3, [r1, #16]
 800504c:	6303      	str	r3, [r0, #48]	; 0x30
 800504e:	e7f9      	b.n	8005044 <TIM_Base_SetConfig+0xb0>
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40014000 	.word	0x40014000

0800505c <HAL_TIM_Base_Init>:
{ 
 800505c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800505e:	4604      	mov	r4, r0
 8005060:	2800      	cmp	r0, #0
 8005062:	d069      	beq.n	8005138 <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8005064:	6803      	ldr	r3, [r0, #0]
 8005066:	4a35      	ldr	r2, [pc, #212]	; (800513c <HAL_TIM_Base_Init+0xe0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d033      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 8005072:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005076:	4293      	cmp	r3, r2
 8005078:	d02f      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 800507a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800507e:	4293      	cmp	r3, r2
 8005080:	d02b      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 8005082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 800508a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800508e:	4293      	cmp	r3, r2
 8005090:	d023      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 8005092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 800509a:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01b      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050a2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d017      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00f      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050ba:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <HAL_TIM_Base_Init+0x7e>
 80050d2:	21d9      	movs	r1, #217	; 0xd9
 80050d4:	481a      	ldr	r0, [pc, #104]	; (8005140 <HAL_TIM_Base_Init+0xe4>)
 80050d6:	f7fb fe34 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80050da:	68a3      	ldr	r3, [r4, #8]
 80050dc:	f033 0210 	bics.w	r2, r3, #16
 80050e0:	d009      	beq.n	80050f6 <HAL_TIM_Base_Init+0x9a>
 80050e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050e6:	2a20      	cmp	r2, #32
 80050e8:	d005      	beq.n	80050f6 <HAL_TIM_Base_Init+0x9a>
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_Base_Init+0x9a>
 80050ee:	21da      	movs	r1, #218	; 0xda
 80050f0:	4813      	ldr	r0, [pc, #76]	; (8005140 <HAL_TIM_Base_Init+0xe4>)
 80050f2:	f7fb fe26 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80050fc:	d006      	beq.n	800510c <HAL_TIM_Base_Init+0xb0>
 80050fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005102:	d003      	beq.n	800510c <HAL_TIM_Base_Init+0xb0>
 8005104:	21db      	movs	r1, #219	; 0xdb
 8005106:	480e      	ldr	r0, [pc, #56]	; (8005140 <HAL_TIM_Base_Init+0xe4>)
 8005108:	f7fb fe1b 	bl	8000d42 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800510c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005110:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005114:	b923      	cbnz	r3, 8005120 <HAL_TIM_Base_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 8005116:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800511a:	4620      	mov	r0, r4
 800511c:	f7fb ff88 	bl	8001030 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005126:	6820      	ldr	r0, [r4, #0]
 8005128:	1d21      	adds	r1, r4, #4
 800512a:	f7ff ff33 	bl	8004f94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800512e:	2301      	movs	r3, #1
 8005130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8005134:	2000      	movs	r0, #0
 8005136:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005138:	2001      	movs	r0, #1
}
 800513a:	bd10      	pop	{r4, pc}
 800513c:	40010000 	.word	0x40010000
 8005140:	080084f4 	.word	0x080084f4

08005144 <HAL_TIM_PWM_Init>:
{
 8005144:	b510      	push	{r4, lr}
  if(htim == NULL)
 8005146:	4604      	mov	r4, r0
 8005148:	2800      	cmp	r0, #0
 800514a:	d06c      	beq.n	8005226 <HAL_TIM_PWM_Init+0xe2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800514c:	6803      	ldr	r3, [r0, #0]
 800514e:	4a37      	ldr	r2, [pc, #220]	; (800522c <HAL_TIM_PWM_Init+0xe8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d037      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d034      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 800515a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800515e:	4293      	cmp	r3, r2
 8005160:	d030      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 8005162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005166:	4293      	cmp	r3, r2
 8005168:	d02c      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 800516a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800516e:	4293      	cmp	r3, r2
 8005170:	d028      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 8005172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005176:	4293      	cmp	r3, r2
 8005178:	d024      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 800517a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517e:	4293      	cmp	r3, r2
 8005180:	d020      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 8005182:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8005186:	4293      	cmp	r3, r2
 8005188:	d01c      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 800518a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 8005192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005196:	4293      	cmp	r3, r2
 8005198:	d014      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 800519a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800519e:	4293      	cmp	r3, r2
 80051a0:	d010      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 80051a2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00c      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 80051aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d008      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 80051b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_PWM_Init+0x80>
 80051ba:	f240 31f3 	movw	r1, #1011	; 0x3f3
 80051be:	481c      	ldr	r0, [pc, #112]	; (8005230 <HAL_TIM_PWM_Init+0xec>)
 80051c0:	f7fb fdbf 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80051c4:	68a3      	ldr	r3, [r4, #8]
 80051c6:	f033 0210 	bics.w	r2, r3, #16
 80051ca:	d00a      	beq.n	80051e2 <HAL_TIM_PWM_Init+0x9e>
 80051cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051d0:	2a20      	cmp	r2, #32
 80051d2:	d006      	beq.n	80051e2 <HAL_TIM_PWM_Init+0x9e>
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d004      	beq.n	80051e2 <HAL_TIM_PWM_Init+0x9e>
 80051d8:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80051dc:	4814      	ldr	r0, [pc, #80]	; (8005230 <HAL_TIM_PWM_Init+0xec>)
 80051de:	f7fb fdb0 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80051e8:	d007      	beq.n	80051fa <HAL_TIM_PWM_Init+0xb6>
 80051ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ee:	d004      	beq.n	80051fa <HAL_TIM_PWM_Init+0xb6>
 80051f0:	f240 31f5 	movw	r1, #1013	; 0x3f5
 80051f4:	480e      	ldr	r0, [pc, #56]	; (8005230 <HAL_TIM_PWM_Init+0xec>)
 80051f6:	f7fb fda4 	bl	8000d42 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80051fa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80051fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005202:	b923      	cbnz	r3, 800520e <HAL_TIM_PWM_Init+0xca>
    htim->Lock = HAL_UNLOCKED;
 8005204:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8005208:	4620      	mov	r0, r4
 800520a:	f7fb ff47 	bl	800109c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800520e:	2302      	movs	r3, #2
 8005210:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1d21      	adds	r1, r4, #4
 8005218:	f7ff febc 	bl	8004f94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800521c:	2301      	movs	r3, #1
 800521e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8005222:	2000      	movs	r0, #0
 8005224:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005226:	2001      	movs	r0, #1
}  
 8005228:	bd10      	pop	{r4, pc}
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	080084f4 	.word	0x080084f4

08005234 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	6a03      	ldr	r3, [r0, #32]
 8005236:	f023 0310 	bic.w	r3, r3, #16
{
 800523a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800523e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005240:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8005242:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005246:	6987      	ldr	r7, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800524a:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005252:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005254:	f024 0420 	bic.w	r4, r4, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005258:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <TIM_OC2_SetConfig+0x78>)
 800525e:	4298      	cmp	r0, r3
{
 8005260:	4605      	mov	r5, r0
 8005262:	460e      	mov	r6, r1
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005264:	d003      	beq.n	800526e <TIM_OC2_SetConfig+0x3a>
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	4298      	cmp	r0, r3
 800526c:	d116      	bne.n	800529c <TIM_OC2_SetConfig+0x68>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800526e:	68f3      	ldr	r3, [r6, #12]
 8005270:	f033 0308 	bics.w	r3, r3, #8
 8005274:	d004      	beq.n	8005280 <TIM_OC2_SetConfig+0x4c>
 8005276:	f241 2107 	movw	r1, #4615	; 0x1207
 800527a:	480d      	ldr	r0, [pc, #52]	; (80052b0 <TIM_OC2_SetConfig+0x7c>)
 800527c:	f7fb fd61 	bl	8000d42 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005280:	68f3      	ldr	r3, [r6, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005282:	69b2      	ldr	r2, [r6, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005284:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800528c:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800528e:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005292:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005298:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800529c:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800529e:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052a2:	61af      	str	r7, [r5, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	63ab      	str	r3, [r5, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80052a6:	622c      	str	r4, [r5, #32]
}
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	40010000 	.word	0x40010000
 80052b0:	080084f4 	.word	0x080084f4

080052b4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80052b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80052b8:	2b01      	cmp	r3, #1
{
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 80052c2:	f000 8116 	beq.w	80054f2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80052c6:	2301      	movs	r3, #1
  assert_param(IS_TIM_CHANNELS(Channel)); 
 80052c8:	2a18      	cmp	r2, #24
  __HAL_LOCK(htim);
 80052ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
 80052ce:	d803      	bhi.n	80052d8 <HAL_TIM_PWM_ConfigChannel+0x24>
 80052d0:	4b89      	ldr	r3, [pc, #548]	; (80054f8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80052d2:	40d3      	lsrs	r3, r2
 80052d4:	07db      	lsls	r3, r3, #31
 80052d6:	d404      	bmi.n	80052e2 <HAL_TIM_PWM_ConfigChannel+0x2e>
 80052d8:	f640 414a 	movw	r1, #3146	; 0xc4a
 80052dc:	4887      	ldr	r0, [pc, #540]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 80052de:	f7fb fd30 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	2b60      	cmp	r3, #96	; 0x60
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x42>
 80052ec:	f640 414b 	movw	r1, #3147	; 0xc4b
 80052f0:	4882      	ldr	r0, [pc, #520]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 80052f2:	f7fb fd26 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80052f6:	68ab      	ldr	r3, [r5, #8]
 80052f8:	f033 0302 	bics.w	r3, r3, #2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x54>
 80052fe:	f640 414c 	movw	r1, #3148	; 0xc4c
 8005302:	487e      	ldr	r0, [pc, #504]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005304:	f7fb fd1d 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005308:	692b      	ldr	r3, [r5, #16]
 800530a:	f033 0304 	bics.w	r3, r3, #4
 800530e:	d004      	beq.n	800531a <HAL_TIM_PWM_ConfigChannel+0x66>
 8005310:	f640 414d 	movw	r1, #3149	; 0xc4d
 8005314:	4879      	ldr	r0, [pc, #484]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005316:	f7fb fd14 	bl	8000d42 <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 800531a:	2302      	movs	r3, #2
 800531c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  switch (Channel)
 8005320:	2e0c      	cmp	r6, #12
 8005322:	d84d      	bhi.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8005324:	e8df f006 	tbb	[pc, r6]
 8005328:	4c4c4c07 	.word	0x4c4c4c07
 800532c:	4c4c4c53 	.word	0x4c4c4c53
 8005330:	4c4c4c89 	.word	0x4c4c4c89
 8005334:	b7          	.byte	0xb7
 8005335:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	4a71      	ldr	r2, [pc, #452]	; (8005500 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02f      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005342:	d02c      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005344:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005348:	4293      	cmp	r3, r2
 800534a:	d028      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 800534c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005350:	4293      	cmp	r3, r2
 8005352:	d024      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005358:	4293      	cmp	r3, r2
 800535a:	d020      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 800535c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005360:	4293      	cmp	r3, r2
 8005362:	d01c      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005364:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 800536c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005370:	4293      	cmp	r3, r2
 8005372:	d014      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005378:	4293      	cmp	r3, r2
 800537a:	d010      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 800537c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005380:	4293      	cmp	r3, r2
 8005382:	d00c      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005388:	4293      	cmp	r3, r2
 800538a:	d008      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 800538c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005394:	f640 4155 	movw	r1, #3157	; 0xc55
 8005398:	4858      	ldr	r0, [pc, #352]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 800539a:	f7fb fcd2 	bl	8000d42 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539e:	4629      	mov	r1, r5
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	f7ff fbf5 	bl	8004b90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	f042 0208 	orr.w	r2, r2, #8
 80053b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	f022 0204 	bic.w	r2, r2, #4
 80053b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053be:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80053c2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80053c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	4a4b      	ldr	r2, [pc, #300]	; (8005500 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01f      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d01c      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 80053dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 80053e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d014      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 80053ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d010      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 80053f4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00c      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 80053fc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005400:	4293      	cmp	r3, r2
 8005402:	d008      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 8005404:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x162>
 800540c:	f640 4164 	movw	r1, #3172	; 0xc64
 8005410:	483a      	ldr	r0, [pc, #232]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005412:	f7fb fc96 	bl	8000d42 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005416:	4629      	mov	r1, r5
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	f7ff ff0b 	bl	8005234 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005420:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005428:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005430:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005438:	e7c1      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x10a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	4a30      	ldr	r2, [pc, #192]	; (8005500 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d017      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d014      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005448:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800544c:	4293      	cmp	r3, r2
 800544e:	d010      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005454:	4293      	cmp	r3, r2
 8005456:	d00c      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800545c:	4293      	cmp	r3, r2
 800545e:	d008      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005460:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005468:	f640 4173 	movw	r1, #3187	; 0xc73
 800546c:	4823      	ldr	r0, [pc, #140]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 800546e:	f7fb fc68 	bl	8000d42 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005472:	4629      	mov	r1, r5
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	f7ff fbb7 	bl	8004be8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800547a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800547c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	f042 0208 	orr.w	r2, r2, #8
 8005484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	f022 0204 	bic.w	r2, r2, #4
 800548c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8005492:	61da      	str	r2, [r3, #28]
    break;
 8005494:	e794      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a2:	d014      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 80054a4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d010      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 80054ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00c      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 80054b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d008      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 80054bc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 80054c4:	f640 4182 	movw	r1, #3202	; 0xc82
 80054c8:	480c      	ldr	r0, [pc, #48]	; (80054fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 80054ca:	f7fb fc3a 	bl	8000d42 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ce:	4629      	mov	r1, r5
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	f7ff fbdb 	bl	8004c8c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80054d8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054f0:	e7cf      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x1de>
  __HAL_LOCK(htim);
 80054f2:	2002      	movs	r0, #2
}
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
 80054f6:	bf00      	nop
 80054f8:	01001111 	.word	0x01001111
 80054fc:	080084f4 	.word	0x080084f4
 8005500:	40010000 	.word	0x40010000

08005504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005504:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005506:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005508:	6803      	ldr	r3, [r0, #0]
 800550a:	4293      	cmp	r3, r2
{
 800550c:	4604      	mov	r4, r0
 800550e:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005510:	d01f      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d01c      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005518:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005520:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005524:	4293      	cmp	r3, r2
 8005526:	d014      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005528:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800552c:	4293      	cmp	r3, r2
 800552e:	d010      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005534:	4293      	cmp	r3, r2
 8005536:	d00c      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553c:	4293      	cmp	r3, r2
 800553e:	d008      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005540:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005548:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 800554c:	481c      	ldr	r0, [pc, #112]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800554e:	f7fb fbf8 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8005558:	d006      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d004      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800555e:	f240 6159 	movw	r1, #1625	; 0x659
 8005562:	4817      	ldr	r0, [pc, #92]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005564:	f7fb fbed 	bl	8000d42 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005568:	686b      	ldr	r3, [r5, #4]
 800556a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800556e:	d004      	beq.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005570:	f240 615a 	movw	r1, #1626	; 0x65a
 8005574:	4812      	ldr	r0, [pc, #72]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005576:	f7fb fbe4 	bl	8000d42 <assert_failed>
  
  __HAL_LOCK(htim);
 800557a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800557e:	2b01      	cmp	r3, #1
 8005580:	f04f 0002 	mov.w	r0, #2
 8005584:	d018      	beq.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
  
  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005586:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800558c:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800558e:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005590:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005594:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800559c:	689a      	ldr	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800559e:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80055a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 80055ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80055b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
} 
 80055b8:	bd38      	pop	{r3, r4, r5, pc}
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	08008532 	.word	0x08008532

080055c4 <HAL_TIMEx_CommutationCallback>:
 80055c4:	4770      	bx	lr

080055c6 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c6:	4770      	bx	lr

080055c8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c8:	6803      	ldr	r3, [r0, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055da:	2320      	movs	r3, #32
 80055dc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80055e0:	4770      	bx	lr
	...

080055e4 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80055e4:	6842      	ldr	r2, [r0, #4]
 80055e6:	4b9e      	ldr	r3, [pc, #632]	; (8005860 <UART_SetConfig+0x27c>)
 80055e8:	429a      	cmp	r2, r3
{
 80055ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ee:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80055f0:	d904      	bls.n	80055fc <UART_SetConfig+0x18>
 80055f2:	f640 1187 	movw	r1, #2439	; 0x987
 80055f6:	489b      	ldr	r0, [pc, #620]	; (8005864 <UART_SetConfig+0x280>)
 80055f8:	f7fb fba3 	bl	8000d42 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80055fc:	68e3      	ldr	r3, [r4, #12]
 80055fe:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8005602:	d004      	beq.n	800560e <UART_SetConfig+0x2a>
 8005604:	f640 1188 	movw	r1, #2440	; 0x988
 8005608:	4896      	ldr	r0, [pc, #600]	; (8005864 <UART_SetConfig+0x280>)
 800560a:	f7fb fb9a 	bl	8000d42 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8005614:	d007      	beq.n	8005626 <UART_SetConfig+0x42>
 8005616:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800561a:	d004      	beq.n	8005626 <UART_SetConfig+0x42>
 800561c:	f640 1189 	movw	r1, #2441	; 0x989
 8005620:	4890      	ldr	r0, [pc, #576]	; (8005864 <UART_SetConfig+0x280>)
 8005622:	f7fb fb8e 	bl	8000d42 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005626:	6963      	ldr	r3, [r4, #20]
 8005628:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800562c:	4213      	tst	r3, r2
 800562e:	d100      	bne.n	8005632 <UART_SetConfig+0x4e>
 8005630:	b923      	cbnz	r3, 800563c <UART_SetConfig+0x58>
 8005632:	f640 118a 	movw	r1, #2442	; 0x98a
 8005636:	488b      	ldr	r0, [pc, #556]	; (8005864 <UART_SetConfig+0x280>)
 8005638:	f7fb fb83 	bl	8000d42 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800563c:	6826      	ldr	r6, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800563e:	68e2      	ldr	r2, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8005640:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005642:	6920      	ldr	r0, [r4, #16]
 8005644:	69e1      	ldr	r1, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005646:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800564a:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800564c:	6133      	str	r3, [r6, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800564e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8005650:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005652:	4303      	orrs	r3, r0
 8005654:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005656:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800565a:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800565c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005660:	430b      	orrs	r3, r1
 8005662:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005664:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005666:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005668:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800566a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800566e:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005670:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8005674:	6173      	str	r3, [r6, #20]
 8005676:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005678:	d17c      	bne.n	8005774 <UART_SetConfig+0x190>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800567a:	429e      	cmp	r6, r3
 800567c:	d003      	beq.n	8005686 <UART_SetConfig+0xa2>
 800567e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005682:	429e      	cmp	r6, r3
 8005684:	d144      	bne.n	8005710 <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005686:	f7fe fdf3 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 800568a:	2519      	movs	r5, #25
 800568c:	fb05 f300 	mul.w	r3, r5, r0
 8005690:	6860      	ldr	r0, [r4, #4]
 8005692:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005696:	0040      	lsls	r0, r0, #1
 8005698:	fbb3 f3f0 	udiv	r3, r3, r0
 800569c:	fbb3 f3f9 	udiv	r3, r3, r9
 80056a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056a4:	f7fe fde4 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	4368      	muls	r0, r5
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	fbb0 f7f3 	udiv	r7, r0, r3
 80056b2:	f7fe fddd 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	4368      	muls	r0, r5
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80056c4:	fb09 7313 	mls	r3, r9, r3, r7
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	3332      	adds	r3, #50	; 0x32
 80056cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80056d6:	f7fe fdcb 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	4368      	muls	r0, r5
 80056de:	0052      	lsls	r2, r2, #1
 80056e0:	fbb0 faf2 	udiv	sl, r0, r2
 80056e4:	f7fe fdc4 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	4368      	muls	r0, r5
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80056f6:	fb09 a313 	mls	r3, r9, r3, sl
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	3332      	adds	r3, #50	; 0x32
 80056fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005708:	443b      	add	r3, r7
 800570a:	60b3      	str	r3, [r6, #8]
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005710:	f7fe fd96 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005714:	2519      	movs	r5, #25
 8005716:	fb05 f300 	mul.w	r3, r5, r0
 800571a:	6860      	ldr	r0, [r4, #4]
 800571c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005720:	0040      	lsls	r0, r0, #1
 8005722:	fbb3 f3f0 	udiv	r3, r3, r0
 8005726:	fbb3 f3f9 	udiv	r3, r3, r9
 800572a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800572e:	f7fe fd87 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005732:	6863      	ldr	r3, [r4, #4]
 8005734:	4368      	muls	r0, r5
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	fbb0 f7f3 	udiv	r7, r0, r3
 800573c:	f7fe fd80 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	4368      	muls	r0, r5
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	fbb0 f3f3 	udiv	r3, r0, r3
 800574a:	fbb3 f3f9 	udiv	r3, r3, r9
 800574e:	fb09 7313 	mls	r3, r9, r3, r7
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	fbb3 f3f9 	udiv	r3, r3, r9
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8005760:	f7fe fd6e 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005764:	6862      	ldr	r2, [r4, #4]
 8005766:	4368      	muls	r0, r5
 8005768:	0052      	lsls	r2, r2, #1
 800576a:	fbb0 faf2 	udiv	sl, r0, r2
 800576e:	f7fe fd67 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005772:	e7b9      	b.n	80056e8 <UART_SetConfig+0x104>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005774:	429e      	cmp	r6, r3
 8005776:	d002      	beq.n	800577e <UART_SetConfig+0x19a>
 8005778:	4b3c      	ldr	r3, [pc, #240]	; (800586c <UART_SetConfig+0x288>)
 800577a:	429e      	cmp	r6, r3
 800577c:	d140      	bne.n	8005800 <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800577e:	f7fe fd77 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8005782:	6867      	ldr	r7, [r4, #4]
 8005784:	2519      	movs	r5, #25
 8005786:	f04f 0964 	mov.w	r9, #100	; 0x64
 800578a:	fb05 f300 	mul.w	r3, r5, r0
 800578e:	00bf      	lsls	r7, r7, #2
 8005790:	fbb3 f3f7 	udiv	r3, r3, r7
 8005794:	fbb3 f3f9 	udiv	r3, r3, r9
 8005798:	011f      	lsls	r7, r3, #4
 800579a:	f7fe fd69 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	4368      	muls	r0, r5
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fbb0 f8f3 	udiv	r8, r0, r3
 80057a8:	f7fe fd62 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	4368      	muls	r0, r5
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80057ba:	fb09 8313 	mls	r3, r9, r3, r8
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	3332      	adds	r3, #50	; 0x32
 80057c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80057c6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80057ca:	f7fe fd51 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80057ce:	6862      	ldr	r2, [r4, #4]
 80057d0:	4368      	muls	r0, r5
 80057d2:	0092      	lsls	r2, r2, #2
 80057d4:	fbb0 faf2 	udiv	sl, r0, r2
 80057d8:	f7fe fd4a 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80057dc:	6863      	ldr	r3, [r4, #4]
 80057de:	4368      	muls	r0, r5
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80057ea:	fb09 a313 	mls	r3, r9, r3, sl
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	3332      	adds	r3, #50	; 0x32
 80057f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	ea43 0308 	orr.w	r3, r3, r8
 80057fe:	e783      	b.n	8005708 <UART_SetConfig+0x124>
 8005800:	f7fe fd1e 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005804:	6867      	ldr	r7, [r4, #4]
 8005806:	2519      	movs	r5, #25
 8005808:	f04f 0964 	mov.w	r9, #100	; 0x64
 800580c:	fb05 f300 	mul.w	r3, r5, r0
 8005810:	00bf      	lsls	r7, r7, #2
 8005812:	fbb3 f3f7 	udiv	r3, r3, r7
 8005816:	fbb3 f3f9 	udiv	r3, r3, r9
 800581a:	011f      	lsls	r7, r3, #4
 800581c:	f7fe fd10 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005820:	6863      	ldr	r3, [r4, #4]
 8005822:	4368      	muls	r0, r5
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	fbb0 f8f3 	udiv	r8, r0, r3
 800582a:	f7fe fd09 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	4368      	muls	r0, r5
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	fbb0 f3f3 	udiv	r3, r0, r3
 8005838:	fbb3 f3f9 	udiv	r3, r3, r9
 800583c:	fb09 8313 	mls	r3, r9, r3, r8
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	fbb3 f3f9 	udiv	r3, r3, r9
 8005848:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800584c:	f7fe fcf8 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005850:	6862      	ldr	r2, [r4, #4]
 8005852:	4368      	muls	r0, r5
 8005854:	0092      	lsls	r2, r2, #2
 8005856:	fbb0 faf2 	udiv	sl, r0, r2
 800585a:	f7fe fcf1 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 800585e:	e7bd      	b.n	80057dc <UART_SetConfig+0x1f8>
 8005860:	00a037a0 	.word	0x00a037a0
 8005864:	08008573 	.word	0x08008573
 8005868:	40011000 	.word	0x40011000
 800586c:	40011400 	.word	0x40011400

08005870 <HAL_UART_Init>:
{
 8005870:	b510      	push	{r4, lr}
  if(huart == NULL)
 8005872:	4604      	mov	r4, r0
 8005874:	2800      	cmp	r0, #0
 8005876:	d07c      	beq.n	8005972 <HAL_UART_Init+0x102>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005878:	6981      	ldr	r1, [r0, #24]
 800587a:	6803      	ldr	r3, [r0, #0]
 800587c:	4a3e      	ldr	r2, [pc, #248]	; (8005978 <HAL_UART_Init+0x108>)
 800587e:	2900      	cmp	r1, #0
 8005880:	d057      	beq.n	8005932 <HAL_UART_Init+0xc2>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005882:	4293      	cmp	r3, r2
 8005884:	d010      	beq.n	80058a8 <HAL_UART_Init+0x38>
 8005886:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800588a:	4293      	cmp	r3, r2
 800588c:	d00c      	beq.n	80058a8 <HAL_UART_Init+0x38>
 800588e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005892:	4293      	cmp	r3, r2
 8005894:	d008      	beq.n	80058a8 <HAL_UART_Init+0x38>
 8005896:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_UART_Init+0x38>
 800589e:	f44f 7181 	mov.w	r1, #258	; 0x102
 80058a2:	4836      	ldr	r0, [pc, #216]	; (800597c <HAL_UART_Init+0x10c>)
 80058a4:	f7fb fa4d 	bl	8000d42 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80058a8:	69a3      	ldr	r3, [r4, #24]
 80058aa:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80058ae:	d004      	beq.n	80058ba <HAL_UART_Init+0x4a>
 80058b0:	f240 1103 	movw	r1, #259	; 0x103
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80058b4:	4831      	ldr	r0, [pc, #196]	; (800597c <HAL_UART_Init+0x10c>)
 80058b6:	f7fb fa44 	bl	8000d42 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80058c0:	d004      	beq.n	80058cc <HAL_UART_Init+0x5c>
 80058c2:	f240 1109 	movw	r1, #265	; 0x109
 80058c6:	482d      	ldr	r0, [pc, #180]	; (800597c <HAL_UART_Init+0x10c>)
 80058c8:	f7fb fa3b 	bl	8000d42 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80058cc:	69e3      	ldr	r3, [r4, #28]
 80058ce:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80058d2:	d004      	beq.n	80058de <HAL_UART_Init+0x6e>
 80058d4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80058d8:	4828      	ldr	r0, [pc, #160]	; (800597c <HAL_UART_Init+0x10c>)
 80058da:	f7fb fa32 	bl	8000d42 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 80058de:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80058e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058e6:	b923      	cbnz	r3, 80058f2 <HAL_UART_Init+0x82>
    huart->Lock = HAL_UNLOCKED;
 80058e8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7fb fc61 	bl	80011b4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80058f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058f4:	2324      	movs	r3, #36	; 0x24
 80058f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80058fa:	68d3      	ldr	r3, [r2, #12]
 80058fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005900:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005902:	4620      	mov	r0, r4
 8005904:	f7ff fe6e 	bl	80055e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005912:	695a      	ldr	r2, [r3, #20]
 8005914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005918:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005920:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005922:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8005924:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005928:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800592c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8005930:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005932:	4293      	cmp	r3, r2
 8005934:	d0c1      	beq.n	80058ba <HAL_UART_Init+0x4a>
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <HAL_UART_Init+0x110>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d0be      	beq.n	80058ba <HAL_UART_Init+0x4a>
 800593c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005940:	4293      	cmp	r3, r2
 8005942:	d0ba      	beq.n	80058ba <HAL_UART_Init+0x4a>
 8005944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005948:	4293      	cmp	r3, r2
 800594a:	d0b6      	beq.n	80058ba <HAL_UART_Init+0x4a>
 800594c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005950:	4293      	cmp	r3, r2
 8005952:	d0b2      	beq.n	80058ba <HAL_UART_Init+0x4a>
 8005954:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8005958:	4293      	cmp	r3, r2
 800595a:	d0ae      	beq.n	80058ba <HAL_UART_Init+0x4a>
 800595c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8005960:	4293      	cmp	r3, r2
 8005962:	d0aa      	beq.n	80058ba <HAL_UART_Init+0x4a>
 8005964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005968:	4293      	cmp	r3, r2
 800596a:	d0a6      	beq.n	80058ba <HAL_UART_Init+0x4a>
 800596c:	f240 1107 	movw	r1, #263	; 0x107
 8005970:	e7a0      	b.n	80058b4 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8005972:	2001      	movs	r0, #1
}
 8005974:	bd10      	pop	{r4, pc}
 8005976:	bf00      	nop
 8005978:	40011000 	.word	0x40011000
 800597c:	08008573 	.word	0x08008573
 8005980:	40004400 	.word	0x40004400

08005984 <HAL_UART_TxCpltCallback>:
 8005984:	4770      	bx	lr

08005986 <HAL_UART_RxCpltCallback>:
 8005986:	4770      	bx	lr

08005988 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005988:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800598c:	2b22      	cmp	r3, #34	; 0x22
{
 800598e:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005990:	d132      	bne.n	80059f8 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005992:	6883      	ldr	r3, [r0, #8]
 8005994:	6901      	ldr	r1, [r0, #16]
 8005996:	6802      	ldr	r2, [r0, #0]
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800599e:	d11f      	bne.n	80059e0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059a0:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80059a2:	b9c9      	cbnz	r1, 80059d8 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80059ac:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80059ae:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80059b0:	3c01      	subs	r4, #1
 80059b2:	b2a4      	uxth	r4, r4
 80059b4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80059b6:	b96c      	cbnz	r4, 80059d4 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059c0:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80059ca:	2320      	movs	r3, #32
 80059cc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80059d0:	f7ff ffd9 	bl	8005986 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80059d4:	2000      	movs	r0, #0
}
 80059d6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	f823 2b01 	strh.w	r2, [r3], #1
 80059de:	e7e5      	b.n	80059ac <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80059e0:	b921      	cbnz	r1, 80059ec <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059e2:	1c59      	adds	r1, r3, #1
 80059e4:	6852      	ldr	r2, [r2, #4]
 80059e6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e7e0      	b.n	80059ae <UART_Receive_IT+0x26>
 80059ec:	6852      	ldr	r2, [r2, #4]
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	6281      	str	r1, [r0, #40]	; 0x28
 80059f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059f6:	e7f7      	b.n	80059e8 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80059f8:	2002      	movs	r0, #2
 80059fa:	bd10      	pop	{r4, pc}

080059fc <HAL_UART_ErrorCallback>:
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a00:	6803      	ldr	r3, [r0, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a04:	68d9      	ldr	r1, [r3, #12]
{
 8005a06:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8005a08:	0716      	lsls	r6, r2, #28
{
 8005a0a:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a0c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8005a0e:	d107      	bne.n	8005a20 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a10:	0696      	lsls	r6, r2, #26
 8005a12:	d55a      	bpl.n	8005aca <HAL_UART_IRQHandler+0xca>
 8005a14:	068d      	lsls	r5, r1, #26
 8005a16:	d558      	bpl.n	8005aca <HAL_UART_IRQHandler+0xca>
}
 8005a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005a1c:	f7ff bfb4 	b.w	8005988 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a20:	f015 0501 	ands.w	r5, r5, #1
 8005a24:	d102      	bne.n	8005a2c <HAL_UART_IRQHandler+0x2c>
 8005a26:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005a2a:	d04e      	beq.n	8005aca <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a2c:	07d3      	lsls	r3, r2, #31
 8005a2e:	d505      	bpl.n	8005a3c <HAL_UART_IRQHandler+0x3c>
 8005a30:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a32:	bf42      	ittt	mi
 8005a34:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8005a36:	f043 0301 	orrmi.w	r3, r3, #1
 8005a3a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3c:	0750      	lsls	r0, r2, #29
 8005a3e:	d504      	bpl.n	8005a4a <HAL_UART_IRQHandler+0x4a>
 8005a40:	b11d      	cbz	r5, 8005a4a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4a:	0793      	lsls	r3, r2, #30
 8005a4c:	d504      	bpl.n	8005a58 <HAL_UART_IRQHandler+0x58>
 8005a4e:	b11d      	cbz	r5, 8005a58 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a58:	0716      	lsls	r6, r2, #28
 8005a5a:	d504      	bpl.n	8005a66 <HAL_UART_IRQHandler+0x66>
 8005a5c:	b11d      	cbz	r5, 8005a66 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a60:	f043 0308 	orr.w	r3, r3, #8
 8005a64:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d066      	beq.n	8005b3a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a6c:	0695      	lsls	r5, r2, #26
 8005a6e:	d504      	bpl.n	8005a7a <HAL_UART_IRQHandler+0x7a>
 8005a70:	0688      	lsls	r0, r1, #26
 8005a72:	d502      	bpl.n	8005a7a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff ff87 	bl	8005988 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a80:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8005a82:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a84:	d402      	bmi.n	8005a8c <HAL_UART_IRQHandler+0x8c>
 8005a86:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005a8a:	d01a      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8005a8c:	f7ff fd9c 	bl	80055c8 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	0652      	lsls	r2, r2, #25
 8005a96:	d510      	bpl.n	8005aba <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a98:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005a9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005aa2:	b150      	cbz	r0, 8005aba <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aa4:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <HAL_UART_IRQHandler+0x13c>)
 8005aa6:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aa8:	f7fc fdf2 	bl	8002690 <HAL_DMA_Abort_IT>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d044      	beq.n	8005b3a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ab0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ab6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ab8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff ff9e 	bl	80059fc <HAL_UART_ErrorCallback>
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005ac2:	f7ff ff9b 	bl	80059fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aca:	0616      	lsls	r6, r2, #24
 8005acc:	d527      	bpl.n	8005b1e <HAL_UART_IRQHandler+0x11e>
 8005ace:	060d      	lsls	r5, r1, #24
 8005ad0:	d525      	bpl.n	8005b1e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ad2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005ad6:	2a21      	cmp	r2, #33	; 0x21
 8005ad8:	d12f      	bne.n	8005b3a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ada:	68a2      	ldr	r2, [r4, #8]
 8005adc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005ae0:	6a22      	ldr	r2, [r4, #32]
 8005ae2:	d117      	bne.n	8005b14 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ae4:	8811      	ldrh	r1, [r2, #0]
 8005ae6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005aea:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005aec:	6921      	ldr	r1, [r4, #16]
 8005aee:	b979      	cbnz	r1, 8005b10 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8005af0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8005af2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8005af4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005af6:	3a01      	subs	r2, #1
 8005af8:	b292      	uxth	r2, r2
 8005afa:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005afc:	b9ea      	cbnz	r2, 8005b3a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b04:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8005b10:	3201      	adds	r2, #1
 8005b12:	e7ee      	b.n	8005af2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b14:	1c51      	adds	r1, r2, #1
 8005b16:	6221      	str	r1, [r4, #32]
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	e7ea      	b.n	8005af4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b1e:	0650      	lsls	r0, r2, #25
 8005b20:	d50b      	bpl.n	8005b3a <HAL_UART_IRQHandler+0x13a>
 8005b22:	064a      	lsls	r2, r1, #25
 8005b24:	d509      	bpl.n	8005b3a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005b2e:	2320      	movs	r3, #32
 8005b30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005b34:	4620      	mov	r0, r4
 8005b36:	f7ff ff25 	bl	8005984 <HAL_UART_TxCpltCallback>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	08005b41 	.word	0x08005b41

08005b40 <UART_DMAAbortOnError>:
{
 8005b40:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b42:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8005b48:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005b4a:	f7ff ff57 	bl	80059fc <HAL_UART_ErrorCallback>
 8005b4e:	bd08      	pop	{r3, pc}

08005b50 <FMC_SDRAM_Init>:
{
  uint32_t tmpr1 = 0U;
  uint32_t tmpr2 = 0U;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005b50:	4b54      	ldr	r3, [pc, #336]	; (8005ca4 <FMC_SDRAM_Init+0x154>)
 8005b52:	4298      	cmp	r0, r3
{
 8005b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b58:	4605      	mov	r5, r0
 8005b5a:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005b5c:	d004      	beq.n	8005b68 <FMC_SDRAM_Init+0x18>
 8005b5e:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8005b62:	4851      	ldr	r0, [pc, #324]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005b64:	f7fb f8ed 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d904      	bls.n	8005b78 <FMC_SDRAM_Init+0x28>
 8005b6e:	f240 5151 	movw	r1, #1361	; 0x551
 8005b72:	484d      	ldr	r0, [pc, #308]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005b74:	f7fb f8e5 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d904      	bls.n	8005b88 <FMC_SDRAM_Init+0x38>
 8005b7e:	f240 5152 	movw	r1, #1362	; 0x552
 8005b82:	4849      	ldr	r0, [pc, #292]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005b84:	f7fb f8dd 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	f033 0204 	bics.w	r2, r3, #4
 8005b8e:	d006      	beq.n	8005b9e <FMC_SDRAM_Init+0x4e>
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d004      	beq.n	8005b9e <FMC_SDRAM_Init+0x4e>
 8005b94:	f240 5153 	movw	r1, #1363	; 0x553
 8005b98:	4843      	ldr	r0, [pc, #268]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005b9a:	f7fb f8d2 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	f033 0210 	bics.w	r2, r3, #16
 8005ba4:	d006      	beq.n	8005bb4 <FMC_SDRAM_Init+0x64>
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d004      	beq.n	8005bb4 <FMC_SDRAM_Init+0x64>
 8005baa:	f240 5154 	movw	r1, #1364	; 0x554
 8005bae:	483e      	ldr	r0, [pc, #248]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005bb0:	f7fb f8c7 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8005bba:	d004      	beq.n	8005bc6 <FMC_SDRAM_Init+0x76>
 8005bbc:	f240 5155 	movw	r1, #1365	; 0x555
 8005bc0:	4839      	ldr	r0, [pc, #228]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005bc2:	f7fb f8be 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8005bc6:	6963      	ldr	r3, [r4, #20]
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bcc:	2a80      	cmp	r2, #128	; 0x80
 8005bce:	d007      	beq.n	8005be0 <FMC_SDRAM_Init+0x90>
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd4:	d004      	beq.n	8005be0 <FMC_SDRAM_Init+0x90>
 8005bd6:	f240 5156 	movw	r1, #1366	; 0x556
 8005bda:	4833      	ldr	r0, [pc, #204]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005bdc:	f7fb f8b1 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8005be0:	69a3      	ldr	r3, [r4, #24]
 8005be2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005be6:	d004      	beq.n	8005bf2 <FMC_SDRAM_Init+0xa2>
 8005be8:	f240 5157 	movw	r1, #1367	; 0x557
 8005bec:	482e      	ldr	r0, [pc, #184]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005bee:	f7fb f8a8 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8005bf2:	69e3      	ldr	r3, [r4, #28]
 8005bf4:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8005bf8:	d007      	beq.n	8005c0a <FMC_SDRAM_Init+0xba>
 8005bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bfe:	d004      	beq.n	8005c0a <FMC_SDRAM_Init+0xba>
 8005c00:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8005c04:	4828      	ldr	r0, [pc, #160]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005c06:	f7fb f89c 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8005c0a:	6a23      	ldr	r3, [r4, #32]
 8005c0c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005c10:	d004      	beq.n	8005c1c <FMC_SDRAM_Init+0xcc>
 8005c12:	f240 5159 	movw	r1, #1369	; 0x559
 8005c16:	4824      	ldr	r0, [pc, #144]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005c18:	f7fb f893 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8005c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c1e:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8005c22:	d007      	beq.n	8005c34 <FMC_SDRAM_Init+0xe4>
 8005c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c28:	d004      	beq.n	8005c34 <FMC_SDRAM_Init+0xe4>
 8005c2a:	f240 515a 	movw	r1, #1370	; 0x55a
 8005c2e:	481e      	ldr	r0, [pc, #120]	; (8005ca8 <FMC_SDRAM_Init+0x158>)
 8005c30:	f7fb f887 	bl	8000d42 <assert_failed>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8005c3a:	69a0      	ldr	r0, [r4, #24]
 8005c3c:	69e7      	ldr	r7, [r4, #28]
 8005c3e:	6a26      	ldr	r6, [r4, #32]
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005c40:	6829      	ldr	r1, [r5, #0]
 8005c42:	1d22      	adds	r2, r4, #4
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8005c48:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
 8005c4c:	d014      	beq.n	8005c78 <FMC_SDRAM_Init+0x128>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c4e:	431a      	orrs	r2, r3
                                               Init->RowBitsNumber      |\
 8005c50:	ea42 0208 	orr.w	r2, r2, r8
                                               Init->MemoryDataWidth    |\
 8005c54:	ea42 020c 	orr.w	r2, r2, ip
                                               Init->InternalBankNumber |\
 8005c58:	ea42 020e 	orr.w	r2, r2, lr
                                               Init->CASLatency         |\
 8005c5c:	ea42 0300 	orr.w	r3, r2, r0
                                               Init->WriteProtection    |\
 8005c60:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c62:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                                               Init->SDClockPeriod      |\
 8005c66:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c68:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
                                               Init->ReadBurst          |\
 8005c6c:	4323      	orrs	r3, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c6e:	430b      	orrs	r3, r1
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c70:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8005c72:	2000      	movs	r0, #0
 8005c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c78:	433e      	orrs	r6, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005c7a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                        Init->ReadBurst          |\
 8005c7e:	4334      	orrs	r4, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c80:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c82:	430c      	orrs	r4, r1
                       Init->RowBitsNumber      |\
 8005c84:	ea42 0208 	orr.w	r2, r2, r8
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005c88:	6869      	ldr	r1, [r5, #4]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c8a:	602c      	str	r4, [r5, #0]
                       Init->MemoryDataWidth    |\
 8005c8c:	ea42 020c 	orr.w	r2, r2, ip
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c90:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                       Init->InternalBankNumber |\
 8005c94:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c98:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
                       Init->CASLatency         |\
 8005c9c:	4302      	orrs	r2, r0
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c9e:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005ca0:	606a      	str	r2, [r5, #4]
 8005ca2:	e7e6      	b.n	8005c72 <FMC_SDRAM_Init+0x122>
 8005ca4:	a0000140 	.word	0xa0000140
 8005ca8:	080085b2 	.word	0x080085b2

08005cac <FMC_SDRAM_Timing_Init>:
{
  uint32_t tmpr1 = 0U;
  uint32_t tmpr2 = 0U;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <FMC_SDRAM_Timing_Init+0x134>)
 8005cae:	4298      	cmp	r0, r3
{
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005cb8:	d004      	beq.n	8005cc4 <FMC_SDRAM_Timing_Init+0x18>
 8005cba:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8005cbe:	4849      	ldr	r0, [pc, #292]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005cc0:	f7fb f83f 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	2b0f      	cmp	r3, #15
 8005cca:	d904      	bls.n	8005cd6 <FMC_SDRAM_Timing_Init+0x2a>
 8005ccc:	f240 51a2 	movw	r1, #1442	; 0x5a2
 8005cd0:	4844      	ldr	r0, [pc, #272]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005cd2:	f7fb f836 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d904      	bls.n	8005ce8 <FMC_SDRAM_Timing_Init+0x3c>
 8005cde:	f240 51a3 	movw	r1, #1443	; 0x5a3
 8005ce2:	4840      	ldr	r0, [pc, #256]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005ce4:	f7fb f82d 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 8005ce8:	68a3      	ldr	r3, [r4, #8]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d904      	bls.n	8005cfa <FMC_SDRAM_Timing_Init+0x4e>
 8005cf0:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8005cf4:	483b      	ldr	r0, [pc, #236]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005cf6:	f7fb f824 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8005cfa:	68e3      	ldr	r3, [r4, #12]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d904      	bls.n	8005d0c <FMC_SDRAM_Timing_Init+0x60>
 8005d02:	f240 51a5 	movw	r1, #1445	; 0x5a5
 8005d06:	4837      	ldr	r0, [pc, #220]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005d08:	f7fb f81b 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d904      	bls.n	8005d1e <FMC_SDRAM_Timing_Init+0x72>
 8005d14:	f240 51a6 	movw	r1, #1446	; 0x5a6
 8005d18:	4832      	ldr	r0, [pc, #200]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005d1a:	f7fb f812 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8005d1e:	6963      	ldr	r3, [r4, #20]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	d904      	bls.n	8005d30 <FMC_SDRAM_Timing_Init+0x84>
 8005d26:	f240 51a7 	movw	r1, #1447	; 0x5a7
 8005d2a:	482e      	ldr	r0, [pc, #184]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005d2c:	f7fb f809 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8005d30:	69a3      	ldr	r3, [r4, #24]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d904      	bls.n	8005d42 <FMC_SDRAM_Timing_Init+0x96>
 8005d38:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
 8005d3c:	4829      	ldr	r0, [pc, #164]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005d3e:	f7fb f800 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 8005d42:	2e01      	cmp	r6, #1
 8005d44:	d925      	bls.n	8005d92 <FMC_SDRAM_Timing_Init+0xe6>
 8005d46:	f240 51a9 	movw	r1, #1449	; 0x5a9
 8005d4a:	4826      	ldr	r0, [pc, #152]	; (8005de4 <FMC_SDRAM_Timing_Init+0x138>)
 8005d4c:	f7fa fff9 	bl	8000d42 <assert_failed>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d50:	6863      	ldr	r3, [r4, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005d52:	68aa      	ldr	r2, [r5, #8]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d54:	1e59      	subs	r1, r3, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d5c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005d60:	6821      	ldr	r1, [r4, #0]
 8005d62:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d64:	430b      	orrs	r3, r1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d66:	68e1      	ldr	r1, [r4, #12]
 8005d68:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005d6a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005d6e:	6921      	ldr	r1, [r4, #16]
 8005d70:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005d76:	6961      	ldr	r1, [r4, #20]
 8005d78:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005d7a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8005d7e:	69a1      	ldr	r1, [r4, #24]
 8005d80:	3901      	subs	r1, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d82:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005d86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005d8a:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d8c:	60ab      	str	r3, [r5, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8005d8e:	2000      	movs	r0, #0
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
  if (Bank != FMC_SDRAM_BANK2) 
 8005d92:	d1dd      	bne.n	8005d50 <FMC_SDRAM_Timing_Init+0xa4>
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d94:	68e2      	ldr	r2, [r4, #12]
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005d96:	6963      	ldr	r3, [r4, #20]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005d98:	68a9      	ldr	r1, [r5, #8]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005d9a:	1e50      	subs	r0, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005d9c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005d9e:	6863      	ldr	r3, [r4, #4]
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005da0:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005da2:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005da6:	1e58      	subs	r0, r3, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005dae:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005db6:	4303      	orrs	r3, r0
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005db8:	6920      	ldr	r0, [r4, #16]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005dba:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005dbe:	3801      	subs	r0, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005dc0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005dc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005dc8:	69a0      	ldr	r0, [r4, #24]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005dca:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005dcc:	68e9      	ldr	r1, [r5, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005dce:	60aa      	str	r2, [r5, #8]
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005dd0:	3801      	subs	r0, #1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005dd2:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005dd6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005dda:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005ddc:	60eb      	str	r3, [r5, #12]
 8005dde:	e7d6      	b.n	8005d8e <FMC_SDRAM_Timing_Init+0xe2>
 8005de0:	a0000140 	.word	0xa0000140
 8005de4:	080085b2 	.word	0x080085b2

08005de8 <FMC_SDRAM_SendCommand>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005dee:	4b28      	ldr	r3, [pc, #160]	; (8005e90 <FMC_SDRAM_SendCommand+0xa8>)
 8005df0:	4298      	cmp	r0, r3
{
 8005df2:	4605      	mov	r5, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005df8:	d004      	beq.n	8005e04 <FMC_SDRAM_SendCommand+0x1c>
 8005dfa:	f240 6133 	movw	r1, #1587	; 0x633
 8005dfe:	4825      	ldr	r0, [pc, #148]	; (8005e94 <FMC_SDRAM_SendCommand+0xac>)
 8005e00:	f7fa ff9f 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d904      	bls.n	8005e14 <FMC_SDRAM_SendCommand+0x2c>
 8005e0a:	f240 6134 	movw	r1, #1588	; 0x634
 8005e0e:	4821      	ldr	r0, [pc, #132]	; (8005e94 <FMC_SDRAM_SendCommand+0xac>)
 8005e10:	f7fa ff97 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d008      	beq.n	8005e2c <FMC_SDRAM_SendCommand+0x44>
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d004      	beq.n	8005e2c <FMC_SDRAM_SendCommand+0x44>
 8005e22:	f240 6135 	movw	r1, #1589	; 0x635
 8005e26:	481b      	ldr	r0, [pc, #108]	; (8005e94 <FMC_SDRAM_SendCommand+0xac>)
 8005e28:	f7fa ff8b 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8005e2c:	68a3      	ldr	r3, [r4, #8]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	2b0f      	cmp	r3, #15
 8005e32:	d904      	bls.n	8005e3e <FMC_SDRAM_SendCommand+0x56>
 8005e34:	f240 6136 	movw	r1, #1590	; 0x636
 8005e38:	4816      	ldr	r0, [pc, #88]	; (8005e94 <FMC_SDRAM_SendCommand+0xac>)
 8005e3a:	f7fa ff82 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e44:	d304      	bcc.n	8005e50 <FMC_SDRAM_SendCommand+0x68>
 8005e46:	f240 6137 	movw	r1, #1591	; 0x637
 8005e4a:	4812      	ldr	r0, [pc, #72]	; (8005e94 <FMC_SDRAM_SendCommand+0xac>)
 8005e4c:	f7fa ff79 	bl	8000d42 <assert_failed>

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005e50:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005e54:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 8005e56:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005e58:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005e5c:	68a2      	ldr	r2, [r4, #8]
 8005e5e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005e60:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005e64:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	612b      	str	r3, [r5, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005e6a:	f7fb fde9 	bl	8001a40 <HAL_GetTick>
 8005e6e:	4604      	mov	r4, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005e70:	69a8      	ldr	r0, [r5, #24]
 8005e72:	f010 0020 	ands.w	r0, r0, #32
 8005e76:	d003      	beq.n	8005e80 <FMC_SDRAM_SendCommand+0x98>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005e78:	1c73      	adds	r3, r6, #1
 8005e7a:	d0f9      	beq.n	8005e70 <FMC_SDRAM_SendCommand+0x88>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e7c:	b916      	cbnz	r6, 8005e84 <FMC_SDRAM_SendCommand+0x9c>
      {
        return HAL_TIMEOUT;
 8005e7e:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8005e80:	b002      	add	sp, #8
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e84:	f7fb fddc 	bl	8001a40 <HAL_GetTick>
 8005e88:	1b00      	subs	r0, r0, r4
 8005e8a:	4286      	cmp	r6, r0
 8005e8c:	d2f0      	bcs.n	8005e70 <FMC_SDRAM_SendCommand+0x88>
 8005e8e:	e7f6      	b.n	8005e7e <FMC_SDRAM_SendCommand+0x96>
 8005e90:	a0000140 	.word	0xa0000140
 8005e94:	080085b2 	.word	0x080085b2

08005e98 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device: Pointer to SDRAM device instance  
  * @param  RefreshRate: The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005e98:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <FMC_SDRAM_ProgramRefreshRate+0x34>)
 8005e9c:	4298      	cmp	r0, r3
{
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8005ea2:	d004      	beq.n	8005eae <FMC_SDRAM_ProgramRefreshRate+0x16>
 8005ea4:	f240 615e 	movw	r1, #1630	; 0x65e
 8005ea8:	4809      	ldr	r0, [pc, #36]	; (8005ed0 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 8005eaa:	f7fa ff4a 	bl	8000d42 <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8005eae:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8005eb2:	d304      	bcc.n	8005ebe <FMC_SDRAM_ProgramRefreshRate+0x26>
 8005eb4:	f240 615f 	movw	r1, #1631	; 0x65f
 8005eb8:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 8005eba:	f7fa ff42 	bl	8000d42 <assert_failed>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005ebe:	6961      	ldr	r1, [r4, #20]
 8005ec0:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8005ec4:	6161      	str	r1, [r4, #20]
  
  return HAL_OK;   
}
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	bd38      	pop	{r3, r4, r5, pc}
 8005eca:	bf00      	nop
 8005ecc:	a0000140 	.word	0xa0000140
 8005ed0:	080085b2 	.word	0x080085b2

08005ed4 <Sound_PlaySound>:


////////////////////////////////////////////////
void Sound_PlaySound(const SoundData *sound)
{
	waveData = (uint8_t*)sound->pSoundData;		//set the pointer
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <Sound_PlaySound+0x14>)
 8005ed6:	6802      	ldr	r2, [r0, #0]
 8005ed8:	601a      	str	r2, [r3, #0]
	waveCounter = sound->length;
 8005eda:	4b04      	ldr	r3, [pc, #16]	; (8005eec <Sound_PlaySound+0x18>)
 8005edc:	6842      	ldr	r2, [r0, #4]

	//start the timer - calls Sound_InterruptHandler
	HAL_TIM_Base_Start_IT(&htim7);
 8005ede:	4804      	ldr	r0, [pc, #16]	; (8005ef0 <Sound_PlaySound+0x1c>)
	waveCounter = sound->length;
 8005ee0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8005ee2:	f7fe bf0b 	b.w	8004cfc <HAL_TIM_Base_Start_IT>
 8005ee6:	bf00      	nop
 8005ee8:	20000500 	.word	0x20000500
 8005eec:	200004fc 	.word	0x200004fc
 8005ef0:	20000d50 	.word	0x20000d50

08005ef4 <Sound_Init>:
{
 8005ef4:	b510      	push	{r4, lr}
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_2);
 8005ef6:	4c08      	ldr	r4, [pc, #32]	; (8005f18 <Sound_Init+0x24>)
	HAL_TIM_Base_Stop_IT(&htim7);
 8005ef8:	4808      	ldr	r0, [pc, #32]	; (8005f1c <Sound_Init+0x28>)
 8005efa:	f7fe ff4d 	bl	8004d98 <HAL_TIM_Base_Stop_IT>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_2);
 8005efe:	2110      	movs	r1, #16
 8005f00:	4620      	mov	r0, r4
 8005f02:	f7fc f949 	bl	8002198 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_8B_R, 0x00);
 8005f06:	4620      	mov	r0, r4
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	2110      	movs	r1, #16
}
 8005f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_8B_R, 0x00);
 8005f12:	f7fc b9f5 	b.w	8002300 <HAL_DAC_SetValue>
 8005f16:	bf00      	nop
 8005f18:	20000b00 	.word	0x20000b00
 8005f1c:	20000d50 	.word	0x20000d50

08005f20 <Sound_InterruptHandler>:
{
 8005f20:	b538      	push	{r3, r4, r5, lr}
	if (waveCounter > 4)
 8005f22:	4c0f      	ldr	r4, [pc, #60]	; (8005f60 <Sound_InterruptHandler+0x40>)
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d90e      	bls.n	8005f48 <Sound_InterruptHandler+0x28>
		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_8B_R, *waveData);
 8005f2a:	4d0e      	ldr	r5, [pc, #56]	; (8005f64 <Sound_InterruptHandler+0x44>)
 8005f2c:	480e      	ldr	r0, [pc, #56]	; (8005f68 <Sound_InterruptHandler+0x48>)
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	2208      	movs	r2, #8
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2110      	movs	r1, #16
 8005f36:	f7fc f9e3 	bl	8002300 <HAL_DAC_SetValue>
		waveData+=4;				//increment the pointer
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	602b      	str	r3, [r5, #0]
		waveCounter-=4;			//decrement the downcounter
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	3b04      	subs	r3, #4
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_8B_R, 0x00);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	2110      	movs	r1, #16
 8005f4e:	4806      	ldr	r0, [pc, #24]	; (8005f68 <Sound_InterruptHandler+0x48>)
 8005f50:	f7fc f9d6 	bl	8002300 <HAL_DAC_SetValue>
		HAL_TIM_Base_Stop_IT(&htim7);
 8005f54:	4805      	ldr	r0, [pc, #20]	; (8005f6c <Sound_InterruptHandler+0x4c>)
}
 8005f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Stop_IT(&htim7);
 8005f5a:	f7fe bf1d 	b.w	8004d98 <HAL_TIM_Base_Stop_IT>
 8005f5e:	bf00      	nop
 8005f60:	200004fc 	.word	0x200004fc
 8005f64:	20000500 	.word	0x20000500
 8005f68:	20000b00 	.word	0x20000b00
 8005f6c:	20000d50 	.word	0x20000d50

08005f70 <Sound_Play_DroppedBall>:



void Sound_Play_DroppedBall(void)
{
	Sound_PlaySound(&sound_droppedball);
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <Sound_Play_DroppedBall+0x8>)
 8005f72:	f7ff bfaf 	b.w	8005ed4 <Sound_PlaySound>
 8005f76:	bf00      	nop
 8005f78:	08020b24 	.word	0x08020b24

08005f7c <Sound_Play_GameOver>:
}

void Sound_Play_GameOver(void)
{
	Sound_PlaySound(&sound_gameover);
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <Sound_Play_GameOver+0x8>)
 8005f7e:	f7ff bfa9 	b.w	8005ed4 <Sound_PlaySound>
 8005f82:	bf00      	nop
 8005f84:	08037e90 	.word	0x08037e90

08005f88 <Sound_Play_LevelUp>:
}

void Sound_Play_LevelUp(void)
{
	Sound_PlaySound(&sound_levelup);
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <Sound_Play_LevelUp+0x8>)
 8005f8a:	f7ff bfa3 	b.w	8005ed4 <Sound_PlaySound>
 8005f8e:	bf00      	nop
 8005f90:	08042530 	.word	0x08042530

08005f94 <Sound_Play_PlayerBounce>:
}

void Sound_Play_PlayerBounce(void)
{
	Sound_PlaySound(&sound_playerbounce);
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <Sound_Play_PlayerBounce+0x8>)
 8005f96:	f7ff bf9d 	b.w	8005ed4 <Sound_PlaySound>
 8005f9a:	bf00      	nop
 8005f9c:	080442dc 	.word	0x080442dc

08005fa0 <Sound_Play_WallBounce>:
}

void Sound_Play_WallBounce(void)
{
	Sound_PlaySound(&sound_wallbounce);
 8005fa0:	4801      	ldr	r0, [pc, #4]	; (8005fa8 <Sound_Play_WallBounce+0x8>)
 8005fa2:	f7ff bf97 	b.w	8005ed4 <Sound_PlaySound>
 8005fa6:	bf00      	nop
 8005fa8:	08047e34 	.word	0x08047e34

08005fac <Sound_Play_TileBounce>:
}

void Sound_Play_TileBounce(void)
{
	Sound_PlaySound(&sound_tilebounce);
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <Sound_Play_TileBounce+0x8>)
 8005fae:	f7ff bf91 	b.w	8005ed4 <Sound_PlaySound>
 8005fb2:	bf00      	nop
 8005fb4:	08046088 	.word	0x08046088

08005fb8 <Sprite_GetBallMissedFlag>:
}

uint8_t Sprite_GetBallMissedFlag(void)
{
	return spriteBallMissedFlag;
}
 8005fb8:	4b01      	ldr	r3, [pc, #4]	; (8005fc0 <Sprite_GetBallMissedFlag+0x8>)
 8005fba:	7818      	ldrb	r0, [r3, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000a38 	.word	0x20000a38

08005fc4 <Sprite_ClearBallMissedFlag>:

void Sprite_ClearBallMissedFlag(void)
{
	spriteBallMissedFlag = 0;
 8005fc4:	4b01      	ldr	r3, [pc, #4]	; (8005fcc <Sprite_ClearBallMissedFlag+0x8>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	4770      	bx	lr
 8005fcc:	20000a38 	.word	0x20000a38

08005fd0 <Sprite_DisplayDroppedBall>:
//drop a ball..
//pause for a second, write a message
//decrement the player.  resume
//flash dropped ball a few times
void Sprite_DisplayDroppedBall(void)
{
 8005fd0:	b510      	push	{r4, lr}
	mPlayer.numLives--;
 8005fd2:	4a20      	ldr	r2, [pc, #128]	; (8006054 <Sprite_DisplayDroppedBall+0x84>)
 8005fd4:	7813      	ldrb	r3, [r2, #0]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	7013      	strb	r3, [r2, #0]

	if (mPlayer.numLives > 0)
 8005fdc:	b3cb      	cbz	r3, 8006052 <Sprite_DisplayDroppedBall+0x82>
	{
		LCD_SetTextLineColor(WHITE);
 8005fde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005fe2:	f7fb f971 	bl	80012c8 <LCD_SetTextLineColor>

}

uint8_t Sprite_GetActiveDisplayBuffer(void)
{
	return spriteActiveBuffer;
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <Sprite_DisplayDroppedBall+0x88>)
		LCD_DrawString(buffer, 8, " Dropped Ball");
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <Sprite_DisplayDroppedBall+0x8c>)
	return spriteActiveBuffer;
 8005fea:	781c      	ldrb	r4, [r3, #0]
		LCD_DrawString(buffer, 8, " Dropped Ball");
 8005fec:	2108      	movs	r1, #8
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7fb f9f2 	bl	80013d8 <LCD_DrawString>
		HAL_Delay(1000);
 8005ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ff8:	f7fb fd28 	bl	8001a4c <HAL_Delay>
		LCD_SetTextLineColor(BLUE);
 8005ffc:	201f      	movs	r0, #31
 8005ffe:	f7fb f963 	bl	80012c8 <LCD_SetTextLineColor>
		LCD_DrawString(buffer, 8, " Dropped Ball");
 8006002:	4a16      	ldr	r2, [pc, #88]	; (800605c <Sprite_DisplayDroppedBall+0x8c>)
 8006004:	2108      	movs	r1, #8
 8006006:	4620      	mov	r0, r4
 8006008:	f7fb f9e6 	bl	80013d8 <LCD_DrawString>
		HAL_Delay(1000);
 800600c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006010:	f7fb fd1c 	bl	8001a4c <HAL_Delay>
		LCD_SetTextLineColor(WHITE);
 8006014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006018:	f7fb f956 	bl	80012c8 <LCD_SetTextLineColor>
		LCD_DrawString(buffer, 8, " Dropped Ball");
 800601c:	4a0f      	ldr	r2, [pc, #60]	; (800605c <Sprite_DisplayDroppedBall+0x8c>)
 800601e:	2108      	movs	r1, #8
 8006020:	4620      	mov	r0, r4
 8006022:	f7fb f9d9 	bl	80013d8 <LCD_DrawString>
		HAL_Delay(1000);
 8006026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800602a:	f7fb fd0f 	bl	8001a4c <HAL_Delay>
		LCD_SetTextLineColor(BLUE);
 800602e:	201f      	movs	r0, #31
 8006030:	f7fb f94a 	bl	80012c8 <LCD_SetTextLineColor>
		LCD_DrawString(buffer, 8, " Dropped Ball");
 8006034:	4620      	mov	r0, r4
 8006036:	4a09      	ldr	r2, [pc, #36]	; (800605c <Sprite_DisplayDroppedBall+0x8c>)
 8006038:	2108      	movs	r1, #8
 800603a:	f7fb f9cd 	bl	80013d8 <LCD_DrawString>
		HAL_Delay(1000);
 800603e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006042:	f7fb fd03 	bl	8001a4c <HAL_Delay>
		LCD_SetTextLineColor(WHITE);
 8006046:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800604a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LCD_SetTextLineColor(WHITE);
 800604e:	f7fb b93b 	b.w	80012c8 <LCD_SetTextLineColor>
 8006052:	bd10      	pop	{r4, pc}
 8006054:	2000051c 	.word	0x2000051c
 8006058:	20000a34 	.word	0x20000a34
 800605c:	08047e56 	.word	0x08047e56

08006060 <Sprite_DisplayGameOver>:
{
 8006060:	b538      	push	{r3, r4, r5, lr}
	LCD_SetTextLineColor(WHITE);
 8006062:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006066:	f7fb f92f 	bl	80012c8 <LCD_SetTextLineColor>
	return spriteActiveBuffer;
 800606a:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <Sprite_DisplayGameOver+0x78>)
	LCD_DrawString(buffer, 8, "   Game Over");
 800606c:	4d1b      	ldr	r5, [pc, #108]	; (80060dc <Sprite_DisplayGameOver+0x7c>)
	return spriteActiveBuffer;
 800606e:	781c      	ldrb	r4, [r3, #0]
	LCD_DrawString(buffer, 8, "   Game Over");
 8006070:	462a      	mov	r2, r5
 8006072:	2108      	movs	r1, #8
 8006074:	4620      	mov	r0, r4
 8006076:	f7fb f9af 	bl	80013d8 <LCD_DrawString>
	HAL_Delay(1000);
 800607a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800607e:	f7fb fce5 	bl	8001a4c <HAL_Delay>
	LCD_SetTextLineColor(BLUE);
 8006082:	201f      	movs	r0, #31
 8006084:	f7fb f920 	bl	80012c8 <LCD_SetTextLineColor>
	LCD_DrawString(buffer, 8, "   Game Over");
 8006088:	462a      	mov	r2, r5
 800608a:	2108      	movs	r1, #8
 800608c:	4620      	mov	r0, r4
 800608e:	f7fb f9a3 	bl	80013d8 <LCD_DrawString>
	HAL_Delay(1000);
 8006092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006096:	f7fb fcd9 	bl	8001a4c <HAL_Delay>
	LCD_SetTextLineColor(WHITE);
 800609a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800609e:	f7fb f913 	bl	80012c8 <LCD_SetTextLineColor>
	LCD_DrawString(buffer, 8, "   Game Over");
 80060a2:	462a      	mov	r2, r5
 80060a4:	2108      	movs	r1, #8
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7fb f996 	bl	80013d8 <LCD_DrawString>
	HAL_Delay(1000);
 80060ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060b0:	f7fb fccc 	bl	8001a4c <HAL_Delay>
	LCD_SetTextLineColor(BLUE);
 80060b4:	201f      	movs	r0, #31
 80060b6:	f7fb f907 	bl	80012c8 <LCD_SetTextLineColor>
	LCD_DrawString(buffer, 8, "   Game Over");
 80060ba:	462a      	mov	r2, r5
 80060bc:	4620      	mov	r0, r4
 80060be:	2108      	movs	r1, #8
 80060c0:	f7fb f98a 	bl	80013d8 <LCD_DrawString>
	HAL_Delay(1000);
 80060c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060c8:	f7fb fcc0 	bl	8001a4c <HAL_Delay>
	LCD_SetTextLineColor(WHITE);
 80060cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80060d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD_SetTextLineColor(WHITE);
 80060d4:	f7fb b8f8 	b.w	80012c8 <LCD_SetTextLineColor>
 80060d8:	20000a34 	.word	0x20000a34
 80060dc:	08047e64 	.word	0x08047e64

080060e0 <Ball_Init>:
	mBall.image = &imgBall;		//must be first
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <Ball_Init+0x20>)
 80060e2:	4a08      	ldr	r2, [pc, #32]	; (8006104 <Ball_Init+0x24>)
 80060e4:	615a      	str	r2, [r3, #20]
	mBall.y = 280;
 80060e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80060ea:	200a      	movs	r0, #10
 80060ec:	e883 0003 	stmia.w	r3, {r0, r1}
	mBall.sizeX = mBall.image->xSize;
 80060f0:	8811      	ldrh	r1, [r2, #0]
	mBall.sizeY = mBall.image->ySize;
 80060f2:	8852      	ldrh	r2, [r2, #2]
 80060f4:	60da      	str	r2, [r3, #12]
	mBall.angle = SPRITE_DIRECTION_45;
 80060f6:	2202      	movs	r2, #2
	mBall.sizeX = mBall.image->xSize;
 80060f8:	6099      	str	r1, [r3, #8]
	mBall.angle = SPRITE_DIRECTION_45;
 80060fa:	741a      	strb	r2, [r3, #16]
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000504 	.word	0x20000504
 8006104:	08007678 	.word	0x08007678

08006108 <Tile_Init>:
{
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
			mTile[counter].image = &imgTile;
 800610a:	f8df c048 	ldr.w	ip, [pc, #72]	; 8006154 <Tile_Init+0x4c>
			mTile[counter].life = 1;
 800610e:	4e10      	ldr	r6, [pc, #64]	; (8006150 <Tile_Init+0x48>)
	for (int i = 0 ; i < NUM_TILE_ROWS ; i++)
 8006110:	2000      	movs	r0, #0
 8006112:	241e      	movs	r4, #30
			mTile[counter].life = 1;
 8006114:	f04f 0e01 	mov.w	lr, #1
 8006118:	00c5      	lsls	r5, r0, #3
			mTile[counter].y = (30 * i) + TILE_HEADER;
 800611a:	3001      	adds	r0, #1
 800611c:	b2ad      	uxth	r5, r5
 800611e:	fb04 f700 	mul.w	r7, r4, r0
 8006122:	2100      	movs	r1, #0
			mTile[counter].life = 1;
 8006124:	186a      	adds	r2, r5, r1
 8006126:	b292      	uxth	r2, r2
 8006128:	0152      	lsls	r2, r2, #5
 800612a:	18b3      	adds	r3, r6, r2
 800612c:	f806 e002 	strb.w	lr, [r6, r2]
			mTile[counter].x = 30 * j;
 8006130:	fb04 f201 	mul.w	r2, r4, r1
		for (int j = 0 ; j < NUM_TILE_COLS ; j++)
 8006134:	3101      	adds	r1, #1
 8006136:	2908      	cmp	r1, #8
			mTile[counter].image = &imgTile;
 8006138:	f8c3 c01c 	str.w	ip, [r3, #28]
			mTile[counter].points = 30;
 800613c:	829c      	strh	r4, [r3, #20]
			mTile[counter].sizeX = 30;
 800613e:	60dc      	str	r4, [r3, #12]
			mTile[counter].sizeY = 30;
 8006140:	611c      	str	r4, [r3, #16]
			mTile[counter].x = 30 * j;
 8006142:	605a      	str	r2, [r3, #4]
			mTile[counter].y = (30 * i) + TILE_HEADER;
 8006144:	609f      	str	r7, [r3, #8]
		for (int j = 0 ; j < NUM_TILE_COLS ; j++)
 8006146:	d1ed      	bne.n	8006124 <Tile_Init+0x1c>
	for (int i = 0 ; i < NUM_TILE_ROWS ; i++)
 8006148:	2805      	cmp	r0, #5
 800614a:	d1e5      	bne.n	8006118 <Tile_Init+0x10>
 800614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800614e:	bf00      	nop
 8006150:	20000534 	.word	0x20000534
 8006154:	08007ec4 	.word	0x08007ec4

08006158 <Player_Init>:
	mPlayer.numLives = PLAYER_NUM_PLAYERS;
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <Player_Init+0x20>)
 800615a:	2202      	movs	r2, #2
 800615c:	701a      	strb	r2, [r3, #0]
	mPlayer.x = PLAYER_DEFAULT_X;
 800615e:	2264      	movs	r2, #100	; 0x64
 8006160:	605a      	str	r2, [r3, #4]
	mPlayer.y = PLAYER_DEFAULT_Y;
 8006162:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006166:	609a      	str	r2, [r3, #8]
	mPlayer.image = &imgPlayer;
 8006168:	4a04      	ldr	r2, [pc, #16]	; (800617c <Player_Init+0x24>)
 800616a:	615a      	str	r2, [r3, #20]
	mPlayer.sizeX = mPlayer.image->xSize;
 800616c:	8811      	ldrh	r1, [r2, #0]
	mPlayer.sizeY = mPlayer.image->ySize;
 800616e:	8852      	ldrh	r2, [r2, #2]
	mPlayer.sizeX = mPlayer.image->xSize;
 8006170:	60d9      	str	r1, [r3, #12]
	mPlayer.sizeY = mPlayer.image->ySize;
 8006172:	611a      	str	r2, [r3, #16]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000051c 	.word	0x2000051c
 800617c:	08007b34 	.word	0x08007b34

08006180 <Sprite_DisplayGameStart>:
{
 8006180:	b538      	push	{r3, r4, r5, lr}
	return spriteActiveBuffer;
 8006182:	4b16      	ldr	r3, [pc, #88]	; (80061dc <Sprite_DisplayGameStart+0x5c>)
	LCD_DrawString(buffer, 8, "  Press Start");
 8006184:	4d16      	ldr	r5, [pc, #88]	; (80061e0 <Sprite_DisplayGameStart+0x60>)
	return spriteActiveBuffer;
 8006186:	781c      	ldrb	r4, [r3, #0]
	LCD_SetTextLineColor(WHITE);
 8006188:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800618c:	f7fb f89c 	bl	80012c8 <LCD_SetTextLineColor>
	LCD_DrawString(buffer, 8, "  Press Start");
 8006190:	462a      	mov	r2, r5
 8006192:	2108      	movs	r1, #8
 8006194:	4620      	mov	r0, r4
 8006196:	f7fb f91f 	bl	80013d8 <LCD_DrawString>
	HAL_Delay(1000);
 800619a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800619e:	f7fb fc55 	bl	8001a4c <HAL_Delay>
	LCD_SetTextLineColor(BLUE);
 80061a2:	201f      	movs	r0, #31
 80061a4:	f7fb f890 	bl	80012c8 <LCD_SetTextLineColor>
	LCD_DrawString(buffer, 8, "  Press Start");
 80061a8:	462a      	mov	r2, r5
 80061aa:	2108      	movs	r1, #8
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7fb f913 	bl	80013d8 <LCD_DrawString>
	HAL_Delay(1000);
 80061b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061b6:	f7fb fc49 	bl	8001a4c <HAL_Delay>
	LCD_SetTextLineColor(WHITE);
 80061ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80061be:	f7fb f883 	bl	80012c8 <LCD_SetTextLineColor>
	Tile_Init();
 80061c2:	f7ff ffa1 	bl	8006108 <Tile_Init>
	Player_Init();
 80061c6:	f7ff ffc7 	bl	8006158 <Player_Init>
	Ball_Init();
 80061ca:	f7ff ff89 	bl	80060e0 <Ball_Init>
}


void Sprite_ResetGameScore(void)
{
	spriteGameScore = 0;
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <Sprite_DisplayGameStart+0x64>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
}

void Sprite_SetGameSpeed(GameSpeed_t speed)
{
	if ((speed >= GAME_SPEED_LOW) && (speed <= GAME_SPEED_FAST))
		spriteGameSpeed = speed;
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <Sprite_DisplayGameStart+0x68>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000a34 	.word	0x20000a34
 80061e0:	08047e71 	.word	0x08047e71
 80061e4:	20000a40 	.word	0x20000a40
 80061e8:	2000040c 	.word	0x2000040c

080061ec <Sprite_GameMode_SetMode.part.0>:
void Sprite_GameMode_SetMode(GameMode_t mode)
 80061ec:	b538      	push	{r3, r4, r5, lr}
		spriteGameMode = mode;
 80061ee:	4d1f      	ldr	r5, [pc, #124]	; (800626c <Sprite_GameMode_SetMode.part.0+0x80>)
 80061f0:	4c1f      	ldr	r4, [pc, #124]	; (8006270 <Sprite_GameMode_SetMode.part.0+0x84>)
 80061f2:	7028      	strb	r0, [r5, #0]
		switch(spriteGameMode)
 80061f4:	2801      	cmp	r0, #1
 80061f6:	d023      	beq.n	8006240 <Sprite_GameMode_SetMode.part.0+0x54>
 80061f8:	d308      	bcc.n	800620c <Sprite_GameMode_SetMode.part.0+0x20>
 80061fa:	2802      	cmp	r0, #2
 80061fc:	d027      	beq.n	800624e <Sprite_GameMode_SetMode.part.0+0x62>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 6, "   INVALID");
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <Sprite_GameMode_SetMode.part.0+0x88>)
 8006200:	7820      	ldrb	r0, [r4, #0]
 8006202:	2106      	movs	r1, #6
 8006204:	f7fb f8e8 	bl	80013d8 <LCD_DrawString>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 7, "   GAME MODE");
 8006208:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <Sprite_GameMode_SetMode.part.0+0x8c>)
 800620a:	e005      	b.n	8006218 <Sprite_GameMode_SetMode.part.0+0x2c>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 6, "   GAME MODE");
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <Sprite_GameMode_SetMode.part.0+0x8c>)
 800620e:	7820      	ldrb	r0, [r4, #0]
 8006210:	2106      	movs	r1, #6
 8006212:	f7fb f8e1 	bl	80013d8 <LCD_DrawString>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 7, "   DEMO MODE");
 8006216:	4a19      	ldr	r2, [pc, #100]	; (800627c <Sprite_GameMode_SetMode.part.0+0x90>)
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 7, "   GAME MODE");
 8006218:	7820      	ldrb	r0, [r4, #0]
 800621a:	2107      	movs	r1, #7
 800621c:	f7fb f8dc 	bl	80013d8 <LCD_DrawString>
		HAL_Delay(2000);
 8006220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006224:	f7fb fc12 	bl	8001a4c <HAL_Delay>
		Tile_Init();
 8006228:	f7ff ff6e 	bl	8006108 <Tile_Init>
		Player_Init();
 800622c:	f7ff ff94 	bl	8006158 <Player_Init>
		Ball_Init();
 8006230:	f7ff ff56 	bl	80060e0 <Ball_Init>
		if (spriteGameMode == GAME_MODE_DEMO)
 8006234:	782b      	ldrb	r3, [r5, #0]
 8006236:	b98b      	cbnz	r3, 800625c <Sprite_GameMode_SetMode.part.0+0x70>
		spriteGameSpeed = speed;
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <Sprite_GameMode_SetMode.part.0+0x94>)
 800623a:	2203      	movs	r2, #3
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 6, "   GAME MODE");
 8006240:	4a0d      	ldr	r2, [pc, #52]	; (8006278 <Sprite_GameMode_SetMode.part.0+0x8c>)
 8006242:	7820      	ldrb	r0, [r4, #0]
 8006244:	2106      	movs	r1, #6
 8006246:	f7fb f8c7 	bl	80013d8 <LCD_DrawString>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 7, " TOUCH SCREEN");
 800624a:	4a0e      	ldr	r2, [pc, #56]	; (8006284 <Sprite_GameMode_SetMode.part.0+0x98>)
 800624c:	e7e4      	b.n	8006218 <Sprite_GameMode_SetMode.part.0+0x2c>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 6, "   GAME MODE");
 800624e:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <Sprite_GameMode_SetMode.part.0+0x8c>)
 8006250:	7820      	ldrb	r0, [r4, #0]
 8006252:	2106      	movs	r1, #6
 8006254:	f7fb f8c0 	bl	80013d8 <LCD_DrawString>
				LCD_DrawString(Sprite_GetActiveDisplayBuffer(), 7, "   SLIDE POT");
 8006258:	4a0b      	ldr	r2, [pc, #44]	; (8006288 <Sprite_GameMode_SetMode.part.0+0x9c>)
 800625a:	e7dd      	b.n	8006218 <Sprite_GameMode_SetMode.part.0+0x2c>
		else if (spriteGameMode == GAME_MODE_TOUCH_SCREEN)
 800625c:	2b01      	cmp	r3, #1
 800625e:	d102      	bne.n	8006266 <Sprite_GameMode_SetMode.part.0+0x7a>
		spriteGameSpeed = speed;
 8006260:	4a07      	ldr	r2, [pc, #28]	; (8006280 <Sprite_GameMode_SetMode.part.0+0x94>)
 8006262:	7013      	strb	r3, [r2, #0]
 8006264:	e001      	b.n	800626a <Sprite_GameMode_SetMode.part.0+0x7e>
		else if (spriteGameMode == GAME_MODE_SLIDE_POT)
 8006266:	2b02      	cmp	r3, #2
 8006268:	d0fa      	beq.n	8006260 <Sprite_GameMode_SetMode.part.0+0x74>
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20000a3c 	.word	0x20000a3c
 8006270:	20000a34 	.word	0x20000a34
 8006274:	08047ee1 	.word	0x08047ee1
 8006278:	08047eac 	.word	0x08047eac
 800627c:	08047eb9 	.word	0x08047eb9
 8006280:	2000040c 	.word	0x2000040c
 8006284:	08047ec6 	.word	0x08047ec6
 8006288:	08047ed4 	.word	0x08047ed4

0800628c <Sprite_Init>:
	spriteActiveBuffer = 0;
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <Sprite_Init+0x30>)
 800628e:	2000      	movs	r0, #0
{
 8006290:	b510      	push	{r4, lr}
	spriteActiveBuffer = 0;
 8006292:	6018      	str	r0, [r3, #0]
	spriteGameLevel = 0;
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <Sprite_Init+0x34>)
	spriteGameSpeed = GAME_SPEED_LOW;
 8006296:	4c0b      	ldr	r4, [pc, #44]	; (80062c4 <Sprite_Init+0x38>)
	spriteGameLevel = 0;
 8006298:	8018      	strh	r0, [r3, #0]
	spriteGameSpeed = GAME_SPEED_LOW;
 800629a:	2301      	movs	r3, #1
 800629c:	7023      	strb	r3, [r4, #0]
	spriteGameScore = 0;
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <Sprite_Init+0x3c>)
 80062a0:	6018      	str	r0, [r3, #0]
 80062a2:	f7ff ffa3 	bl	80061ec <Sprite_GameMode_SetMode.part.0>
		spriteGameSpeed = speed;
 80062a6:	2303      	movs	r3, #3
 80062a8:	7023      	strb	r3, [r4, #0]
	Tile_Init();
 80062aa:	f7ff ff2d 	bl	8006108 <Tile_Init>
	Ball_Init();
 80062ae:	f7ff ff17 	bl	80060e0 <Ball_Init>
}
 80062b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Player_Init();
 80062b6:	f7ff bf4f 	b.w	8006158 <Player_Init>
 80062ba:	bf00      	nop
 80062bc:	20000a34 	.word	0x20000a34
 80062c0:	20000a3a 	.word	0x20000a3a
 80062c4:	2000040c 	.word	0x2000040c
 80062c8:	20000a40 	.word	0x20000a40

080062cc <Sprite_Draw>:
{
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LCD_SetTextBackColor(BLUE2);
 80062d0:	f240 501f 	movw	r0, #1311	; 0x51f
{
 80062d4:	b08c      	sub	sp, #48	; 0x30
	if (!spriteActiveBuffer)
 80062d6:	4c33      	ldr	r4, [pc, #204]	; (80063a4 <Sprite_Draw+0xd8>)
	LCD_SetTextBackColor(BLUE2);
 80062d8:	f7fa fffc 	bl	80012d4 <LCD_SetTextBackColor>
	LCD_SetTextLineColor(WHITE);
 80062dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80062e0:	f7fa fff2 	bl	80012c8 <LCD_SetTextLineColor>
	if (!spriteActiveBuffer)
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d156      	bne.n	8006398 <Sprite_Draw+0xcc>
		spriteActiveBuffer = 1;
 80062ea:	2301      	movs	r3, #1
		spriteActiveBuffer = 0;
 80062ec:	6023      	str	r3, [r4, #0]
	LCD_Clear(spriteActiveBuffer, BLUE2);
 80062ee:	f240 511f 	movw	r1, #1311	; 0x51f
 80062f2:	6820      	ldr	r0, [r4, #0]
	int n = sprintf(buffer, "S:%04d L:%d P:%d", spriteGameScore, spriteGameLevel, mPlayer.numLives);
 80062f4:	4e2c      	ldr	r6, [pc, #176]	; (80063a8 <Sprite_Draw+0xdc>)
	LCD_Clear(spriteActiveBuffer, BLUE2);
 80062f6:	f7fb f80d 	bl	8001314 <LCD_Clear>
	memset(buffer, 0x00, 40);
 80062fa:	2228      	movs	r2, #40	; 0x28
 80062fc:	2100      	movs	r1, #0
 80062fe:	a802      	add	r0, sp, #8
 8006300:	f000 fb6a 	bl	80069d8 <memset>
	int n = sprintf(buffer, "S:%04d L:%d P:%d", spriteGameScore, spriteGameLevel, mPlayer.numLives);
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <Sprite_Draw+0xe0>)
 8006306:	7832      	ldrb	r2, [r6, #0]
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	9200      	str	r2, [sp, #0]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <Sprite_Draw+0xe4>)
 800630e:	4929      	ldr	r1, [pc, #164]	; (80063b4 <Sprite_Draw+0xe8>)
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	a802      	add	r0, sp, #8
 8006314:	f000 fb68 	bl	80069e8 <siprintf>
	LCD_DrawStringLength(spriteActiveBuffer, 0, buffer, n);
 8006318:	aa02      	add	r2, sp, #8
 800631a:	b2c3      	uxtb	r3, r0
 800631c:	2100      	movs	r1, #0
 800631e:	7820      	ldrb	r0, [r4, #0]
 8006320:	f7fb f874 	bl	800140c <LCD_DrawStringLength>
	if (spriteGameMode == GAME_MODE_DEMO)
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <Sprite_Draw+0xec>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	b94b      	cbnz	r3, 800633e <Sprite_Draw+0x72>
		LCD_DrawString(spriteActiveBuffer, 9, "   Demo Mode");
 800632a:	4a24      	ldr	r2, [pc, #144]	; (80063bc <Sprite_Draw+0xf0>)
 800632c:	7820      	ldrb	r0, [r4, #0]
 800632e:	2109      	movs	r1, #9
 8006330:	f7fb f852 	bl	80013d8 <LCD_DrawString>
		LCD_DrawString(spriteActiveBuffer, 10, "Press To Start");
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <Sprite_Draw+0xf4>)
 8006336:	7820      	ldrb	r0, [r4, #0]
 8006338:	210a      	movs	r1, #10
 800633a:	f7fb f84d 	bl	80013d8 <LCD_DrawString>
	LCD_DrawBitmapTransparent(spriteActiveBuffer, mBall.x, mBall.y, mBall.image, WHITE);
 800633e:	4921      	ldr	r1, [pc, #132]	; (80063c4 <Sprite_Draw+0xf8>)
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	4d21      	ldr	r5, [pc, #132]	; (80063c8 <Sprite_Draw+0xfc>)
 8006344:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8006348:	9700      	str	r7, [sp, #0]
 800634a:	694b      	ldr	r3, [r1, #20]
 800634c:	c906      	ldmia	r1, {r1, r2}
 800634e:	f7fb f874 	bl	800143a <LCD_DrawBitmapTransparent>
 8006352:	f505 68a0 	add.w	r8, r5, #1280	; 0x500
		if (mTile[i].life == 1)
 8006356:	782b      	ldrb	r3, [r5, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d106      	bne.n	800636a <Sprite_Draw+0x9e>
			LCD_DrawBitmapTransparent(spriteActiveBuffer, mTile[i].x, mTile[i].y, mTile[i].image, WHITE);
 800635c:	9700      	str	r7, [sp, #0]
 800635e:	69eb      	ldr	r3, [r5, #28]
 8006360:	68aa      	ldr	r2, [r5, #8]
 8006362:	6869      	ldr	r1, [r5, #4]
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	f7fb f868 	bl	800143a <LCD_DrawBitmapTransparent>
 800636a:	3520      	adds	r5, #32
	for (int i = 0 ; i < NUM_TILES ; i++)
 800636c:	4545      	cmp	r5, r8
 800636e:	d1f2      	bne.n	8006356 <Sprite_Draw+0x8a>
	if (mPlayer.numLives > 0)
 8006370:	7833      	ldrb	r3, [r6, #0]
 8006372:	b143      	cbz	r3, 8006386 <Sprite_Draw+0xba>
		LCD_DrawBitmapTransparent(spriteActiveBuffer, mPlayer.x, mPlayer.y, mPlayer.image, WHITE);
 8006374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	68b2      	ldr	r2, [r6, #8]
 800637c:	6973      	ldr	r3, [r6, #20]
 800637e:	6871      	ldr	r1, [r6, #4]
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	f7fb f85a 	bl	800143a <LCD_DrawBitmapTransparent>
	if (!spriteActiveBuffer)
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	b942      	cbnz	r2, 800639c <Sprite_Draw+0xd0>
		HAL_LTDC_SetAddress(&hltdc, (uint32_t)SDRAM_LCD_LAYER_0, 0);
 800638a:	4910      	ldr	r1, [pc, #64]	; (80063cc <Sprite_Draw+0x100>)
		HAL_LTDC_SetAddress(&hltdc, (uint32_t)SDRAM_LCD_LAYER_1, 0);
 800638c:	4810      	ldr	r0, [pc, #64]	; (80063d0 <Sprite_Draw+0x104>)
 800638e:	f7fd fbdb 	bl	8003b48 <HAL_LTDC_SetAddress>
}
 8006392:	b00c      	add	sp, #48	; 0x30
 8006394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		spriteActiveBuffer = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	e7a7      	b.n	80062ec <Sprite_Draw+0x20>
		HAL_LTDC_SetAddress(&hltdc, (uint32_t)SDRAM_LCD_LAYER_1, 0);
 800639c:	2200      	movs	r2, #0
 800639e:	490d      	ldr	r1, [pc, #52]	; (80063d4 <Sprite_Draw+0x108>)
 80063a0:	e7f4      	b.n	800638c <Sprite_Draw+0xc0>
 80063a2:	bf00      	nop
 80063a4:	20000a34 	.word	0x20000a34
 80063a8:	2000051c 	.word	0x2000051c
 80063ac:	20000a3a 	.word	0x20000a3a
 80063b0:	20000a40 	.word	0x20000a40
 80063b4:	08047e7f 	.word	0x08047e7f
 80063b8:	20000a3c 	.word	0x20000a3c
 80063bc:	08047e90 	.word	0x08047e90
 80063c0:	08047e9d 	.word	0x08047e9d
 80063c4:	20000504 	.word	0x20000504
 80063c8:	20000534 	.word	0x20000534
 80063cc:	d0020000 	.word	0xd0020000
 80063d0:	20000b9c 	.word	0x20000b9c
 80063d4:	d0040000 	.word	0xd0040000

080063d8 <Sprite_GetNumPlayers>:
}
 80063d8:	4b01      	ldr	r3, [pc, #4]	; (80063e0 <Sprite_GetNumPlayers+0x8>)
 80063da:	7818      	ldrb	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	2000051c 	.word	0x2000051c

080063e4 <Sprite_GetNumTiles>:
{
 80063e4:	2300      	movs	r3, #0
		if (mTile[i].life == 1)
 80063e6:	4a07      	ldr	r2, [pc, #28]	; (8006404 <Sprite_GetNumTiles+0x20>)
	uint16_t count = 0;
 80063e8:	4618      	mov	r0, r3
		if (mTile[i].life == 1)
 80063ea:	5c99      	ldrb	r1, [r3, r2]
 80063ec:	2901      	cmp	r1, #1
			count++;
 80063ee:	bf08      	it	eq
 80063f0:	3001      	addeq	r0, #1
 80063f2:	f103 0320 	add.w	r3, r3, #32
 80063f6:	bf08      	it	eq
 80063f8:	b280      	uxtheq	r0, r0
	for (int i = 0 ; i < NUM_TILES ; i++)
 80063fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80063fe:	d1f4      	bne.n	80063ea <Sprite_GetNumTiles+0x6>
}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000534 	.word	0x20000534

08006408 <Sprite_GameMode_SetMode>:
	if ((mode >= GAME_MODE_DEMO) && (mode <= GAME_MODE_SLIDE_POT))
 8006408:	2802      	cmp	r0, #2
 800640a:	d801      	bhi.n	8006410 <Sprite_GameMode_SetMode+0x8>
 800640c:	f7ff beee 	b.w	80061ec <Sprite_GameMode_SetMode.part.0>
 8006410:	4770      	bx	lr
	...

08006414 <Sprite_GameMode_ToggleMode>:
	switch(spriteGameMode)
 8006414:	4b06      	ldr	r3, [pc, #24]	; (8006430 <Sprite_GameMode_ToggleMode+0x1c>)
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	2a01      	cmp	r2, #1
 800641a:	d006      	beq.n	800642a <Sprite_GameMode_ToggleMode+0x16>
 800641c:	bf2c      	ite	cs
 800641e:	2200      	movcs	r2, #0
			spriteGameMode = GAME_MODE_TOUCH_SCREEN;
 8006420:	2201      	movcc	r2, #1
			spriteGameMode = GAME_MODE_SLIDE_POT;
 8006422:	701a      	strb	r2, [r3, #0]
	Sprite_GameMode_SetMode(spriteGameMode);
 8006424:	7818      	ldrb	r0, [r3, #0]
 8006426:	f7ff bfef 	b.w	8006408 <Sprite_GameMode_SetMode>
			spriteGameMode = GAME_MODE_SLIDE_POT;
 800642a:	2202      	movs	r2, #2
 800642c:	e7f9      	b.n	8006422 <Sprite_GameMode_ToggleMode+0xe>
 800642e:	bf00      	nop
 8006430:	20000a3c 	.word	0x20000a3c

08006434 <Sprite_GameSpeedIncrease>:
	if (spriteGameSpeed == GAME_SPEED_LOW)
 8006434:	4b03      	ldr	r3, [pc, #12]	; (8006444 <Sprite_GameSpeedIncrease+0x10>)
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	2a01      	cmp	r2, #1
		spriteGameSpeed = GAME_SPEED_MEDIUM;
 800643a:	bf0c      	ite	eq
 800643c:	2202      	moveq	r2, #2
		spriteGameSpeed = GAME_SPEED_FAST;
 800643e:	2203      	movne	r2, #3
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	4770      	bx	lr
 8006444:	2000040c 	.word	0x2000040c

08006448 <Sprite_IncreaseGameLevel>:
	spriteGameLevel++;
 8006448:	4a02      	ldr	r2, [pc, #8]	; (8006454 <Sprite_IncreaseGameLevel+0xc>)
 800644a:	8813      	ldrh	r3, [r2, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	8013      	strh	r3, [r2, #0]
	Sprite_GameSpeedIncrease();
 8006450:	f7ff bff0 	b.w	8006434 <Sprite_GameSpeedIncrease>
 8006454:	20000a3a 	.word	0x20000a3a

08006458 <Sprite_SetPlayerX>:
//set x position of the player, range
//screen left to right, and adjusted here
//for width of the player
void Sprite_SetPlayerX(uint16_t xPos)
{
	if (xPos < (mPlayer.sizeX / 2))
 8006458:	4a07      	ldr	r2, [pc, #28]	; (8006478 <Sprite_SetPlayerX+0x20>)
 800645a:	68d3      	ldr	r3, [r2, #12]
 800645c:	0859      	lsrs	r1, r3, #1
 800645e:	4288      	cmp	r0, r1
 8006460:	d202      	bcs.n	8006468 <Sprite_SetPlayerX+0x10>
		mPlayer.x = 0;
 8006462:	2300      	movs	r3, #0
	else if (xPos > (SCREEN_RIGHT - mPlayer.sizeX))
		mPlayer.x = SCREEN_RIGHT - mPlayer.sizeX;
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	4770      	bx	lr
	else if (xPos > (SCREEN_RIGHT - mPlayer.sizeX))
 8006468:	f1c3 03e7 	rsb	r3, r3, #231	; 0xe7
 800646c:	4298      	cmp	r0, r3
 800646e:	d8f9      	bhi.n	8006464 <Sprite_SetPlayerX+0xc>
	else
		mPlayer.x = xPos - (mPlayer.sizeX / 2);
 8006470:	1a40      	subs	r0, r0, r1
 8006472:	6050      	str	r0, [r2, #4]
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	2000051c 	.word	0x2000051c

0800647c <Sprite_Player_Move>:
	if (spriteGameMode == GAME_MODE_DEMO)
 800647c:	4b13      	ldr	r3, [pc, #76]	; (80064cc <Sprite_Player_Move+0x50>)
{
 800647e:	b513      	push	{r0, r1, r4, lr}
	if (spriteGameMode == GAME_MODE_DEMO)
 8006480:	7819      	ldrb	r1, [r3, #0]
 8006482:	b989      	cbnz	r1, 80064a8 <Sprite_Player_Move+0x2c>
		if (mBall.x < (mPlayer.sizeX / 2))
 8006484:	4812      	ldr	r0, [pc, #72]	; (80064d0 <Sprite_Player_Move+0x54>)
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <Sprite_Player_Move+0x58>)
 8006488:	68c2      	ldr	r2, [r0, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	0854      	lsrs	r4, r2, #1
 800648e:	42a3      	cmp	r3, r4
 8006490:	d202      	bcs.n	8006498 <Sprite_Player_Move+0x1c>
			mPlayer.x = 0;
 8006492:	6041      	str	r1, [r0, #4]
}
 8006494:	b002      	add	sp, #8
 8006496:	bd10      	pop	{r4, pc}
		else if (mBall.x > (SCREEN_RIGHT - mPlayer.sizeX))
 8006498:	f1c2 02e7 	rsb	r2, r2, #231	; 0xe7
 800649c:	4293      	cmp	r3, r2
			mPlayer.x = mBall.x - (mPlayer.sizeX / 2);
 800649e:	bf96      	itet	ls
 80064a0:	1b1b      	subls	r3, r3, r4
			mPlayer.x = SCREEN_RIGHT - mPlayer.sizeX;
 80064a2:	6042      	strhi	r2, [r0, #4]
			mPlayer.x = mBall.x - (mPlayer.sizeX / 2);
 80064a4:	6043      	strls	r3, [r0, #4]
 80064a6:	e7f5      	b.n	8006494 <Sprite_Player_Move+0x18>
	else if (spriteGameMode == GAME_MODE_TOUCH_SCREEN)
 80064a8:	2901      	cmp	r1, #1
 80064aa:	d109      	bne.n	80064c0 <Sprite_Player_Move+0x44>
		data = TouchPanel_getPosition();
 80064ac:	4668      	mov	r0, sp
 80064ae:	f000 fa31 	bl	8006914 <TouchPanel_getPosition>
		Sprite_SetPlayerX(data.xPos);
 80064b2:	f8bd 0000 	ldrh.w	r0, [sp]
}
 80064b6:	b002      	add	sp, #8
 80064b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Sprite_SetPlayerX(adcPosition);
 80064bc:	f7ff bfcc 	b.w	8006458 <Sprite_SetPlayerX>
	else if (spriteGameMode == GAME_MODE_SLIDE_POT)
 80064c0:	2902      	cmp	r1, #2
 80064c2:	d1e7      	bne.n	8006494 <Sprite_Player_Move+0x18>
		adcPosition = SlidePot_ReadPosition();
 80064c4:	f7fa feda 	bl	800127c <SlidePot_ReadPosition>
 80064c8:	e7f5      	b.n	80064b6 <Sprite_Player_Move+0x3a>
 80064ca:	bf00      	nop
 80064cc:	20000a3c 	.word	0x20000a3c
 80064d0:	2000051c 	.word	0x2000051c
 80064d4:	20000504 	.word	0x20000504

080064d8 <Sprite_GetReboundAngle>:
//object direction and a surface.  for now, only
//allow surfaces that are horiz and vertical.
//This is probably the case with all pong objects
SpriteDirection_t Sprite_GetReboundAngle(SpriteDirection_t object, SurfaceOrientation_t orientation)
{
	if (orientation == SURFACE_HORIZONTAL)
 80064d8:	b979      	cbnz	r1, 80064fa <Sprite_GetReboundAngle+0x22>
	{
		switch(object)
 80064da:	280f      	cmp	r0, #15
 80064dc:	d833      	bhi.n	8006546 <Sprite_GetReboundAngle+0x6e>
 80064de:	e8df f000 	tbb	[pc, r0]
 80064e2:	2635      	.short	0x2635
 80064e4:	2c082a28 	.word	0x2c082a28
 80064e8:	1a35302e 	.word	0x1a35302e
 80064ec:	200a1e1c 	.word	0x200a1e1c
 80064f0:	2422      	.short	0x2422

			case SPRITE_DIRECTION_0:	return	SPRITE_DIRECTION_0;
			case SPRITE_DIRECTION_26:	return	SPRITE_DIRECTION_333;
			case SPRITE_DIRECTION_45:	return	SPRITE_DIRECTION_315;
			case SPRITE_DIRECTION_63:	return	SPRITE_DIRECTION_296;
			case SPRITE_DIRECTION_90:	return	SPRITE_DIRECTION_270;
 80064f2:	200c      	movs	r0, #12
 80064f4:	4770      	bx	lr
			case SPRITE_DIRECTION_153:	return	SPRITE_DIRECTION_206;
			case SPRITE_DIRECTION_180:	return	SPRITE_DIRECTION_180;
			case SPRITE_DIRECTION_206:	return	SPRITE_DIRECTION_153;
			case SPRITE_DIRECTION_225:	return	SPRITE_DIRECTION_135;
			case SPRITE_DIRECTION_243:	return	SPRITE_DIRECTION_116;
			case SPRITE_DIRECTION_270:	return	SPRITE_DIRECTION_90;
 80064f6:	2004      	movs	r0, #4
 80064f8:	4770      	bx	lr
			case SPRITE_DIRECTION_296:	return	SPRITE_DIRECTION_63;
			case SPRITE_DIRECTION_315:	return	SPRITE_DIRECTION_45;
			case SPRITE_DIRECTION_333:	return	SPRITE_DIRECTION_26;
		}
	}
	else if (orientation == SURFACE_VERTICAL)
 80064fa:	2901      	cmp	r1, #1
 80064fc:	d123      	bne.n	8006546 <Sprite_GetReboundAngle+0x6e>
	{
		switch(object)
 80064fe:	280f      	cmp	r0, #15
 8006500:	d821      	bhi.n	8006546 <Sprite_GetReboundAngle+0x6e>
 8006502:	e8df f000 	tbb	[pc, r0]
 8006506:	0822      	.short	0x0822
 8006508:	0e230c0a 	.word	0x0e230c0a
 800650c:	14201210 	.word	0x14201210
 8006510:	1a231816 	.word	0x1a231816
 8006514:	1e1c      	.short	0x1e1c
		{
			case SPRITE_DIRECTION_0:	return	SPRITE_DIRECTION_180;
			case SPRITE_DIRECTION_26:	return	SPRITE_DIRECTION_153;
 8006516:	2007      	movs	r0, #7
 8006518:	4770      	bx	lr
			case SPRITE_DIRECTION_45:	return	SPRITE_DIRECTION_135;
 800651a:	2006      	movs	r0, #6
 800651c:	4770      	bx	lr
			case SPRITE_DIRECTION_63:	return	SPRITE_DIRECTION_116;
 800651e:	2005      	movs	r0, #5
 8006520:	4770      	bx	lr
			case SPRITE_DIRECTION_90:	return	SPRITE_DIRECTION_90;
			case SPRITE_DIRECTION_116:	return	SPRITE_DIRECTION_63;
 8006522:	2003      	movs	r0, #3
 8006524:	4770      	bx	lr
			case SPRITE_DIRECTION_135:	return	SPRITE_DIRECTION_45;
 8006526:	2002      	movs	r0, #2
 8006528:	4770      	bx	lr
			case SPRITE_DIRECTION_153:	return	SPRITE_DIRECTION_26;
 800652a:	2001      	movs	r0, #1
 800652c:	4770      	bx	lr
			case SPRITE_DIRECTION_180:	return	SPRITE_DIRECTION_0;
			case SPRITE_DIRECTION_206:	return	SPRITE_DIRECTION_333;
 800652e:	200f      	movs	r0, #15
 8006530:	4770      	bx	lr
			case SPRITE_DIRECTION_225:	return	SPRITE_DIRECTION_315;
 8006532:	200e      	movs	r0, #14
 8006534:	4770      	bx	lr
			case SPRITE_DIRECTION_243:	return	SPRITE_DIRECTION_296;
 8006536:	200d      	movs	r0, #13
 8006538:	4770      	bx	lr
			case SPRITE_DIRECTION_270:	return	SPRITE_DIRECTION_270;
			case SPRITE_DIRECTION_296:	return	SPRITE_DIRECTION_243;
 800653a:	200b      	movs	r0, #11
 800653c:	4770      	bx	lr
			case SPRITE_DIRECTION_315:	return	SPRITE_DIRECTION_225;
 800653e:	200a      	movs	r0, #10
 8006540:	4770      	bx	lr
			case SPRITE_DIRECTION_333:	return	SPRITE_DIRECTION_206;
 8006542:	2009      	movs	r0, #9
 8006544:	4770      	bx	lr
	else
	{
		//do nothing
	}

	return SPRITE_DIRECTION_0;
 8006546:	2000      	movs	r0, #0
 8006548:	4770      	bx	lr
			case SPRITE_DIRECTION_0:	return	SPRITE_DIRECTION_180;
 800654a:	2008      	movs	r0, #8
}
 800654c:	4770      	bx	lr
	...

08006550 <Sprite_Get_DX_FromAngle>:

int Sprite_Get_DX_FromAngle(SpriteDirection_t angle)
{
 8006550:	3803      	subs	r0, #3
 8006552:	b2c0      	uxtb	r0, r0
 8006554:	280a      	cmp	r0, #10
 8006556:	bf9a      	itte	ls
 8006558:	4b01      	ldrls	r3, [pc, #4]	; (8006560 <Sprite_Get_DX_FromAngle+0x10>)
 800655a:	5618      	ldrsbls	r0, [r3, r0]
 800655c:	2002      	movhi	r0, #2
		case SPRITE_DIRECTION_315:	return 2;
		case SPRITE_DIRECTION_333:	return 2;
	}

	return 2;
}
 800655e:	4770      	bx	lr
 8006560:	08047e3c 	.word	0x08047e3c

08006564 <Sprite_Get_DY_FromAngle>:


//////////////////////////////////////////
//y positive down
int Sprite_Get_DY_FromAngle(SpriteDirection_t angle)
{
 8006564:	3801      	subs	r0, #1
 8006566:	b2c0      	uxtb	r0, r0
 8006568:	280e      	cmp	r0, #14
 800656a:	bf9a      	itte	ls
 800656c:	4b01      	ldrls	r3, [pc, #4]	; (8006574 <Sprite_Get_DY_FromAngle+0x10>)
 800656e:	5618      	ldrsbls	r0, [r3, r0]
 8006570:	2000      	movhi	r0, #0
		case SPRITE_DIRECTION_315:	return 2;
		case SPRITE_DIRECTION_333:	return 1;
	}

	return 0;
}
 8006572:	4770      	bx	lr
 8006574:	08047e47 	.word	0x08047e47

08006578 <Sprite_Ball_Move>:
{
 8006578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SpriteDirection_t updated = mBall.angle;
 800657c:	4f77      	ldr	r7, [pc, #476]	; (800675c <Sprite_Ball_Move+0x1e4>)
	tLeft = mPlayer.x;
 800657e:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8006774 <Sprite_Ball_Move+0x1fc>
	bLeft = mBall.x;
 8006582:	683e      	ldr	r6, [r7, #0]
	bRight = mBall.x + mBall.sizeX;
 8006584:	68bd      	ldr	r5, [r7, #8]
	bBot = mBall.y + mBall.sizeY;
 8006586:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800658a:	68f8      	ldr	r0, [r7, #12]
	tLeft = mPlayer.x;
 800658c:	f8dc 2004 	ldr.w	r2, [ip, #4]
	SpriteDirection_t updated = mBall.angle;
 8006590:	7c3c      	ldrb	r4, [r7, #16]
	bRight = mBall.x + mBall.sizeX;
 8006592:	4435      	add	r5, r6
	bX = (bLeft + bRight) / 2;
 8006594:	1971      	adds	r1, r6, r5
 8006596:	0849      	lsrs	r1, r1, #1
	bBot = mBall.y + mBall.sizeY;
 8006598:	eb00 030e 	add.w	r3, r0, lr
	if ((bX >= tLeft) && (bX <= tRight) && (bBot >= tTop) && (bBot <= (tTop + 4))
 800659c:	4291      	cmp	r1, r2
	bBot = mBall.y + mBall.sizeY;
 800659e:	9300      	str	r3, [sp, #0]
	if ((bX >= tLeft) && (bX <= tRight) && (bBot >= tTop) && (bBot <= (tTop + 4))
 80065a0:	d339      	bcc.n	8006616 <Sprite_Ball_Move+0x9e>
	tRight = mPlayer.x + mPlayer.sizeX;
 80065a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80065a6:	4413      	add	r3, r2
	if ((bX >= tLeft) && (bX <= tRight) && (bBot >= tTop) && (bBot <= (tTop + 4))
 80065a8:	4299      	cmp	r1, r3
 80065aa:	d834      	bhi.n	8006616 <Sprite_Ball_Move+0x9e>
	tTop = mPlayer.y;
 80065ac:	f8dc 3008 	ldr.w	r3, [ip, #8]
	if ((bX >= tLeft) && (bX <= tRight) && (bBot >= tTop) && (bBot <= (tTop + 4))
 80065b0:	9a00      	ldr	r2, [sp, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d32f      	bcc.n	8006616 <Sprite_Ball_Move+0x9e>
 80065b6:	3304      	adds	r3, #4
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d82c      	bhi.n	8006616 <Sprite_Ball_Move+0x9e>
			&& (mBall.angle > SPRITE_DIRECTION_180))
 80065bc:	2c08      	cmp	r4, #8
 80065be:	d92a      	bls.n	8006616 <Sprite_Ball_Move+0x9e>
		Sound_Play_PlayerBounce();
 80065c0:	f7ff fce8 	bl	8005f94 <Sound_Play_PlayerBounce>
		if (bLeft <= SCREEN_LEFT)
 80065c4:	2e08      	cmp	r6, #8
 80065c6:	f240 80b7 	bls.w	8006738 <Sprite_Ball_Move+0x1c0>
		else if (bRight >= SCREEN_RIGHT)
 80065ca:	2de6      	cmp	r5, #230	; 0xe6
 80065cc:	f200 80b6 	bhi.w	800673c <Sprite_Ball_Move+0x1c4>
			updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_HORIZONTAL);
 80065d0:	2100      	movs	r1, #0
 80065d2:	7c38      	ldrb	r0, [r7, #16]
 80065d4:	f7ff ff80 	bl	80064d8 <Sprite_GetReboundAngle>
 80065d8:	4604      	mov	r4, r0
	mBall.angle = updated;
 80065da:	4e60      	ldr	r6, [pc, #384]	; (800675c <Sprite_Ball_Move+0x1e4>)
	dx = Sprite_Get_DX_FromAngle(updated);
 80065dc:	4620      	mov	r0, r4
	mBall.angle = updated;
 80065de:	7434      	strb	r4, [r6, #16]
	dx = Sprite_Get_DX_FromAngle(updated);
 80065e0:	f7ff ffb6 	bl	8006550 <Sprite_Get_DX_FromAngle>
 80065e4:	4607      	mov	r7, r0
	dy = Sprite_Get_DY_FromAngle(updated);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff ffbc 	bl	8006564 <Sprite_Get_DY_FromAngle>
	return spriteGameSpeed;
 80065ec:	4b5c      	ldr	r3, [pc, #368]	; (8006760 <Sprite_Ball_Move+0x1e8>)
	int multiplier = (int)Sprite_GetGameSpeed();
 80065ee:	781b      	ldrb	r3, [r3, #0]
	if ((dx < 0) && (mBall.x <=SCREEN_LEFT))
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	4634      	mov	r4, r6
 80065f4:	fb03 f000 	mul.w	r0, r3, r0
 80065f8:	f280 80a2 	bge.w	8006740 <Sprite_Ball_Move+0x1c8>
 80065fc:	6835      	ldr	r5, [r6, #0]
 80065fe:	2d08      	cmp	r5, #8
 8006600:	f200 809e 	bhi.w	8006740 <Sprite_Ball_Move+0x1c8>
		mBall.x += ((-1*dx) * multiplier);
 8006604:	fb07 5113 	mls	r1, r7, r3, r5
 8006608:	6031      	str	r1, [r6, #0]
		mBall.y += (dy * multiplier);
 800660a:	6871      	ldr	r1, [r6, #4]
 800660c:	4401      	add	r1, r0
 800660e:	6071      	str	r1, [r6, #4]
}
 8006610:	b003      	add	sp, #12
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (bTop >= SCREEN_BOTTOM)
 8006616:	f5be 7f9b 	cmp.w	lr, #310	; 0x136
 800661a:	d903      	bls.n	8006624 <Sprite_Ball_Move+0xac>
		spriteBallMissedFlag = 1;
 800661c:	4b51      	ldr	r3, [pc, #324]	; (8006764 <Sprite_Ball_Move+0x1ec>)
 800661e:	2201      	movs	r2, #1
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e7da      	b.n	80065da <Sprite_Ball_Move+0x62>
	else if ((bTop <= SCREEN_TOP) && (bLeft <= SCREEN_LEFT))
 8006624:	f1be 0f08 	cmp.w	lr, #8
 8006628:	d80c      	bhi.n	8006644 <Sprite_Ball_Move+0xcc>
 800662a:	2e08      	cmp	r6, #8
 800662c:	f240 8092 	bls.w	8006754 <Sprite_Ball_Move+0x1dc>
	else if ((bTop <= SCREEN_TOP) && (bRight >= SCREEN_RIGHT))
 8006630:	2de6      	cmp	r5, #230	; 0xe6
 8006632:	d81f      	bhi.n	8006674 <Sprite_Ball_Move+0xfc>
		updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_HORIZONTAL);
 8006634:	2100      	movs	r1, #0
			updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_VERTICAL);
 8006636:	4620      	mov	r0, r4
 8006638:	f7ff ff4e 	bl	80064d8 <Sprite_GetReboundAngle>
 800663c:	4604      	mov	r4, r0
		Sound_Play_WallBounce();
 800663e:	f7ff fcaf 	bl	8005fa0 <Sound_Play_WallBounce>
 8006642:	e7ca      	b.n	80065da <Sprite_Ball_Move+0x62>
	else if (bLeft <= SCREEN_LEFT)
 8006644:	2e08      	cmp	r6, #8
 8006646:	d80a      	bhi.n	800665e <Sprite_Ball_Move+0xe6>
		if ((mBall.angle == SPRITE_DIRECTION_90) || (mBall.angle == SPRITE_DIRECTION_116))
 8006648:	1f23      	subs	r3, r4, #4
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	d97f      	bls.n	8006750 <Sprite_Ball_Move+0x1d8>
		else if ((mBall.angle == SPRITE_DIRECTION_270) || (mBall.angle == SPRITE_DIRECTION_243))
 8006650:	f1a4 030b 	sub.w	r3, r4, #11
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b01      	cmp	r3, #1
 8006658:	d97c      	bls.n	8006754 <Sprite_Ball_Move+0x1dc>
			updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_VERTICAL);
 800665a:	2101      	movs	r1, #1
 800665c:	e7eb      	b.n	8006636 <Sprite_Ball_Move+0xbe>
	else if (bRight >= SCREEN_RIGHT)
 800665e:	2de6      	cmp	r5, #230	; 0xe6
 8006660:	d90a      	bls.n	8006678 <Sprite_Ball_Move+0x100>
		if ((mBall.angle == SPRITE_DIRECTION_90) || (mBall.angle == SPRITE_DIRECTION_63))
 8006662:	1ee3      	subs	r3, r4, #3
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d976      	bls.n	8006758 <Sprite_Ball_Move+0x1e0>
		else if ((mBall.angle == SPRITE_DIRECTION_270) || (mBall.angle == SPRITE_DIRECTION_296))
 800666a:	f1a4 030c 	sub.w	r3, r4, #12
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d8f2      	bhi.n	800665a <Sprite_Ball_Move+0xe2>
		updated = SPRITE_DIRECTION_225;
 8006674:	240a      	movs	r4, #10
 8006676:	e7e2      	b.n	800663e <Sprite_Ball_Move+0xc6>
	bY = (bTop + bBot) / 2;
 8006678:	9b00      	ldr	r3, [sp, #0]
		spriteBallMissedFlag = 0;
 800667a:	4a3a      	ldr	r2, [pc, #232]	; (8006764 <Sprite_Ball_Move+0x1ec>)
	bY = (bTop + bBot) / 2;
 800667c:	eb0e 0c03 	add.w	ip, lr, r3
		spriteBallMissedFlag = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	7013      	strb	r3, [r2, #0]
 8006684:	4a38      	ldr	r2, [pc, #224]	; (8006768 <Sprite_Ball_Move+0x1f0>)
	bY = (bTop + bBot) / 2;
 8006686:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (mTile[i].life == 1)
 800668a:	7817      	ldrb	r7, [r2, #0]
 800668c:	2f01      	cmp	r7, #1
 800668e:	d14d      	bne.n	800672c <Sprite_Ball_Move+0x1b4>
				tBot = mTile[i].y + mTile[i].sizeY;
 8006690:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8006694:	6917      	ldr	r7, [r2, #16]
				tRight = mTile[i].x + mTile[i].sizeX;
 8006696:	68d0      	ldr	r0, [r2, #12]
				tBot = mTile[i].y + mTile[i].sizeY;
 8006698:	eb08 0907 	add.w	r9, r8, r7
				tLeft = mTile[i].x;
 800669c:	6857      	ldr	r7, [r2, #4]
				tRight = mTile[i].x + mTile[i].sizeX;
 800669e:	eb07 0a00 	add.w	sl, r7, r0
				tX = (tLeft + tRight) / 2;
 80066a2:	eb07 0b0a 	add.w	fp, r7, sl
 80066a6:	ea4f 005b 	mov.w	r0, fp, lsr #1
				if ((bTop <= tBot) && (bTop >= tY) && (bX >= tLeft) && (bX <= tRight))
 80066aa:	45ce      	cmp	lr, r9
				tY = (tTop + tBot) / 2;
 80066ac:	eb08 0b09 	add.w	fp, r8, r9
				tX = (tLeft + tRight) / 2;
 80066b0:	9001      	str	r0, [sp, #4]
				tY = (tTop + tBot) / 2;
 80066b2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
				if ((bTop <= tBot) && (bTop >= tY) && (bX >= tLeft) && (bX <= tRight))
 80066b6:	d81b      	bhi.n	80066f0 <Sprite_Ball_Move+0x178>
 80066b8:	45de      	cmp	lr, fp
 80066ba:	d319      	bcc.n	80066f0 <Sprite_Ball_Move+0x178>
 80066bc:	42b9      	cmp	r1, r7
 80066be:	d317      	bcc.n	80066f0 <Sprite_Ball_Move+0x178>
 80066c0:	4551      	cmp	r1, sl
 80066c2:	d815      	bhi.n	80066f0 <Sprite_Ball_Move+0x178>
					tileIndex = i;
 80066c4:	b2dd      	uxtb	r5, r3
					updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_HORIZONTAL);
 80066c6:	2100      	movs	r1, #0
					updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_VERTICAL);
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff ff05 	bl	80064d8 <Sprite_GetReboundAngle>
		mTile[tileIndex].life = 0;				//set life to 0
 80066ce:	4a26      	ldr	r2, [pc, #152]	; (8006768 <Sprite_Ball_Move+0x1f0>)
 80066d0:	016b      	lsls	r3, r5, #5
					updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_VERTICAL);
 80066d2:	4604      	mov	r4, r0
		mTile[tileIndex].life = 0;				//set life to 0
 80066d4:	4824      	ldr	r0, [pc, #144]	; (8006768 <Sprite_Ball_Move+0x1f0>)
 80066d6:	18d1      	adds	r1, r2, r3
 80066d8:	2200      	movs	r2, #0
 80066da:	54c2      	strb	r2, [r0, r3]
		spriteGameScore += mTile[tileIndex].points;
 80066dc:	4a23      	ldr	r2, [pc, #140]	; (800676c <Sprite_Ball_Move+0x1f4>)
		mTile[tileIndex].image = &imgTileBlank;	//clear the image
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <Sprite_Ball_Move+0x1f8>)
 80066e0:	61cb      	str	r3, [r1, #28]
		spriteGameScore += mTile[tileIndex].points;
 80066e2:	8a8b      	ldrh	r3, [r1, #20]
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	440b      	add	r3, r1
 80066e8:	6013      	str	r3, [r2, #0]
		Sound_Play_TileBounce();
 80066ea:	f7ff fc5f 	bl	8005fac <Sound_Play_TileBounce>
 80066ee:	e774      	b.n	80065da <Sprite_Ball_Move+0x62>
				else if ((bBot >= tTop) && (bBot <= tY) && (bX >= tLeft) && (bX <= tRight))
 80066f0:	9800      	ldr	r0, [sp, #0]
 80066f2:	4540      	cmp	r0, r8
 80066f4:	d305      	bcc.n	8006702 <Sprite_Ball_Move+0x18a>
 80066f6:	4558      	cmp	r0, fp
 80066f8:	d803      	bhi.n	8006702 <Sprite_Ball_Move+0x18a>
 80066fa:	42b9      	cmp	r1, r7
 80066fc:	d301      	bcc.n	8006702 <Sprite_Ball_Move+0x18a>
 80066fe:	4551      	cmp	r1, sl
 8006700:	d9e0      	bls.n	80066c4 <Sprite_Ball_Move+0x14c>
				else if ((bRight >= tLeft) && (bRight <= tX) && (bY >= tTop) && (bY <= tBot))
 8006702:	42bd      	cmp	r5, r7
 8006704:	d309      	bcc.n	800671a <Sprite_Ball_Move+0x1a2>
 8006706:	9801      	ldr	r0, [sp, #4]
 8006708:	4285      	cmp	r5, r0
 800670a:	d806      	bhi.n	800671a <Sprite_Ball_Move+0x1a2>
 800670c:	45c4      	cmp	ip, r8
 800670e:	d304      	bcc.n	800671a <Sprite_Ball_Move+0x1a2>
 8006710:	45cc      	cmp	ip, r9
 8006712:	d802      	bhi.n	800671a <Sprite_Ball_Move+0x1a2>
					tileIndex = i;
 8006714:	b2dd      	uxtb	r5, r3
					updated = Sprite_GetReboundAngle(mBall.angle, SURFACE_VERTICAL);
 8006716:	2101      	movs	r1, #1
 8006718:	e7d6      	b.n	80066c8 <Sprite_Ball_Move+0x150>
				else if ((bLeft <= tRight) && (bLeft >= tX) && (bY >= tTop) && (bY <= tBot))
 800671a:	4556      	cmp	r6, sl
 800671c:	d806      	bhi.n	800672c <Sprite_Ball_Move+0x1b4>
 800671e:	9801      	ldr	r0, [sp, #4]
 8006720:	4286      	cmp	r6, r0
 8006722:	d303      	bcc.n	800672c <Sprite_Ball_Move+0x1b4>
 8006724:	45c4      	cmp	ip, r8
 8006726:	d301      	bcc.n	800672c <Sprite_Ball_Move+0x1b4>
 8006728:	45cc      	cmp	ip, r9
 800672a:	d9f3      	bls.n	8006714 <Sprite_Ball_Move+0x19c>
		for (int i = 0 ; i < NUM_TILES ; i++)
 800672c:	3301      	adds	r3, #1
 800672e:	2b28      	cmp	r3, #40	; 0x28
 8006730:	f102 0220 	add.w	r2, r2, #32
 8006734:	d1a9      	bne.n	800668a <Sprite_Ball_Move+0x112>
 8006736:	e750      	b.n	80065da <Sprite_Ball_Move+0x62>
			updated = SPRITE_DIRECTION_45;
 8006738:	2402      	movs	r4, #2
 800673a:	e74e      	b.n	80065da <Sprite_Ball_Move+0x62>
			updated = SPRITE_DIRECTION_135;
 800673c:	2406      	movs	r4, #6
 800673e:	e74c      	b.n	80065da <Sprite_Ball_Move+0x62>
		mBall.x += (dx * multiplier);
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	fb03 2107 	mla	r1, r3, r7, r2
		mBall.y += (dy * multiplier);
 8006746:	6863      	ldr	r3, [r4, #4]
		mBall.x += (dx * multiplier);
 8006748:	6021      	str	r1, [r4, #0]
		mBall.y += (dy * multiplier);
 800674a:	4403      	add	r3, r0
 800674c:	6063      	str	r3, [r4, #4]
}
 800674e:	e75f      	b.n	8006610 <Sprite_Ball_Move+0x98>
			updated = SPRITE_DIRECTION_45;
 8006750:	2402      	movs	r4, #2
 8006752:	e774      	b.n	800663e <Sprite_Ball_Move+0xc6>
		updated = SPRITE_DIRECTION_315;
 8006754:	240e      	movs	r4, #14
 8006756:	e772      	b.n	800663e <Sprite_Ball_Move+0xc6>
			updated = SPRITE_DIRECTION_135;
 8006758:	2406      	movs	r4, #6
 800675a:	e770      	b.n	800663e <Sprite_Ball_Move+0xc6>
 800675c:	20000504 	.word	0x20000504
 8006760:	2000040c 	.word	0x2000040c
 8006764:	20000a38 	.word	0x20000a38
 8006768:	20000534 	.word	0x20000534
 800676c:	20000a40 	.word	0x20000a40
 8006770:	08008254 	.word	0x08008254
 8006774:	2000051c 	.word	0x2000051c

08006778 <TouchPanel_readReg1Byte>:
	//set the EN bit to enable the panel and start detecting
	TouchPanel_writeReg1Byte(TP_REG_TSC_CTRL, 0x03);
}

uint8_t TouchPanel_readReg1Byte(uint16_t reg)
{
 8006778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t value = 0x00;
 800677a:	aa06      	add	r2, sp, #24
 800677c:	2300      	movs	r3, #0
 800677e:	f802 3d01 	strb.w	r3, [r2, #-1]!
	HAL_I2C_Mem_Read(&hi2c3, TOUCH_PANEL_ADDRESS, reg, 1, &value, 1, 0xFF);
 8006782:	23ff      	movs	r3, #255	; 0xff
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	2301      	movs	r3, #1
 8006788:	e88d 000c 	stmia.w	sp, {r2, r3}
 800678c:	2182      	movs	r1, #130	; 0x82
 800678e:	4602      	mov	r2, r0
 8006790:	4803      	ldr	r0, [pc, #12]	; (80067a0 <TouchPanel_readReg1Byte+0x28>)
 8006792:	f7fc fdf7 	bl	8003384 <HAL_I2C_Mem_Read>

	return value;
}
 8006796:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800679a:	b007      	add	sp, #28
 800679c:	f85d fb04 	ldr.w	pc, [sp], #4
 80067a0:	20000b48 	.word	0x20000b48

080067a4 <TouchPanel_readReg3Bytes>:


///////////////////////////////////////////
//top 8 bits are don't care
uint32_t TouchPanel_readReg3Bytes(uint16_t reg)
{
 80067a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t value[3] = {0x00, 0x00, 0x00};
 80067a6:	2300      	movs	r3, #0
 80067a8:	f88d 3014 	strb.w	r3, [sp, #20]
 80067ac:	f88d 3015 	strb.w	r3, [sp, #21]
 80067b0:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Read(&hi2c3, TOUCH_PANEL_ADDRESS, reg, 1, value, 3, 0xFF);
 80067b4:	23ff      	movs	r3, #255	; 0xff
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	2303      	movs	r3, #3
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	ab05      	add	r3, sp, #20
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4602      	mov	r2, r0
 80067c2:	2301      	movs	r3, #1
 80067c4:	2182      	movs	r1, #130	; 0x82
 80067c6:	4808      	ldr	r0, [pc, #32]	; (80067e8 <TouchPanel_readReg3Bytes+0x44>)
 80067c8:	f7fc fddc 	bl	8003384 <HAL_I2C_Mem_Read>

	//reads into most to least
	uint32_t result = ((uint32_t)value[0]) << 16;
	result |= ((uint32_t)value[1]) << 8;
 80067cc:	f89d 3015 	ldrb.w	r3, [sp, #21]
	uint32_t result = ((uint32_t)value[0]) << 16;
 80067d0:	f89d 0014 	ldrb.w	r0, [sp, #20]
	result |= ((uint32_t)value[1]) << 8;
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	result |= ((uint32_t)value[2]);
 80067da:	f89d 0016 	ldrb.w	r0, [sp, #22]

	return result;
}
 80067de:	4318      	orrs	r0, r3
 80067e0:	b007      	add	sp, #28
 80067e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80067e6:	bf00      	nop
 80067e8:	20000b48 	.word	0x20000b48

080067ec <TouchPanel_writeReg1Byte>:


void TouchPanel_writeReg1Byte(uint16_t reg, uint8_t value)
{
 80067ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t data = value;
 80067ee:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c3, TOUCH_PANEL_ADDRESS, reg, 1, &data, 1, 0xFF);
 80067f0:	23ff      	movs	r3, #255	; 0xff
	uint8_t data = value;
 80067f2:	f802 1d01 	strb.w	r1, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c3, TOUCH_PANEL_ADDRESS, reg, 1, &data, 1, 0xFF);
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	2301      	movs	r3, #1
 80067fa:	e88d 000c 	stmia.w	sp, {r2, r3}
 80067fe:	2182      	movs	r1, #130	; 0x82
 8006800:	4602      	mov	r2, r0
 8006802:	4803      	ldr	r0, [pc, #12]	; (8006810 <TouchPanel_writeReg1Byte+0x24>)
 8006804:	f7fc fd1c 	bl	8003240 <HAL_I2C_Mem_Write>
}
 8006808:	b007      	add	sp, #28
 800680a:	f85d fb04 	ldr.w	pc, [sp], #4
 800680e:	bf00      	nop
 8006810:	20000b48 	.word	0x20000b48

08006814 <TouchPanel_init>:
	m_touchPanelData.xPos = 0x00;
 8006814:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <TouchPanel_init+0x74>)
{
 8006816:	b510      	push	{r4, lr}
	TouchPanel_writeReg1Byte(TP_REG_SYS_CTRL1, 0x02);		//reset, bit 1, no hibernate
 8006818:	2102      	movs	r1, #2
	m_touchPanelData.xPos = 0x00;
 800681a:	2400      	movs	r4, #0
	TouchPanel_writeReg1Byte(TP_REG_SYS_CTRL1, 0x02);		//reset, bit 1, no hibernate
 800681c:	2003      	movs	r0, #3
	m_touchPanelData.xPos = 0x00;
 800681e:	801c      	strh	r4, [r3, #0]
	m_touchPanelData.yPos = 0x00;
 8006820:	805c      	strh	r4, [r3, #2]
	m_touchPanelData.xRawPos = 0x00;
 8006822:	809c      	strh	r4, [r3, #4]
	m_touchPanelData.yRawPos = 0x00;
 8006824:	80dc      	strh	r4, [r3, #6]
	TouchPanel_writeReg1Byte(TP_REG_SYS_CTRL1, 0x02);		//reset, bit 1, no hibernate
 8006826:	f7ff ffe1 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_SYS_CTRL2, 0x0F);		//switch off ts, gpio, tsc, adc
 800682a:	210f      	movs	r1, #15
 800682c:	2004      	movs	r0, #4
 800682e:	f7ff ffdd 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_CTRL, 0x00);		//no window tracking, xy data, EN bit low
 8006832:	4621      	mov	r1, r4
 8006834:	2040      	movs	r0, #64	; 0x40
 8006836:	f7ff ffd9 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_CTRL, 0x02);		//no window tracking, xy data, EN bit low
 800683a:	2102      	movs	r1, #2
 800683c:	2040      	movs	r0, #64	; 0x40
 800683e:	f7ff ffd5 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_CFG, 0x63);
 8006842:	2163      	movs	r1, #99	; 0x63
 8006844:	2041      	movs	r0, #65	; 0x41
 8006846:	f7ff ffd1 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_FIFO_TH, 0x02);
 800684a:	2102      	movs	r1, #2
 800684c:	204a      	movs	r0, #74	; 0x4a
 800684e:	f7ff ffcd 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_INT_CTRL, 0x03);
 8006852:	2103      	movs	r1, #3
 8006854:	2009      	movs	r0, #9
 8006856:	f7ff ffc9 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_INT_EN, 0x01);
 800685a:	2101      	movs	r1, #1
 800685c:	200a      	movs	r0, #10
 800685e:	f7ff ffc5 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_FIFO_STA, 0x21);
 8006862:	2121      	movs	r1, #33	; 0x21
 8006864:	204b      	movs	r0, #75	; 0x4b
 8006866:	f7ff ffc1 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_FIFO_STA, 0x20);
 800686a:	2120      	movs	r1, #32
 800686c:	204b      	movs	r0, #75	; 0x4b
 800686e:	f7ff ffbd 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_SYS_CTRL2, 0x00);
 8006872:	4621      	mov	r1, r4
 8006874:	2004      	movs	r0, #4
 8006876:	f7ff ffb9 	bl	80067ec <TouchPanel_writeReg1Byte>
	TouchPanel_writeReg1Byte(TP_REG_TSC_CTRL, 0x03);
 800687a:	2103      	movs	r1, #3
 800687c:	2040      	movs	r0, #64	; 0x40
}
 800687e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TouchPanel_writeReg1Byte(TP_REG_TSC_CTRL, 0x03);
 8006882:	f7ff bfb3 	b.w	80067ec <TouchPanel_writeReg1Byte>
 8006886:	bf00      	nop
 8006888:	20000a44 	.word	0x20000a44

0800688c <TouchPanel_GetFIFOSize>:
	uint8_t status = TouchPanel_readReg1Byte(TP_REG_TSC_FIFO_STA);
	return status;
}
uint8_t TouchPanel_GetFIFOSize(void)
{
	uint8_t level = TouchPanel_readReg1Byte(TP_REG_TSC_FIFO_SIZE);
 800688c:	204c      	movs	r0, #76	; 0x4c
 800688e:	f7ff bf73 	b.w	8006778 <TouchPanel_readReg1Byte>

08006892 <TouchPanel_readRawData>:

//reads the raw data, normalizes with respect
//to panel width and height
//
TouchPanelData TouchPanel_readRawData(void)
{
 8006892:	b570      	push	{r4, r5, r6, lr}
 8006894:	4604      	mov	r4, r0

	data.xPos = 0x00;
	data.yPos = 0x00;

	//data sets remaining in the fifo
	size = TouchPanel_readReg1Byte(TP_REG_TSC_FIFO_SIZE);
 8006896:	204c      	movs	r0, #76	; 0x4c
 8006898:	f7ff ff6e 	bl	8006778 <TouchPanel_readReg1Byte>

	//read position data if there's something to read
	if (size > 0)
 800689c:	2800      	cmp	r0, #0
 800689e:	d037      	beq.n	8006910 <TouchPanel_readRawData+0x7e>
	{
		//read 3 bytes - x and y data only
		//top 8 bits are don't care
		temp = TouchPanel_readReg3Bytes(TP_REG_TSC_DATA_XYZ);
 80068a0:	2052      	movs	r0, #82	; 0x52
 80068a2:	f7ff ff7f 	bl	80067a4 <TouchPanel_readReg3Bytes>
 80068a6:	ea6f 3310 	mvn.w	r3, r0, lsr #12
 80068aa:	f3c3 020b 	ubfx	r2, r3, #0, #12

		tempX = ((temp >> 12) & 0xFFF);
		tempY = temp & 0xFFF;
 80068ae:	f3c0 010b 	ubfx	r1, r0, #0, #12

		data.xRawPos = tempX;
		data.yRawPos = tempY;

		//normalize to the width/heigth, accounting for the min and max
		if (tempX < TOUCH_PANEL_CALIB_X_MIN)
 80068b2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
		data.xRawPos = tempX;
 80068b6:	b296      	uxth	r6, r2
		data.yRawPos = tempY;
 80068b8:	b28d      	uxth	r5, r1
		if (tempX < TOUCH_PANEL_CALIB_X_MIN)
 80068ba:	d325      	bcc.n	8006908 <TouchPanel_readRawData+0x76>
			tempX = 0;
		else if (tempX > TOUCH_PANEL_CALIB_X_MAX)
 80068bc:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 80068c0:	f04f 03f0 	mov.w	r3, #240	; 0xf0
 80068c4:	d807      	bhi.n	80068d6 <TouchPanel_readRawData+0x44>
			tempX = TOUCH_PANEL_WIDTH;
		else
			tempX = (tempX - TOUCH_PANEL_CALIB_X_MIN) * TOUCH_PANEL_WIDTH / (TOUCH_PANEL_CALIB_X_MAX - TOUCH_PANEL_CALIB_X_MIN);
 80068c6:	4353      	muls	r3, r2
 80068c8:	f5a3 33ea 	sub.w	r3, r3, #119808	; 0x1d400
 80068cc:	3bc0      	subs	r3, #192	; 0xc0
 80068ce:	f640 421c 	movw	r2, #3100	; 0xc1c
 80068d2:	fbb3 f3f2 	udiv	r3, r3, r2

		if (tempY < TOUCH_PANEL_CALIB_Y_MIN)
 80068d6:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 80068da:	d317      	bcc.n	800690c <TouchPanel_readRawData+0x7a>
			tempY = 0;
		else if (tempY > TOUCH_PANEL_CALIB_Y_MAX)
 80068dc:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
 80068e0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80068e4:	d808      	bhi.n	80068f8 <TouchPanel_readRawData+0x66>
			tempY = TOUCH_PANEL_HEIGHT;
		else
			tempY = (tempY - TOUCH_PANEL_CALIB_Y_MIN) * TOUCH_PANEL_HEIGHT / (TOUCH_PANEL_CALIB_Y_MAX - TOUCH_PANEL_CALIB_Y_MIN);
 80068e6:	4348      	muls	r0, r1
 80068e8:	f5a0 301c 	sub.w	r0, r0, #159744	; 0x27000
 80068ec:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 80068f0:	f640 421c 	movw	r2, #3100	; 0xc1c
 80068f4:	fbb0 f0f2 	udiv	r0, r0, r2

		data.xPos = (uint16_t)tempX;
 80068f8:	b29b      	uxth	r3, r3
		data.yPos = (uint16_t)tempY;
 80068fa:	b280      	uxth	r0, r0
	}

	return data;
 80068fc:	8060      	strh	r0, [r4, #2]
 80068fe:	8023      	strh	r3, [r4, #0]
 8006900:	80a6      	strh	r6, [r4, #4]
 8006902:	80e5      	strh	r5, [r4, #6]
}
 8006904:	4620      	mov	r0, r4
 8006906:	bd70      	pop	{r4, r5, r6, pc}
			tempX = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	e7e4      	b.n	80068d6 <TouchPanel_readRawData+0x44>
			tempY = 0;
 800690c:	2000      	movs	r0, #0
 800690e:	e7f3      	b.n	80068f8 <TouchPanel_readRawData+0x66>
	data.xPos = 0x00;
 8006910:	4603      	mov	r3, r0
 8006912:	e7f3      	b.n	80068fc <TouchPanel_readRawData+0x6a>

08006914 <TouchPanel_getPosition>:
//m_touchPanelData is updated in the isr, gpio exti
//line interrupt.
//
TouchPanelData TouchPanel_getPosition(void)
{
	return m_touchPanelData;
 8006914:	4902      	ldr	r1, [pc, #8]	; (8006920 <TouchPanel_getPosition+0xc>)
 8006916:	680b      	ldr	r3, [r1, #0]
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	684b      	ldr	r3, [r1, #4]
 800691c:	6043      	str	r3, [r0, #4]
}
 800691e:	4770      	bx	lr
 8006920:	20000a44 	.word	0x20000a44

08006924 <TouchPanel_setPosition>:

void TouchPanel_setPosition(TouchPanelData data)
{
 8006924:	b082      	sub	sp, #8
 8006926:	ab02      	add	r3, sp, #8
 8006928:	e903 0003 	stmdb	r3, {r0, r1}
	m_touchPanelData.xPos = data.xPos;
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <TouchPanel_setPosition+0x28>)
 800692e:	f8bd 2000 	ldrh.w	r2, [sp]
 8006932:	801a      	strh	r2, [r3, #0]
	m_touchPanelData.yPos = data.yPos;
 8006934:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006938:	805a      	strh	r2, [r3, #2]
	m_touchPanelData.xRawPos = data.xRawPos;
 800693a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800693e:	809a      	strh	r2, [r3, #4]
	m_touchPanelData.yRawPos = data.yRawPos;
 8006940:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006944:	80da      	strh	r2, [r3, #6]
}
 8006946:	b002      	add	sp, #8
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000a44 	.word	0x20000a44

08006950 <TouchPanel_interruptClear>:

//////////////////////////////////////////
//clears touch detected interrupt
void TouchPanel_interruptClear(void)
{
	TouchPanel_writeReg1Byte(TP_REG_INT_STA, 0x01);
 8006950:	2101      	movs	r1, #1
 8006952:	200b      	movs	r0, #11
 8006954:	f7ff bf4a 	b.w	80067ec <TouchPanel_writeReg1Byte>

08006958 <HAL_GPIO_EXTI_Callback>:
//Triggers when the panel is touched.
//There must be a flag you have to clear
//in the panel registers because it only triggers
//first time then no further detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006958:	b530      	push	{r4, r5, lr}

	volatile TouchPanelData data;
	volatile uint8_t size;

	if (GPIO_Pin == Touch_Panel_EXTI15_Pin)
 800695a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 800695e:	b085      	sub	sp, #20
	if (GPIO_Pin == Touch_Panel_EXTI15_Pin)
 8006960:	d003      	beq.n	800696a <HAL_GPIO_EXTI_Callback+0x12>
			TouchPanel_setPosition(data);		//update position
		}

	}

	TouchPanel_interruptClear();		//clear the interrupt
 8006962:	f7ff fff5 	bl	8006950 <TouchPanel_interruptClear>
}
 8006966:	b005      	add	sp, #20
 8006968:	bd30      	pop	{r4, r5, pc}
		size = TouchPanel_GetFIFOSize();
 800696a:	f7ff ff8f 	bl	800688c <TouchPanel_GetFIFOSize>
		for (int i = 0 ; i < size ; i++)
 800696e:	2400      	movs	r4, #0
		size = TouchPanel_GetFIFOSize();
 8006970:	f88d 0007 	strb.w	r0, [sp, #7]
			data = TouchPanel_readRawData();
 8006974:	ad02      	add	r5, sp, #8
		for (int i = 0 ; i < size ; i++)
 8006976:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800697a:	429c      	cmp	r4, r3
 800697c:	daf1      	bge.n	8006962 <HAL_GPIO_EXTI_Callback+0xa>
			data = TouchPanel_readRawData();
 800697e:	4628      	mov	r0, r5
 8006980:	f7ff ff87 	bl	8006892 <TouchPanel_readRawData>
			TouchPanel_setPosition(data);		//update position
 8006984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006988:	f7ff ffcc 	bl	8006924 <TouchPanel_setPosition>
		for (int i = 0 ; i < size ; i++)
 800698c:	3401      	adds	r4, #1
 800698e:	e7f2      	b.n	8006976 <HAL_GPIO_EXTI_Callback+0x1e>

08006990 <__libc_init_array>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4e0d      	ldr	r6, [pc, #52]	; (80069c8 <__libc_init_array+0x38>)
 8006994:	4c0d      	ldr	r4, [pc, #52]	; (80069cc <__libc_init_array+0x3c>)
 8006996:	1ba4      	subs	r4, r4, r6
 8006998:	10a4      	asrs	r4, r4, #2
 800699a:	2500      	movs	r5, #0
 800699c:	42a5      	cmp	r5, r4
 800699e:	d109      	bne.n	80069b4 <__libc_init_array+0x24>
 80069a0:	4e0b      	ldr	r6, [pc, #44]	; (80069d0 <__libc_init_array+0x40>)
 80069a2:	4c0c      	ldr	r4, [pc, #48]	; (80069d4 <__libc_init_array+0x44>)
 80069a4:	f000 fc4c 	bl	8007240 <_init>
 80069a8:	1ba4      	subs	r4, r4, r6
 80069aa:	10a4      	asrs	r4, r4, #2
 80069ac:	2500      	movs	r5, #0
 80069ae:	42a5      	cmp	r5, r4
 80069b0:	d105      	bne.n	80069be <__libc_init_array+0x2e>
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b8:	4798      	blx	r3
 80069ba:	3501      	adds	r5, #1
 80069bc:	e7ee      	b.n	800699c <__libc_init_array+0xc>
 80069be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069c2:	4798      	blx	r3
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7f2      	b.n	80069ae <__libc_init_array+0x1e>
 80069c8:	08047f20 	.word	0x08047f20
 80069cc:	08047f20 	.word	0x08047f20
 80069d0:	08047f20 	.word	0x08047f20
 80069d4:	08047f24 	.word	0x08047f24

080069d8 <memset>:
 80069d8:	4402      	add	r2, r0
 80069da:	4603      	mov	r3, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	d100      	bne.n	80069e2 <memset+0xa>
 80069e0:	4770      	bx	lr
 80069e2:	f803 1b01 	strb.w	r1, [r3], #1
 80069e6:	e7f9      	b.n	80069dc <memset+0x4>

080069e8 <siprintf>:
 80069e8:	b40e      	push	{r1, r2, r3}
 80069ea:	b500      	push	{lr}
 80069ec:	b09c      	sub	sp, #112	; 0x70
 80069ee:	f44f 7102 	mov.w	r1, #520	; 0x208
 80069f2:	ab1d      	add	r3, sp, #116	; 0x74
 80069f4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80069f8:	9002      	str	r0, [sp, #8]
 80069fa:	9006      	str	r0, [sp, #24]
 80069fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a00:	480a      	ldr	r0, [pc, #40]	; (8006a2c <siprintf+0x44>)
 8006a02:	9104      	str	r1, [sp, #16]
 8006a04:	9107      	str	r1, [sp, #28]
 8006a06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a0e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	a902      	add	r1, sp, #8
 8006a18:	f000 f866 	bl	8006ae8 <_svfiprintf_r>
 8006a1c:	9b02      	ldr	r3, [sp, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	b01c      	add	sp, #112	; 0x70
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b003      	add	sp, #12
 8006a2a:	4770      	bx	lr
 8006a2c:	20000410 	.word	0x20000410

08006a30 <__ssputs_r>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	688e      	ldr	r6, [r1, #8]
 8006a36:	429e      	cmp	r6, r3
 8006a38:	4682      	mov	sl, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4691      	mov	r9, r2
 8006a3e:	4698      	mov	r8, r3
 8006a40:	d835      	bhi.n	8006aae <__ssputs_r+0x7e>
 8006a42:	898a      	ldrh	r2, [r1, #12]
 8006a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a48:	d031      	beq.n	8006aae <__ssputs_r+0x7e>
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	6909      	ldr	r1, [r1, #16]
 8006a4e:	1a6f      	subs	r7, r5, r1
 8006a50:	6965      	ldr	r5, [r4, #20]
 8006a52:	2302      	movs	r3, #2
 8006a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a58:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a5c:	f108 0301 	add.w	r3, r8, #1
 8006a60:	443b      	add	r3, r7
 8006a62:	429d      	cmp	r5, r3
 8006a64:	bf38      	it	cc
 8006a66:	461d      	movcc	r5, r3
 8006a68:	0553      	lsls	r3, r2, #21
 8006a6a:	d531      	bpl.n	8006ad0 <__ssputs_r+0xa0>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f000 fb39 	bl	80070e4 <_malloc_r>
 8006a72:	4606      	mov	r6, r0
 8006a74:	b950      	cbnz	r0, 8006a8c <__ssputs_r+0x5c>
 8006a76:	230c      	movs	r3, #12
 8006a78:	f8ca 3000 	str.w	r3, [sl]
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a82:	81a3      	strh	r3, [r4, #12]
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	463a      	mov	r2, r7
 8006a8e:	6921      	ldr	r1, [r4, #16]
 8006a90:	f000 fab4 	bl	8006ffc <memcpy>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	6126      	str	r6, [r4, #16]
 8006aa2:	6165      	str	r5, [r4, #20]
 8006aa4:	443e      	add	r6, r7
 8006aa6:	1bed      	subs	r5, r5, r7
 8006aa8:	6026      	str	r6, [r4, #0]
 8006aaa:	60a5      	str	r5, [r4, #8]
 8006aac:	4646      	mov	r6, r8
 8006aae:	4546      	cmp	r6, r8
 8006ab0:	bf28      	it	cs
 8006ab2:	4646      	movcs	r6, r8
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	f000 faaa 	bl	8007012 <memmove>
 8006abe:	68a3      	ldr	r3, [r4, #8]
 8006ac0:	1b9b      	subs	r3, r3, r6
 8006ac2:	60a3      	str	r3, [r4, #8]
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	441e      	add	r6, r3
 8006ac8:	6026      	str	r6, [r4, #0]
 8006aca:	2000      	movs	r0, #0
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	f000 fb65 	bl	80071a0 <_realloc_r>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d1e1      	bne.n	8006aa0 <__ssputs_r+0x70>
 8006adc:	6921      	ldr	r1, [r4, #16]
 8006ade:	4650      	mov	r0, sl
 8006ae0:	f000 fab2 	bl	8007048 <_free_r>
 8006ae4:	e7c7      	b.n	8006a76 <__ssputs_r+0x46>
	...

08006ae8 <_svfiprintf_r>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	b09d      	sub	sp, #116	; 0x74
 8006aee:	4680      	mov	r8, r0
 8006af0:	9303      	str	r3, [sp, #12]
 8006af2:	898b      	ldrh	r3, [r1, #12]
 8006af4:	061c      	lsls	r4, r3, #24
 8006af6:	460d      	mov	r5, r1
 8006af8:	4616      	mov	r6, r2
 8006afa:	d50f      	bpl.n	8006b1c <_svfiprintf_r+0x34>
 8006afc:	690b      	ldr	r3, [r1, #16]
 8006afe:	b96b      	cbnz	r3, 8006b1c <_svfiprintf_r+0x34>
 8006b00:	2140      	movs	r1, #64	; 0x40
 8006b02:	f000 faef 	bl	80070e4 <_malloc_r>
 8006b06:	6028      	str	r0, [r5, #0]
 8006b08:	6128      	str	r0, [r5, #16]
 8006b0a:	b928      	cbnz	r0, 8006b18 <_svfiprintf_r+0x30>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	f8c8 3000 	str.w	r3, [r8]
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295
 8006b16:	e0c5      	b.n	8006ca4 <_svfiprintf_r+0x1bc>
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	616b      	str	r3, [r5, #20]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b20:	2320      	movs	r3, #32
 8006b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b26:	2330      	movs	r3, #48	; 0x30
 8006b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b2c:	f04f 0b01 	mov.w	fp, #1
 8006b30:	4637      	mov	r7, r6
 8006b32:	463c      	mov	r4, r7
 8006b34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d13c      	bne.n	8006bb6 <_svfiprintf_r+0xce>
 8006b3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b40:	d00b      	beq.n	8006b5a <_svfiprintf_r+0x72>
 8006b42:	4653      	mov	r3, sl
 8006b44:	4632      	mov	r2, r6
 8006b46:	4629      	mov	r1, r5
 8006b48:	4640      	mov	r0, r8
 8006b4a:	f7ff ff71 	bl	8006a30 <__ssputs_r>
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f000 80a3 	beq.w	8006c9a <_svfiprintf_r+0x1b2>
 8006b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b56:	4453      	add	r3, sl
 8006b58:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5a:	783b      	ldrb	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 809c 	beq.w	8006c9a <_svfiprintf_r+0x1b2>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	9205      	str	r2, [sp, #20]
 8006b6e:	9306      	str	r3, [sp, #24]
 8006b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b74:	931a      	str	r3, [sp, #104]	; 0x68
 8006b76:	2205      	movs	r2, #5
 8006b78:	7821      	ldrb	r1, [r4, #0]
 8006b7a:	4850      	ldr	r0, [pc, #320]	; (8006cbc <_svfiprintf_r+0x1d4>)
 8006b7c:	f7f9 fb40 	bl	8000200 <memchr>
 8006b80:	1c67      	adds	r7, r4, #1
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	b9d8      	cbnz	r0, 8006bbe <_svfiprintf_r+0xd6>
 8006b86:	06d9      	lsls	r1, r3, #27
 8006b88:	bf44      	itt	mi
 8006b8a:	2220      	movmi	r2, #32
 8006b8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b90:	071a      	lsls	r2, r3, #28
 8006b92:	bf44      	itt	mi
 8006b94:	222b      	movmi	r2, #43	; 0x2b
 8006b96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b9a:	7822      	ldrb	r2, [r4, #0]
 8006b9c:	2a2a      	cmp	r2, #42	; 0x2a
 8006b9e:	d016      	beq.n	8006bce <_svfiprintf_r+0xe6>
 8006ba0:	9a07      	ldr	r2, [sp, #28]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	200a      	movs	r0, #10
 8006ba6:	4627      	mov	r7, r4
 8006ba8:	3401      	adds	r4, #1
 8006baa:	783b      	ldrb	r3, [r7, #0]
 8006bac:	3b30      	subs	r3, #48	; 0x30
 8006bae:	2b09      	cmp	r3, #9
 8006bb0:	d951      	bls.n	8006c56 <_svfiprintf_r+0x16e>
 8006bb2:	b1c9      	cbz	r1, 8006be8 <_svfiprintf_r+0x100>
 8006bb4:	e011      	b.n	8006bda <_svfiprintf_r+0xf2>
 8006bb6:	2b25      	cmp	r3, #37	; 0x25
 8006bb8:	d0c0      	beq.n	8006b3c <_svfiprintf_r+0x54>
 8006bba:	4627      	mov	r7, r4
 8006bbc:	e7b9      	b.n	8006b32 <_svfiprintf_r+0x4a>
 8006bbe:	4a3f      	ldr	r2, [pc, #252]	; (8006cbc <_svfiprintf_r+0x1d4>)
 8006bc0:	1a80      	subs	r0, r0, r2
 8006bc2:	fa0b f000 	lsl.w	r0, fp, r0
 8006bc6:	4318      	orrs	r0, r3
 8006bc8:	9004      	str	r0, [sp, #16]
 8006bca:	463c      	mov	r4, r7
 8006bcc:	e7d3      	b.n	8006b76 <_svfiprintf_r+0x8e>
 8006bce:	9a03      	ldr	r2, [sp, #12]
 8006bd0:	1d11      	adds	r1, r2, #4
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	9103      	str	r1, [sp, #12]
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	db01      	blt.n	8006bde <_svfiprintf_r+0xf6>
 8006bda:	9207      	str	r2, [sp, #28]
 8006bdc:	e004      	b.n	8006be8 <_svfiprintf_r+0x100>
 8006bde:	4252      	negs	r2, r2
 8006be0:	f043 0302 	orr.w	r3, r3, #2
 8006be4:	9207      	str	r2, [sp, #28]
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	783b      	ldrb	r3, [r7, #0]
 8006bea:	2b2e      	cmp	r3, #46	; 0x2e
 8006bec:	d10e      	bne.n	8006c0c <_svfiprintf_r+0x124>
 8006bee:	787b      	ldrb	r3, [r7, #1]
 8006bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf2:	f107 0101 	add.w	r1, r7, #1
 8006bf6:	d132      	bne.n	8006c5e <_svfiprintf_r+0x176>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	1d1a      	adds	r2, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	9203      	str	r2, [sp, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bfb8      	it	lt
 8006c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c08:	3702      	adds	r7, #2
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	4c2c      	ldr	r4, [pc, #176]	; (8006cc0 <_svfiprintf_r+0x1d8>)
 8006c0e:	7839      	ldrb	r1, [r7, #0]
 8006c10:	2203      	movs	r2, #3
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7f9 faf4 	bl	8000200 <memchr>
 8006c18:	b138      	cbz	r0, 8006c2a <_svfiprintf_r+0x142>
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	1b00      	subs	r0, r0, r4
 8006c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	4303      	orrs	r3, r0
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	3701      	adds	r7, #1
 8006c2a:	7839      	ldrb	r1, [r7, #0]
 8006c2c:	4825      	ldr	r0, [pc, #148]	; (8006cc4 <_svfiprintf_r+0x1dc>)
 8006c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c32:	2206      	movs	r2, #6
 8006c34:	1c7e      	adds	r6, r7, #1
 8006c36:	f7f9 fae3 	bl	8000200 <memchr>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d035      	beq.n	8006caa <_svfiprintf_r+0x1c2>
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <_svfiprintf_r+0x1e0>)
 8006c40:	b9fb      	cbnz	r3, 8006c82 <_svfiprintf_r+0x19a>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	3307      	adds	r3, #7
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	9303      	str	r3, [sp, #12]
 8006c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c50:	444b      	add	r3, r9
 8006c52:	9309      	str	r3, [sp, #36]	; 0x24
 8006c54:	e76c      	b.n	8006b30 <_svfiprintf_r+0x48>
 8006c56:	fb00 3202 	mla	r2, r0, r2, r3
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	e7a3      	b.n	8006ba6 <_svfiprintf_r+0xbe>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	4618      	mov	r0, r3
 8006c64:	240a      	movs	r4, #10
 8006c66:	460f      	mov	r7, r1
 8006c68:	3101      	adds	r1, #1
 8006c6a:	783a      	ldrb	r2, [r7, #0]
 8006c6c:	3a30      	subs	r2, #48	; 0x30
 8006c6e:	2a09      	cmp	r2, #9
 8006c70:	d903      	bls.n	8006c7a <_svfiprintf_r+0x192>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0ca      	beq.n	8006c0c <_svfiprintf_r+0x124>
 8006c76:	9005      	str	r0, [sp, #20]
 8006c78:	e7c8      	b.n	8006c0c <_svfiprintf_r+0x124>
 8006c7a:	fb04 2000 	mla	r0, r4, r0, r2
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e7f1      	b.n	8006c66 <_svfiprintf_r+0x17e>
 8006c82:	ab03      	add	r3, sp, #12
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	462a      	mov	r2, r5
 8006c88:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <_svfiprintf_r+0x1e4>)
 8006c8a:	a904      	add	r1, sp, #16
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	f3af 8000 	nop.w
 8006c92:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c96:	4681      	mov	r9, r0
 8006c98:	d1d9      	bne.n	8006c4e <_svfiprintf_r+0x166>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	065b      	lsls	r3, r3, #25
 8006c9e:	f53f af38 	bmi.w	8006b12 <_svfiprintf_r+0x2a>
 8006ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca4:	b01d      	add	sp, #116	; 0x74
 8006ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006caa:	ab03      	add	r3, sp, #12
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <_svfiprintf_r+0x1e4>)
 8006cb2:	a904      	add	r1, sp, #16
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	f000 f881 	bl	8006dbc <_printf_i>
 8006cba:	e7ea      	b.n	8006c92 <_svfiprintf_r+0x1aa>
 8006cbc:	08047eec 	.word	0x08047eec
 8006cc0:	08047ef2 	.word	0x08047ef2
 8006cc4:	08047ef6 	.word	0x08047ef6
 8006cc8:	00000000 	.word	0x00000000
 8006ccc:	08006a31 	.word	0x08006a31

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4691      	mov	r9, r2
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	f8c9 3000 	str.w	r3, [r9]
 8006cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	b112      	cbz	r2, 8006cfa <_printf_common+0x2a>
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	f8c9 3000 	str.w	r3, [r9]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d04:	3302      	addmi	r3, #2
 8006d06:	f8c9 3000 	strmi.w	r3, [r9]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	f015 0506 	ands.w	r5, r5, #6
 8006d10:	d107      	bne.n	8006d22 <_printf_common+0x52>
 8006d12:	f104 0a19 	add.w	sl, r4, #25
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	f8d9 2000 	ldr.w	r2, [r9]
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	429d      	cmp	r5, r3
 8006d20:	db29      	blt.n	8006d76 <_printf_common+0xa6>
 8006d22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	3300      	adds	r3, #0
 8006d2a:	bf18      	it	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	0692      	lsls	r2, r2, #26
 8006d30:	d42e      	bmi.n	8006d90 <_printf_common+0xc0>
 8006d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d36:	4639      	mov	r1, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	47c0      	blx	r8
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d021      	beq.n	8006d84 <_printf_common+0xb4>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	68e5      	ldr	r5, [r4, #12]
 8006d44:	f8d9 2000 	ldr.w	r2, [r9]
 8006d48:	f003 0306 	and.w	r3, r3, #6
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	bf08      	it	eq
 8006d50:	1aad      	subeq	r5, r5, r2
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	6922      	ldr	r2, [r4, #16]
 8006d56:	bf0c      	ite	eq
 8006d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d5c:	2500      	movne	r5, #0
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	bfc4      	itt	gt
 8006d62:	1a9b      	subgt	r3, r3, r2
 8006d64:	18ed      	addgt	r5, r5, r3
 8006d66:	f04f 0900 	mov.w	r9, #0
 8006d6a:	341a      	adds	r4, #26
 8006d6c:	454d      	cmp	r5, r9
 8006d6e:	d11b      	bne.n	8006da8 <_printf_common+0xd8>
 8006d70:	2000      	movs	r0, #0
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	2301      	movs	r3, #1
 8006d78:	4652      	mov	r2, sl
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	47c0      	blx	r8
 8006d80:	3001      	adds	r0, #1
 8006d82:	d103      	bne.n	8006d8c <_printf_common+0xbc>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	e7c2      	b.n	8006d16 <_printf_common+0x46>
 8006d90:	18e1      	adds	r1, r4, r3
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	2030      	movs	r0, #48	; 0x30
 8006d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d9a:	4422      	add	r2, r4
 8006d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006da4:	3302      	adds	r3, #2
 8006da6:	e7c4      	b.n	8006d32 <_printf_common+0x62>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4622      	mov	r2, r4
 8006dac:	4639      	mov	r1, r7
 8006dae:	4630      	mov	r0, r6
 8006db0:	47c0      	blx	r8
 8006db2:	3001      	adds	r0, #1
 8006db4:	d0e6      	beq.n	8006d84 <_printf_common+0xb4>
 8006db6:	f109 0901 	add.w	r9, r9, #1
 8006dba:	e7d7      	b.n	8006d6c <_printf_common+0x9c>

08006dbc <_printf_i>:
 8006dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	4617      	mov	r7, r2
 8006dc2:	7e0a      	ldrb	r2, [r1, #24]
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	2a6e      	cmp	r2, #110	; 0x6e
 8006dc8:	4698      	mov	r8, r3
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dd0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006dd4:	f000 80bc 	beq.w	8006f50 <_printf_i+0x194>
 8006dd8:	d81a      	bhi.n	8006e10 <_printf_i+0x54>
 8006dda:	2a63      	cmp	r2, #99	; 0x63
 8006ddc:	d02e      	beq.n	8006e3c <_printf_i+0x80>
 8006dde:	d80a      	bhi.n	8006df6 <_printf_i+0x3a>
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	f000 80c8 	beq.w	8006f76 <_printf_i+0x1ba>
 8006de6:	2a58      	cmp	r2, #88	; 0x58
 8006de8:	f000 808a 	beq.w	8006f00 <_printf_i+0x144>
 8006dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006df4:	e02a      	b.n	8006e4c <_printf_i+0x90>
 8006df6:	2a64      	cmp	r2, #100	; 0x64
 8006df8:	d001      	beq.n	8006dfe <_printf_i+0x42>
 8006dfa:	2a69      	cmp	r2, #105	; 0x69
 8006dfc:	d1f6      	bne.n	8006dec <_printf_i+0x30>
 8006dfe:	6821      	ldr	r1, [r4, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006e06:	d023      	beq.n	8006e50 <_printf_i+0x94>
 8006e08:	1d11      	adds	r1, r2, #4
 8006e0a:	6019      	str	r1, [r3, #0]
 8006e0c:	6813      	ldr	r3, [r2, #0]
 8006e0e:	e027      	b.n	8006e60 <_printf_i+0xa4>
 8006e10:	2a73      	cmp	r2, #115	; 0x73
 8006e12:	f000 80b4 	beq.w	8006f7e <_printf_i+0x1c2>
 8006e16:	d808      	bhi.n	8006e2a <_printf_i+0x6e>
 8006e18:	2a6f      	cmp	r2, #111	; 0x6f
 8006e1a:	d02a      	beq.n	8006e72 <_printf_i+0xb6>
 8006e1c:	2a70      	cmp	r2, #112	; 0x70
 8006e1e:	d1e5      	bne.n	8006dec <_printf_i+0x30>
 8006e20:	680a      	ldr	r2, [r1, #0]
 8006e22:	f042 0220 	orr.w	r2, r2, #32
 8006e26:	600a      	str	r2, [r1, #0]
 8006e28:	e003      	b.n	8006e32 <_printf_i+0x76>
 8006e2a:	2a75      	cmp	r2, #117	; 0x75
 8006e2c:	d021      	beq.n	8006e72 <_printf_i+0xb6>
 8006e2e:	2a78      	cmp	r2, #120	; 0x78
 8006e30:	d1dc      	bne.n	8006dec <_printf_i+0x30>
 8006e32:	2278      	movs	r2, #120	; 0x78
 8006e34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006e38:	496e      	ldr	r1, [pc, #440]	; (8006ff4 <_printf_i+0x238>)
 8006e3a:	e064      	b.n	8006f06 <_printf_i+0x14a>
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006e42:	1d11      	adds	r1, r2, #4
 8006e44:	6019      	str	r1, [r3, #0]
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0a3      	b.n	8006f98 <_printf_i+0x1dc>
 8006e50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006e54:	f102 0104 	add.w	r1, r2, #4
 8006e58:	6019      	str	r1, [r3, #0]
 8006e5a:	d0d7      	beq.n	8006e0c <_printf_i+0x50>
 8006e5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da03      	bge.n	8006e6c <_printf_i+0xb0>
 8006e64:	222d      	movs	r2, #45	; 0x2d
 8006e66:	425b      	negs	r3, r3
 8006e68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e6c:	4962      	ldr	r1, [pc, #392]	; (8006ff8 <_printf_i+0x23c>)
 8006e6e:	220a      	movs	r2, #10
 8006e70:	e017      	b.n	8006ea2 <_printf_i+0xe6>
 8006e72:	6820      	ldr	r0, [r4, #0]
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006e7a:	d003      	beq.n	8006e84 <_printf_i+0xc8>
 8006e7c:	1d08      	adds	r0, r1, #4
 8006e7e:	6018      	str	r0, [r3, #0]
 8006e80:	680b      	ldr	r3, [r1, #0]
 8006e82:	e006      	b.n	8006e92 <_printf_i+0xd6>
 8006e84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e88:	f101 0004 	add.w	r0, r1, #4
 8006e8c:	6018      	str	r0, [r3, #0]
 8006e8e:	d0f7      	beq.n	8006e80 <_printf_i+0xc4>
 8006e90:	880b      	ldrh	r3, [r1, #0]
 8006e92:	4959      	ldr	r1, [pc, #356]	; (8006ff8 <_printf_i+0x23c>)
 8006e94:	2a6f      	cmp	r2, #111	; 0x6f
 8006e96:	bf14      	ite	ne
 8006e98:	220a      	movne	r2, #10
 8006e9a:	2208      	moveq	r2, #8
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006ea2:	6865      	ldr	r5, [r4, #4]
 8006ea4:	60a5      	str	r5, [r4, #8]
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	f2c0 809c 	blt.w	8006fe4 <_printf_i+0x228>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	f020 0004 	bic.w	r0, r0, #4
 8006eb2:	6020      	str	r0, [r4, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d13f      	bne.n	8006f38 <_printf_i+0x17c>
 8006eb8:	2d00      	cmp	r5, #0
 8006eba:	f040 8095 	bne.w	8006fe8 <_printf_i+0x22c>
 8006ebe:	4675      	mov	r5, lr
 8006ec0:	2a08      	cmp	r2, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x120>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x120>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6862      	ldr	r2, [r4, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	; 0x30
 8006ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006edc:	ebae 0305 	sub.w	r3, lr, r5
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	f8cd 8000 	str.w	r8, [sp]
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	aa03      	add	r2, sp, #12
 8006eea:	4621      	mov	r1, r4
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff feef 	bl	8006cd0 <_printf_common>
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d155      	bne.n	8006fa2 <_printf_i+0x1e6>
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	b005      	add	sp, #20
 8006efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006f04:	493c      	ldr	r1, [pc, #240]	; (8006ff8 <_printf_i+0x23c>)
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006f0e:	f100 0504 	add.w	r5, r0, #4
 8006f12:	601d      	str	r5, [r3, #0]
 8006f14:	d001      	beq.n	8006f1a <_printf_i+0x15e>
 8006f16:	6803      	ldr	r3, [r0, #0]
 8006f18:	e002      	b.n	8006f20 <_printf_i+0x164>
 8006f1a:	0655      	lsls	r5, r2, #25
 8006f1c:	d5fb      	bpl.n	8006f16 <_printf_i+0x15a>
 8006f1e:	8803      	ldrh	r3, [r0, #0]
 8006f20:	07d0      	lsls	r0, r2, #31
 8006f22:	bf44      	itt	mi
 8006f24:	f042 0220 	orrmi.w	r2, r2, #32
 8006f28:	6022      	strmi	r2, [r4, #0]
 8006f2a:	b91b      	cbnz	r3, 8006f34 <_printf_i+0x178>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	f022 0220 	bic.w	r2, r2, #32
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	2210      	movs	r2, #16
 8006f36:	e7b1      	b.n	8006e9c <_printf_i+0xe0>
 8006f38:	4675      	mov	r5, lr
 8006f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f3e:	fb02 3310 	mls	r3, r2, r0, r3
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d1f5      	bne.n	8006f3a <_printf_i+0x17e>
 8006f4e:	e7b7      	b.n	8006ec0 <_printf_i+0x104>
 8006f50:	6808      	ldr	r0, [r1, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	6949      	ldr	r1, [r1, #20]
 8006f56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006f5a:	d004      	beq.n	8006f66 <_printf_i+0x1aa>
 8006f5c:	1d10      	adds	r0, r2, #4
 8006f5e:	6018      	str	r0, [r3, #0]
 8006f60:	6813      	ldr	r3, [r2, #0]
 8006f62:	6019      	str	r1, [r3, #0]
 8006f64:	e007      	b.n	8006f76 <_printf_i+0x1ba>
 8006f66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f6a:	f102 0004 	add.w	r0, r2, #4
 8006f6e:	6018      	str	r0, [r3, #0]
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	d0f6      	beq.n	8006f62 <_printf_i+0x1a6>
 8006f74:	8019      	strh	r1, [r3, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	4675      	mov	r5, lr
 8006f7c:	e7b1      	b.n	8006ee2 <_printf_i+0x126>
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	1d11      	adds	r1, r2, #4
 8006f82:	6019      	str	r1, [r3, #0]
 8006f84:	6815      	ldr	r5, [r2, #0]
 8006f86:	6862      	ldr	r2, [r4, #4]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7f9 f938 	bl	8000200 <memchr>
 8006f90:	b108      	cbz	r0, 8006f96 <_printf_i+0x1da>
 8006f92:	1b40      	subs	r0, r0, r5
 8006f94:	6060      	str	r0, [r4, #4]
 8006f96:	6863      	ldr	r3, [r4, #4]
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa0:	e79f      	b.n	8006ee2 <_printf_i+0x126>
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4630      	mov	r0, r6
 8006faa:	47c0      	blx	r8
 8006fac:	3001      	adds	r0, #1
 8006fae:	d0a2      	beq.n	8006ef6 <_printf_i+0x13a>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	079b      	lsls	r3, r3, #30
 8006fb4:	d507      	bpl.n	8006fc6 <_printf_i+0x20a>
 8006fb6:	2500      	movs	r5, #0
 8006fb8:	f104 0919 	add.w	r9, r4, #25
 8006fbc:	68e3      	ldr	r3, [r4, #12]
 8006fbe:	9a03      	ldr	r2, [sp, #12]
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	429d      	cmp	r5, r3
 8006fc4:	db05      	blt.n	8006fd2 <_printf_i+0x216>
 8006fc6:	68e0      	ldr	r0, [r4, #12]
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	4298      	cmp	r0, r3
 8006fcc:	bfb8      	it	lt
 8006fce:	4618      	movlt	r0, r3
 8006fd0:	e793      	b.n	8006efa <_printf_i+0x13e>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	464a      	mov	r2, r9
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	4630      	mov	r0, r6
 8006fda:	47c0      	blx	r8
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d08a      	beq.n	8006ef6 <_printf_i+0x13a>
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	e7eb      	b.n	8006fbc <_printf_i+0x200>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1a7      	bne.n	8006f38 <_printf_i+0x17c>
 8006fe8:	780b      	ldrb	r3, [r1, #0]
 8006fea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff2:	e765      	b.n	8006ec0 <_printf_i+0x104>
 8006ff4:	08047f0e 	.word	0x08047f0e
 8006ff8:	08047efd 	.word	0x08047efd

08006ffc <memcpy>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	1e43      	subs	r3, r0, #1
 8007000:	440a      	add	r2, r1
 8007002:	4291      	cmp	r1, r2
 8007004:	d100      	bne.n	8007008 <memcpy+0xc>
 8007006:	bd10      	pop	{r4, pc}
 8007008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800700c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007010:	e7f7      	b.n	8007002 <memcpy+0x6>

08007012 <memmove>:
 8007012:	4288      	cmp	r0, r1
 8007014:	b510      	push	{r4, lr}
 8007016:	eb01 0302 	add.w	r3, r1, r2
 800701a:	d803      	bhi.n	8007024 <memmove+0x12>
 800701c:	1e42      	subs	r2, r0, #1
 800701e:	4299      	cmp	r1, r3
 8007020:	d10c      	bne.n	800703c <memmove+0x2a>
 8007022:	bd10      	pop	{r4, pc}
 8007024:	4298      	cmp	r0, r3
 8007026:	d2f9      	bcs.n	800701c <memmove+0xa>
 8007028:	1881      	adds	r1, r0, r2
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	42d3      	cmn	r3, r2
 800702e:	d100      	bne.n	8007032 <memmove+0x20>
 8007030:	bd10      	pop	{r4, pc}
 8007032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007036:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800703a:	e7f7      	b.n	800702c <memmove+0x1a>
 800703c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007040:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007044:	e7eb      	b.n	800701e <memmove+0xc>
	...

08007048 <_free_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4605      	mov	r5, r0
 800704c:	2900      	cmp	r1, #0
 800704e:	d045      	beq.n	80070dc <_free_r+0x94>
 8007050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007054:	1f0c      	subs	r4, r1, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	bfb8      	it	lt
 800705a:	18e4      	addlt	r4, r4, r3
 800705c:	f000 f8d6 	bl	800720c <__malloc_lock>
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <_free_r+0x98>)
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	4610      	mov	r0, r2
 8007066:	b933      	cbnz	r3, 8007076 <_free_r+0x2e>
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	6014      	str	r4, [r2, #0]
 800706c:	4628      	mov	r0, r5
 800706e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007072:	f000 b8cc 	b.w	800720e <__malloc_unlock>
 8007076:	42a3      	cmp	r3, r4
 8007078:	d90c      	bls.n	8007094 <_free_r+0x4c>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	1862      	adds	r2, r4, r1
 800707e:	4293      	cmp	r3, r2
 8007080:	bf04      	itt	eq
 8007082:	681a      	ldreq	r2, [r3, #0]
 8007084:	685b      	ldreq	r3, [r3, #4]
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	bf04      	itt	eq
 800708a:	1852      	addeq	r2, r2, r1
 800708c:	6022      	streq	r2, [r4, #0]
 800708e:	6004      	str	r4, [r0, #0]
 8007090:	e7ec      	b.n	800706c <_free_r+0x24>
 8007092:	4613      	mov	r3, r2
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	b10a      	cbz	r2, 800709c <_free_r+0x54>
 8007098:	42a2      	cmp	r2, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x4a>
 800709c:	6819      	ldr	r1, [r3, #0]
 800709e:	1858      	adds	r0, r3, r1
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x74>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	4401      	add	r1, r0
 80070a8:	1858      	adds	r0, r3, r1
 80070aa:	4282      	cmp	r2, r0
 80070ac:	6019      	str	r1, [r3, #0]
 80070ae:	d1dd      	bne.n	800706c <_free_r+0x24>
 80070b0:	6810      	ldr	r0, [r2, #0]
 80070b2:	6852      	ldr	r2, [r2, #4]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	4401      	add	r1, r0
 80070b8:	6019      	str	r1, [r3, #0]
 80070ba:	e7d7      	b.n	800706c <_free_r+0x24>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x7c>
 80070be:	230c      	movs	r3, #12
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	e7d3      	b.n	800706c <_free_r+0x24>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	1821      	adds	r1, r4, r0
 80070c8:	428a      	cmp	r2, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6811      	ldreq	r1, [r2, #0]
 80070ce:	6852      	ldreq	r2, [r2, #4]
 80070d0:	6062      	str	r2, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1809      	addeq	r1, r1, r0
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	605c      	str	r4, [r3, #4]
 80070da:	e7c7      	b.n	800706c <_free_r+0x24>
 80070dc:	bd38      	pop	{r3, r4, r5, pc}
 80070de:	bf00      	nop
 80070e0:	20000a4c 	.word	0x20000a4c

080070e4 <_malloc_r>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	1ccd      	adds	r5, r1, #3
 80070e8:	f025 0503 	bic.w	r5, r5, #3
 80070ec:	3508      	adds	r5, #8
 80070ee:	2d0c      	cmp	r5, #12
 80070f0:	bf38      	it	cc
 80070f2:	250c      	movcc	r5, #12
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	4606      	mov	r6, r0
 80070f8:	db01      	blt.n	80070fe <_malloc_r+0x1a>
 80070fa:	42a9      	cmp	r1, r5
 80070fc:	d903      	bls.n	8007106 <_malloc_r+0x22>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	f000 f881 	bl	800720c <__malloc_lock>
 800710a:	4a23      	ldr	r2, [pc, #140]	; (8007198 <_malloc_r+0xb4>)
 800710c:	6814      	ldr	r4, [r2, #0]
 800710e:	4621      	mov	r1, r4
 8007110:	b991      	cbnz	r1, 8007138 <_malloc_r+0x54>
 8007112:	4c22      	ldr	r4, [pc, #136]	; (800719c <_malloc_r+0xb8>)
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	b91b      	cbnz	r3, 8007120 <_malloc_r+0x3c>
 8007118:	4630      	mov	r0, r6
 800711a:	f000 f867 	bl	80071ec <_sbrk_r>
 800711e:	6020      	str	r0, [r4, #0]
 8007120:	4629      	mov	r1, r5
 8007122:	4630      	mov	r0, r6
 8007124:	f000 f862 	bl	80071ec <_sbrk_r>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d126      	bne.n	800717a <_malloc_r+0x96>
 800712c:	230c      	movs	r3, #12
 800712e:	6033      	str	r3, [r6, #0]
 8007130:	4630      	mov	r0, r6
 8007132:	f000 f86c 	bl	800720e <__malloc_unlock>
 8007136:	e7e4      	b.n	8007102 <_malloc_r+0x1e>
 8007138:	680b      	ldr	r3, [r1, #0]
 800713a:	1b5b      	subs	r3, r3, r5
 800713c:	d41a      	bmi.n	8007174 <_malloc_r+0x90>
 800713e:	2b0b      	cmp	r3, #11
 8007140:	d90f      	bls.n	8007162 <_malloc_r+0x7e>
 8007142:	600b      	str	r3, [r1, #0]
 8007144:	50cd      	str	r5, [r1, r3]
 8007146:	18cc      	adds	r4, r1, r3
 8007148:	4630      	mov	r0, r6
 800714a:	f000 f860 	bl	800720e <__malloc_unlock>
 800714e:	f104 000b 	add.w	r0, r4, #11
 8007152:	1d23      	adds	r3, r4, #4
 8007154:	f020 0007 	bic.w	r0, r0, #7
 8007158:	1ac3      	subs	r3, r0, r3
 800715a:	d01b      	beq.n	8007194 <_malloc_r+0xb0>
 800715c:	425a      	negs	r2, r3
 800715e:	50e2      	str	r2, [r4, r3]
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	428c      	cmp	r4, r1
 8007164:	bf0d      	iteet	eq
 8007166:	6863      	ldreq	r3, [r4, #4]
 8007168:	684b      	ldrne	r3, [r1, #4]
 800716a:	6063      	strne	r3, [r4, #4]
 800716c:	6013      	streq	r3, [r2, #0]
 800716e:	bf18      	it	ne
 8007170:	460c      	movne	r4, r1
 8007172:	e7e9      	b.n	8007148 <_malloc_r+0x64>
 8007174:	460c      	mov	r4, r1
 8007176:	6849      	ldr	r1, [r1, #4]
 8007178:	e7ca      	b.n	8007110 <_malloc_r+0x2c>
 800717a:	1cc4      	adds	r4, r0, #3
 800717c:	f024 0403 	bic.w	r4, r4, #3
 8007180:	42a0      	cmp	r0, r4
 8007182:	d005      	beq.n	8007190 <_malloc_r+0xac>
 8007184:	1a21      	subs	r1, r4, r0
 8007186:	4630      	mov	r0, r6
 8007188:	f000 f830 	bl	80071ec <_sbrk_r>
 800718c:	3001      	adds	r0, #1
 800718e:	d0cd      	beq.n	800712c <_malloc_r+0x48>
 8007190:	6025      	str	r5, [r4, #0]
 8007192:	e7d9      	b.n	8007148 <_malloc_r+0x64>
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	bf00      	nop
 8007198:	20000a4c 	.word	0x20000a4c
 800719c:	20000a50 	.word	0x20000a50

080071a0 <_realloc_r>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	4607      	mov	r7, r0
 80071a4:	4614      	mov	r4, r2
 80071a6:	460e      	mov	r6, r1
 80071a8:	b921      	cbnz	r1, 80071b4 <_realloc_r+0x14>
 80071aa:	4611      	mov	r1, r2
 80071ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071b0:	f7ff bf98 	b.w	80070e4 <_malloc_r>
 80071b4:	b922      	cbnz	r2, 80071c0 <_realloc_r+0x20>
 80071b6:	f7ff ff47 	bl	8007048 <_free_r>
 80071ba:	4625      	mov	r5, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c0:	f000 f826 	bl	8007210 <_malloc_usable_size_r>
 80071c4:	4284      	cmp	r4, r0
 80071c6:	d90f      	bls.n	80071e8 <_realloc_r+0x48>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4638      	mov	r0, r7
 80071cc:	f7ff ff8a 	bl	80070e4 <_malloc_r>
 80071d0:	4605      	mov	r5, r0
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d0f2      	beq.n	80071bc <_realloc_r+0x1c>
 80071d6:	4631      	mov	r1, r6
 80071d8:	4622      	mov	r2, r4
 80071da:	f7ff ff0f 	bl	8006ffc <memcpy>
 80071de:	4631      	mov	r1, r6
 80071e0:	4638      	mov	r0, r7
 80071e2:	f7ff ff31 	bl	8007048 <_free_r>
 80071e6:	e7e9      	b.n	80071bc <_realloc_r+0x1c>
 80071e8:	4635      	mov	r5, r6
 80071ea:	e7e7      	b.n	80071bc <_realloc_r+0x1c>

080071ec <_sbrk_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4c06      	ldr	r4, [pc, #24]	; (8007208 <_sbrk_r+0x1c>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4605      	mov	r5, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	f000 f814 	bl	8007224 <_sbrk>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_sbrk_r+0x1a>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	b103      	cbz	r3, 8007206 <_sbrk_r+0x1a>
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	20000e30 	.word	0x20000e30

0800720c <__malloc_lock>:
 800720c:	4770      	bx	lr

0800720e <__malloc_unlock>:
 800720e:	4770      	bx	lr

08007210 <_malloc_usable_size_r>:
 8007210:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007214:	2800      	cmp	r0, #0
 8007216:	f1a0 0004 	sub.w	r0, r0, #4
 800721a:	bfbc      	itt	lt
 800721c:	580b      	ldrlt	r3, [r1, r0]
 800721e:	18c0      	addlt	r0, r0, r3
 8007220:	4770      	bx	lr
	...

08007224 <_sbrk>:
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <_sbrk+0x14>)
 8007226:	6819      	ldr	r1, [r3, #0]
 8007228:	4602      	mov	r2, r0
 800722a:	b909      	cbnz	r1, 8007230 <_sbrk+0xc>
 800722c:	4903      	ldr	r1, [pc, #12]	; (800723c <_sbrk+0x18>)
 800722e:	6019      	str	r1, [r3, #0]
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	4402      	add	r2, r0
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	4770      	bx	lr
 8007238:	20000a54 	.word	0x20000a54
 800723c:	20000e34 	.word	0x20000e34

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
